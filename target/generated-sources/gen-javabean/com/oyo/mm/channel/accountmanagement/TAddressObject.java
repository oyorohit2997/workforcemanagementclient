/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.mm.channel.accountmanagement;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-05-22")
public class TAddressObject implements org.apache.thrift.TBase<TAddressObject, TAddressObject._Fields>, java.io.Serializable, Cloneable, Comparable<TAddressObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAddressObject");

  private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stateCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ADDRESS_LINE1_FIELD_DESC = new org.apache.thrift.protocol.TField("addressLine1", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ADDRESS_LINE2_FIELD_DESC = new org.apache.thrift.protocol.TField("addressLine2", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POSTAL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("postalCode", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAddressObjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAddressObjectTupleSchemeFactory();

  private TCountryCode countryCode; // required
  private java.lang.String stateCode; // required
  private java.lang.String cityCode; // required
  private java.lang.String addressLine1; // required
  private java.lang.String addressLine2; // optional
  private java.lang.String postalCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TCountryCode
     */
    COUNTRY_CODE((short)1, "countryCode"),
    STATE_CODE((short)2, "stateCode"),
    CITY_CODE((short)3, "cityCode"),
    ADDRESS_LINE1((short)4, "addressLine1"),
    ADDRESS_LINE2((short)5, "addressLine2"),
    POSTAL_CODE((short)6, "postalCode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNTRY_CODE
          return COUNTRY_CODE;
        case 2: // STATE_CODE
          return STATE_CODE;
        case 3: // CITY_CODE
          return CITY_CODE;
        case 4: // ADDRESS_LINE1
          return ADDRESS_LINE1;
        case 5: // ADDRESS_LINE2
          return ADDRESS_LINE2;
        case 6: // POSTAL_CODE
          return POSTAL_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ADDRESS_LINE2};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCountryCode.class)));
    tmpMap.put(_Fields.STATE_CODE, new org.apache.thrift.meta_data.FieldMetaData("stateCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_LINE1, new org.apache.thrift.meta_data.FieldMetaData("addressLine1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_LINE2, new org.apache.thrift.meta_data.FieldMetaData("addressLine2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSTAL_CODE, new org.apache.thrift.meta_data.FieldMetaData("postalCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAddressObject.class, metaDataMap);
  }

  public TAddressObject() {
  }

  public TAddressObject(
    TCountryCode countryCode,
    java.lang.String stateCode,
    java.lang.String cityCode,
    java.lang.String addressLine1,
    java.lang.String postalCode)
  {
    this();
    this.countryCode = countryCode;
    this.stateCode = stateCode;
    this.cityCode = cityCode;
    this.addressLine1 = addressLine1;
    this.postalCode = postalCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAddressObject(TAddressObject other) {
    if (other.isSetCountryCode()) {
      this.countryCode = other.countryCode;
    }
    if (other.isSetStateCode()) {
      this.stateCode = other.stateCode;
    }
    if (other.isSetCityCode()) {
      this.cityCode = other.cityCode;
    }
    if (other.isSetAddressLine1()) {
      this.addressLine1 = other.addressLine1;
    }
    if (other.isSetAddressLine2()) {
      this.addressLine2 = other.addressLine2;
    }
    if (other.isSetPostalCode()) {
      this.postalCode = other.postalCode;
    }
  }

  public TAddressObject deepCopy() {
    return new TAddressObject(this);
  }

  @Override
  public void clear() {
    this.countryCode = null;
    this.stateCode = null;
    this.cityCode = null;
    this.addressLine1 = null;
    this.addressLine2 = null;
    this.postalCode = null;
  }

  /**
   * 
   * @see TCountryCode
   */
  public TCountryCode getCountryCode() {
    return this.countryCode;
  }

  /**
   * 
   * @see TCountryCode
   */
  public void setCountryCode(TCountryCode countryCode) {
    this.countryCode = countryCode;
  }

  public void unsetCountryCode() {
    this.countryCode = null;
  }

  /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryCode() {
    return this.countryCode != null;
  }

  public void setCountryCodeIsSet(boolean value) {
    if (!value) {
      this.countryCode = null;
    }
  }

  public java.lang.String getStateCode() {
    return this.stateCode;
  }

  public void setStateCode(java.lang.String stateCode) {
    this.stateCode = stateCode;
  }

  public void unsetStateCode() {
    this.stateCode = null;
  }

  /** Returns true if field stateCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStateCode() {
    return this.stateCode != null;
  }

  public void setStateCodeIsSet(boolean value) {
    if (!value) {
      this.stateCode = null;
    }
  }

  public java.lang.String getCityCode() {
    return this.cityCode;
  }

  public void setCityCode(java.lang.String cityCode) {
    this.cityCode = cityCode;
  }

  public void unsetCityCode() {
    this.cityCode = null;
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return this.cityCode != null;
  }

  public void setCityCodeIsSet(boolean value) {
    if (!value) {
      this.cityCode = null;
    }
  }

  public java.lang.String getAddressLine1() {
    return this.addressLine1;
  }

  public void setAddressLine1(java.lang.String addressLine1) {
    this.addressLine1 = addressLine1;
  }

  public void unsetAddressLine1() {
    this.addressLine1 = null;
  }

  /** Returns true if field addressLine1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressLine1() {
    return this.addressLine1 != null;
  }

  public void setAddressLine1IsSet(boolean value) {
    if (!value) {
      this.addressLine1 = null;
    }
  }

  public java.lang.String getAddressLine2() {
    return this.addressLine2;
  }

  public void setAddressLine2(java.lang.String addressLine2) {
    this.addressLine2 = addressLine2;
  }

  public void unsetAddressLine2() {
    this.addressLine2 = null;
  }

  /** Returns true if field addressLine2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressLine2() {
    return this.addressLine2 != null;
  }

  public void setAddressLine2IsSet(boolean value) {
    if (!value) {
      this.addressLine2 = null;
    }
  }

  public java.lang.String getPostalCode() {
    return this.postalCode;
  }

  public void setPostalCode(java.lang.String postalCode) {
    this.postalCode = postalCode;
  }

  public void unsetPostalCode() {
    this.postalCode = null;
  }

  /** Returns true if field postalCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPostalCode() {
    return this.postalCode != null;
  }

  public void setPostalCodeIsSet(boolean value) {
    if (!value) {
      this.postalCode = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COUNTRY_CODE:
      if (value == null) {
        unsetCountryCode();
      } else {
        setCountryCode((TCountryCode)value);
      }
      break;

    case STATE_CODE:
      if (value == null) {
        unsetStateCode();
      } else {
        setStateCode((java.lang.String)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((java.lang.String)value);
      }
      break;

    case ADDRESS_LINE1:
      if (value == null) {
        unsetAddressLine1();
      } else {
        setAddressLine1((java.lang.String)value);
      }
      break;

    case ADDRESS_LINE2:
      if (value == null) {
        unsetAddressLine2();
      } else {
        setAddressLine2((java.lang.String)value);
      }
      break;

    case POSTAL_CODE:
      if (value == null) {
        unsetPostalCode();
      } else {
        setPostalCode((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNTRY_CODE:
      return getCountryCode();

    case STATE_CODE:
      return getStateCode();

    case CITY_CODE:
      return getCityCode();

    case ADDRESS_LINE1:
      return getAddressLine1();

    case ADDRESS_LINE2:
      return getAddressLine2();

    case POSTAL_CODE:
      return getPostalCode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COUNTRY_CODE:
      return isSetCountryCode();
    case STATE_CODE:
      return isSetStateCode();
    case CITY_CODE:
      return isSetCityCode();
    case ADDRESS_LINE1:
      return isSetAddressLine1();
    case ADDRESS_LINE2:
      return isSetAddressLine2();
    case POSTAL_CODE:
      return isSetPostalCode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TAddressObject)
      return this.equals((TAddressObject)that);
    return false;
  }

  public boolean equals(TAddressObject that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_countryCode = true && this.isSetCountryCode();
    boolean that_present_countryCode = true && that.isSetCountryCode();
    if (this_present_countryCode || that_present_countryCode) {
      if (!(this_present_countryCode && that_present_countryCode))
        return false;
      if (!this.countryCode.equals(that.countryCode))
        return false;
    }

    boolean this_present_stateCode = true && this.isSetStateCode();
    boolean that_present_stateCode = true && that.isSetStateCode();
    if (this_present_stateCode || that_present_stateCode) {
      if (!(this_present_stateCode && that_present_stateCode))
        return false;
      if (!this.stateCode.equals(that.stateCode))
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (!this.cityCode.equals(that.cityCode))
        return false;
    }

    boolean this_present_addressLine1 = true && this.isSetAddressLine1();
    boolean that_present_addressLine1 = true && that.isSetAddressLine1();
    if (this_present_addressLine1 || that_present_addressLine1) {
      if (!(this_present_addressLine1 && that_present_addressLine1))
        return false;
      if (!this.addressLine1.equals(that.addressLine1))
        return false;
    }

    boolean this_present_addressLine2 = true && this.isSetAddressLine2();
    boolean that_present_addressLine2 = true && that.isSetAddressLine2();
    if (this_present_addressLine2 || that_present_addressLine2) {
      if (!(this_present_addressLine2 && that_present_addressLine2))
        return false;
      if (!this.addressLine2.equals(that.addressLine2))
        return false;
    }

    boolean this_present_postalCode = true && this.isSetPostalCode();
    boolean that_present_postalCode = true && that.isSetPostalCode();
    if (this_present_postalCode || that_present_postalCode) {
      if (!(this_present_postalCode && that_present_postalCode))
        return false;
      if (!this.postalCode.equals(that.postalCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCountryCode()) ? 131071 : 524287);
    if (isSetCountryCode())
      hashCode = hashCode * 8191 + countryCode.getValue();

    hashCode = hashCode * 8191 + ((isSetStateCode()) ? 131071 : 524287);
    if (isSetStateCode())
      hashCode = hashCode * 8191 + stateCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetCityCode()) ? 131071 : 524287);
    if (isSetCityCode())
      hashCode = hashCode * 8191 + cityCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddressLine1()) ? 131071 : 524287);
    if (isSetAddressLine1())
      hashCode = hashCode * 8191 + addressLine1.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddressLine2()) ? 131071 : 524287);
    if (isSetAddressLine2())
      hashCode = hashCode * 8191 + addressLine2.hashCode();

    hashCode = hashCode * 8191 + ((isSetPostalCode()) ? 131071 : 524287);
    if (isSetPostalCode())
      hashCode = hashCode * 8191 + postalCode.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAddressObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStateCode()).compareTo(other.isSetStateCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateCode, other.stateCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddressLine1()).compareTo(other.isSetAddressLine1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressLine1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressLine1, other.addressLine1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddressLine2()).compareTo(other.isSetAddressLine2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressLine2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressLine2, other.addressLine2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPostalCode()).compareTo(other.isSetPostalCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostalCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postalCode, other.postalCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAddressObject(");
    boolean first = true;

    sb.append("countryCode:");
    if (this.countryCode == null) {
      sb.append("null");
    } else {
      sb.append(this.countryCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stateCode:");
    if (this.stateCode == null) {
      sb.append("null");
    } else {
      sb.append(this.stateCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityCode:");
    if (this.cityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.cityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressLine1:");
    if (this.addressLine1 == null) {
      sb.append("null");
    } else {
      sb.append(this.addressLine1);
    }
    first = false;
    if (isSetAddressLine2()) {
      if (!first) sb.append(", ");
      sb.append("addressLine2:");
      if (this.addressLine2 == null) {
        sb.append("null");
      } else {
        sb.append(this.addressLine2);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("postalCode:");
    if (this.postalCode == null) {
      sb.append("null");
    } else {
      sb.append(this.postalCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetCountryCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'countryCode' is unset! Struct:" + toString());
    }

    if (!isSetStateCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stateCode' is unset! Struct:" + toString());
    }

    if (!isSetCityCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cityCode' is unset! Struct:" + toString());
    }

    if (!isSetAddressLine1()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addressLine1' is unset! Struct:" + toString());
    }

    if (!isSetPostalCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'postalCode' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAddressObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAddressObjectStandardScheme getScheme() {
      return new TAddressObjectStandardScheme();
    }
  }

  private static class TAddressObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAddressObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAddressObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countryCode = com.oyo.mm.channel.accountmanagement.TCountryCode.findByValue(iprot.readI32());
              struct.setCountryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stateCode = iprot.readString();
              struct.setStateCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityCode = iprot.readString();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADDRESS_LINE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressLine1 = iprot.readString();
              struct.setAddressLine1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADDRESS_LINE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressLine2 = iprot.readString();
              struct.setAddressLine2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSTAL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postalCode = iprot.readString();
              struct.setPostalCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAddressObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.countryCode != null) {
        oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
        oprot.writeI32(struct.countryCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stateCode != null) {
        oprot.writeFieldBegin(STATE_CODE_FIELD_DESC);
        oprot.writeString(struct.stateCode);
        oprot.writeFieldEnd();
      }
      if (struct.cityCode != null) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.addressLine1 != null) {
        oprot.writeFieldBegin(ADDRESS_LINE1_FIELD_DESC);
        oprot.writeString(struct.addressLine1);
        oprot.writeFieldEnd();
      }
      if (struct.addressLine2 != null) {
        if (struct.isSetAddressLine2()) {
          oprot.writeFieldBegin(ADDRESS_LINE2_FIELD_DESC);
          oprot.writeString(struct.addressLine2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postalCode != null) {
        oprot.writeFieldBegin(POSTAL_CODE_FIELD_DESC);
        oprot.writeString(struct.postalCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAddressObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAddressObjectTupleScheme getScheme() {
      return new TAddressObjectTupleScheme();
    }
  }

  private static class TAddressObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAddressObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAddressObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.countryCode.getValue());
      oprot.writeString(struct.stateCode);
      oprot.writeString(struct.cityCode);
      oprot.writeString(struct.addressLine1);
      oprot.writeString(struct.postalCode);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAddressLine2()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetAddressLine2()) {
        oprot.writeString(struct.addressLine2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAddressObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.countryCode = com.oyo.mm.channel.accountmanagement.TCountryCode.findByValue(iprot.readI32());
      struct.setCountryCodeIsSet(true);
      struct.stateCode = iprot.readString();
      struct.setStateCodeIsSet(true);
      struct.cityCode = iprot.readString();
      struct.setCityCodeIsSet(true);
      struct.addressLine1 = iprot.readString();
      struct.setAddressLine1IsSet(true);
      struct.postalCode = iprot.readString();
      struct.setPostalCodeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.addressLine2 = iprot.readString();
        struct.setAddressLine2IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

