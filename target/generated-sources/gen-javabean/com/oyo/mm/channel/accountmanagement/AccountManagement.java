/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.mm.channel.accountmanagement;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-05-22")
public class AccountManagement {

  public interface Iface {

    public TAccountResponse createAccount(TCreateAccountRequest createAccountRequest) throws TAccountCreationException, TAccountDataValidationException, TOnboardingDataException, org.apache.thrift.TException;

    public TAccountResponse deleteAccount(java.lang.String accountCode) throws TAccountDeleteException, TNoAccountException, TAlreadyDeletedException, org.apache.thrift.TException;

    public TAccountResponse financeApprovalGranted(java.lang.String accountCode, java.lang.String approver, java.lang.String countryCode) throws TNoAccountException, TAccountAcceptedException, org.apache.thrift.TException;

    public TAccountResponse financeApprovalRejected(java.lang.String accountCode, java.lang.String reason, java.lang.String approver, java.lang.String countryCode) throws TNoAccountException, TAccountRejectedException, org.apache.thrift.TException;

    public TAccountResponse updateAccount(TUpdateAccountRequest updateAccountRequest) throws TAccountUpdateException, TAlreadyDeletedException, TNoAccountException, TAccountDataValidationException, org.apache.thrift.TException;

    public TAccountObject getAccount(java.lang.String accountCode) throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException;

    public TAccountObject getAccountFromCrsId(java.lang.String crsId, TEntityType entityType) throws TNoAccountException, org.apache.thrift.TException;

    public TAccountObject getAccountFromCrsCode(java.lang.String crsCode, TEntityType entityType) throws TNoAccountException, org.apache.thrift.TException;

    public java.util.List<TAccountObject> getAccounts(java.util.List<java.lang.String> accountCodes) throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException;

    public TAccountSearchResponse searchAccounts(TSearchAccountRequest searchAccountRequest) throws TAccountSearchException, TSizeExceededException, Error, org.apache.thrift.TException;

    public java.util.List<TAutoCompleteResponse> AutoCompleteName(TAutoCompleteRequest autoCompleteRequest) throws TAccountSearchException, TSizeExceededException, Error, org.apache.thrift.TException;

    public java.util.List<TAccountVersionResponse> getAccountHistory(java.lang.String accountCode) throws TAccountHistoryException, org.apache.thrift.TException;

    public boolean checkIsD2t(java.lang.String accountCode) throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createAccount(TCreateAccountRequest createAccountRequest, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException;

    public void deleteAccount(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException;

    public void financeApprovalGranted(java.lang.String accountCode, java.lang.String approver, java.lang.String countryCode, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException;

    public void financeApprovalRejected(java.lang.String accountCode, java.lang.String reason, java.lang.String approver, java.lang.String countryCode, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException;

    public void updateAccount(TUpdateAccountRequest updateAccountRequest, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException;

    public void getAccount(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler) throws org.apache.thrift.TException;

    public void getAccountFromCrsId(java.lang.String crsId, TEntityType entityType, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler) throws org.apache.thrift.TException;

    public void getAccountFromCrsCode(java.lang.String crsCode, TEntityType entityType, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler) throws org.apache.thrift.TException;

    public void getAccounts(java.util.List<java.lang.String> accountCodes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountObject>> resultHandler) throws org.apache.thrift.TException;

    public void searchAccounts(TSearchAccountRequest searchAccountRequest, org.apache.thrift.async.AsyncMethodCallback<TAccountSearchResponse> resultHandler) throws org.apache.thrift.TException;

    public void AutoCompleteName(TAutoCompleteRequest autoCompleteRequest, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAutoCompleteResponse>> resultHandler) throws org.apache.thrift.TException;

    public void getAccountHistory(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountVersionResponse>> resultHandler) throws org.apache.thrift.TException;

    public void checkIsD2t(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TAccountResponse createAccount(TCreateAccountRequest createAccountRequest) throws TAccountCreationException, TAccountDataValidationException, TOnboardingDataException, org.apache.thrift.TException
    {
      send_createAccount(createAccountRequest);
      return recv_createAccount();
    }

    public void send_createAccount(TCreateAccountRequest createAccountRequest) throws org.apache.thrift.TException
    {
      createAccount_args args = new createAccount_args();
      args.setCreateAccountRequest(createAccountRequest);
      sendBase("createAccount", args);
    }

    public TAccountResponse recv_createAccount() throws TAccountCreationException, TAccountDataValidationException, TOnboardingDataException, org.apache.thrift.TException
    {
      createAccount_result result = new createAccount_result();
      receiveBase(result, "createAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAccount failed: unknown result");
    }

    public TAccountResponse deleteAccount(java.lang.String accountCode) throws TAccountDeleteException, TNoAccountException, TAlreadyDeletedException, org.apache.thrift.TException
    {
      send_deleteAccount(accountCode);
      return recv_deleteAccount();
    }

    public void send_deleteAccount(java.lang.String accountCode) throws org.apache.thrift.TException
    {
      deleteAccount_args args = new deleteAccount_args();
      args.setAccountCode(accountCode);
      sendBase("deleteAccount", args);
    }

    public TAccountResponse recv_deleteAccount() throws TAccountDeleteException, TNoAccountException, TAlreadyDeletedException, org.apache.thrift.TException
    {
      deleteAccount_result result = new deleteAccount_result();
      receiveBase(result, "deleteAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAccount failed: unknown result");
    }

    public TAccountResponse financeApprovalGranted(java.lang.String accountCode, java.lang.String approver, java.lang.String countryCode) throws TNoAccountException, TAccountAcceptedException, org.apache.thrift.TException
    {
      send_financeApprovalGranted(accountCode, approver, countryCode);
      return recv_financeApprovalGranted();
    }

    public void send_financeApprovalGranted(java.lang.String accountCode, java.lang.String approver, java.lang.String countryCode) throws org.apache.thrift.TException
    {
      financeApprovalGranted_args args = new financeApprovalGranted_args();
      args.setAccountCode(accountCode);
      args.setApprover(approver);
      args.setCountryCode(countryCode);
      sendBase("financeApprovalGranted", args);
    }

    public TAccountResponse recv_financeApprovalGranted() throws TNoAccountException, TAccountAcceptedException, org.apache.thrift.TException
    {
      financeApprovalGranted_result result = new financeApprovalGranted_result();
      receiveBase(result, "financeApprovalGranted");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "financeApprovalGranted failed: unknown result");
    }

    public TAccountResponse financeApprovalRejected(java.lang.String accountCode, java.lang.String reason, java.lang.String approver, java.lang.String countryCode) throws TNoAccountException, TAccountRejectedException, org.apache.thrift.TException
    {
      send_financeApprovalRejected(accountCode, reason, approver, countryCode);
      return recv_financeApprovalRejected();
    }

    public void send_financeApprovalRejected(java.lang.String accountCode, java.lang.String reason, java.lang.String approver, java.lang.String countryCode) throws org.apache.thrift.TException
    {
      financeApprovalRejected_args args = new financeApprovalRejected_args();
      args.setAccountCode(accountCode);
      args.setReason(reason);
      args.setApprover(approver);
      args.setCountryCode(countryCode);
      sendBase("financeApprovalRejected", args);
    }

    public TAccountResponse recv_financeApprovalRejected() throws TNoAccountException, TAccountRejectedException, org.apache.thrift.TException
    {
      financeApprovalRejected_result result = new financeApprovalRejected_result();
      receiveBase(result, "financeApprovalRejected");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "financeApprovalRejected failed: unknown result");
    }

    public TAccountResponse updateAccount(TUpdateAccountRequest updateAccountRequest) throws TAccountUpdateException, TAlreadyDeletedException, TNoAccountException, TAccountDataValidationException, org.apache.thrift.TException
    {
      send_updateAccount(updateAccountRequest);
      return recv_updateAccount();
    }

    public void send_updateAccount(TUpdateAccountRequest updateAccountRequest) throws org.apache.thrift.TException
    {
      updateAccount_args args = new updateAccount_args();
      args.setUpdateAccountRequest(updateAccountRequest);
      sendBase("updateAccount", args);
    }

    public TAccountResponse recv_updateAccount() throws TAccountUpdateException, TAlreadyDeletedException, TNoAccountException, TAccountDataValidationException, org.apache.thrift.TException
    {
      updateAccount_result result = new updateAccount_result();
      receiveBase(result, "updateAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      if (result.e4 != null) {
        throw result.e4;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAccount failed: unknown result");
    }

    public TAccountObject getAccount(java.lang.String accountCode) throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException
    {
      send_getAccount(accountCode);
      return recv_getAccount();
    }

    public void send_getAccount(java.lang.String accountCode) throws org.apache.thrift.TException
    {
      getAccount_args args = new getAccount_args();
      args.setAccountCode(accountCode);
      sendBase("getAccount", args);
    }

    public TAccountObject recv_getAccount() throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException
    {
      getAccount_result result = new getAccount_result();
      receiveBase(result, "getAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccount failed: unknown result");
    }

    public TAccountObject getAccountFromCrsId(java.lang.String crsId, TEntityType entityType) throws TNoAccountException, org.apache.thrift.TException
    {
      send_getAccountFromCrsId(crsId, entityType);
      return recv_getAccountFromCrsId();
    }

    public void send_getAccountFromCrsId(java.lang.String crsId, TEntityType entityType) throws org.apache.thrift.TException
    {
      getAccountFromCrsId_args args = new getAccountFromCrsId_args();
      args.setCrsId(crsId);
      args.setEntityType(entityType);
      sendBase("getAccountFromCrsId", args);
    }

    public TAccountObject recv_getAccountFromCrsId() throws TNoAccountException, org.apache.thrift.TException
    {
      getAccountFromCrsId_result result = new getAccountFromCrsId_result();
      receiveBase(result, "getAccountFromCrsId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccountFromCrsId failed: unknown result");
    }

    public TAccountObject getAccountFromCrsCode(java.lang.String crsCode, TEntityType entityType) throws TNoAccountException, org.apache.thrift.TException
    {
      send_getAccountFromCrsCode(crsCode, entityType);
      return recv_getAccountFromCrsCode();
    }

    public void send_getAccountFromCrsCode(java.lang.String crsCode, TEntityType entityType) throws org.apache.thrift.TException
    {
      getAccountFromCrsCode_args args = new getAccountFromCrsCode_args();
      args.setCrsCode(crsCode);
      args.setEntityType(entityType);
      sendBase("getAccountFromCrsCode", args);
    }

    public TAccountObject recv_getAccountFromCrsCode() throws TNoAccountException, org.apache.thrift.TException
    {
      getAccountFromCrsCode_result result = new getAccountFromCrsCode_result();
      receiveBase(result, "getAccountFromCrsCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccountFromCrsCode failed: unknown result");
    }

    public java.util.List<TAccountObject> getAccounts(java.util.List<java.lang.String> accountCodes) throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException
    {
      send_getAccounts(accountCodes);
      return recv_getAccounts();
    }

    public void send_getAccounts(java.util.List<java.lang.String> accountCodes) throws org.apache.thrift.TException
    {
      getAccounts_args args = new getAccounts_args();
      args.setAccountCodes(accountCodes);
      sendBase("getAccounts", args);
    }

    public java.util.List<TAccountObject> recv_getAccounts() throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException
    {
      getAccounts_result result = new getAccounts_result();
      receiveBase(result, "getAccounts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccounts failed: unknown result");
    }

    public TAccountSearchResponse searchAccounts(TSearchAccountRequest searchAccountRequest) throws TAccountSearchException, TSizeExceededException, Error, org.apache.thrift.TException
    {
      send_searchAccounts(searchAccountRequest);
      return recv_searchAccounts();
    }

    public void send_searchAccounts(TSearchAccountRequest searchAccountRequest) throws org.apache.thrift.TException
    {
      searchAccounts_args args = new searchAccounts_args();
      args.setSearchAccountRequest(searchAccountRequest);
      sendBase("searchAccounts", args);
    }

    public TAccountSearchResponse recv_searchAccounts() throws TAccountSearchException, TSizeExceededException, Error, org.apache.thrift.TException
    {
      searchAccounts_result result = new searchAccounts_result();
      receiveBase(result, "searchAccounts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchAccounts failed: unknown result");
    }

    public java.util.List<TAutoCompleteResponse> AutoCompleteName(TAutoCompleteRequest autoCompleteRequest) throws TAccountSearchException, TSizeExceededException, Error, org.apache.thrift.TException
    {
      send_AutoCompleteName(autoCompleteRequest);
      return recv_AutoCompleteName();
    }

    public void send_AutoCompleteName(TAutoCompleteRequest autoCompleteRequest) throws org.apache.thrift.TException
    {
      AutoCompleteName_args args = new AutoCompleteName_args();
      args.setAutoCompleteRequest(autoCompleteRequest);
      sendBase("AutoCompleteName", args);
    }

    public java.util.List<TAutoCompleteResponse> recv_AutoCompleteName() throws TAccountSearchException, TSizeExceededException, Error, org.apache.thrift.TException
    {
      AutoCompleteName_result result = new AutoCompleteName_result();
      receiveBase(result, "AutoCompleteName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AutoCompleteName failed: unknown result");
    }

    public java.util.List<TAccountVersionResponse> getAccountHistory(java.lang.String accountCode) throws TAccountHistoryException, org.apache.thrift.TException
    {
      send_getAccountHistory(accountCode);
      return recv_getAccountHistory();
    }

    public void send_getAccountHistory(java.lang.String accountCode) throws org.apache.thrift.TException
    {
      getAccountHistory_args args = new getAccountHistory_args();
      args.setAccountCode(accountCode);
      sendBase("getAccountHistory", args);
    }

    public java.util.List<TAccountVersionResponse> recv_getAccountHistory() throws TAccountHistoryException, org.apache.thrift.TException
    {
      getAccountHistory_result result = new getAccountHistory_result();
      receiveBase(result, "getAccountHistory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccountHistory failed: unknown result");
    }

    public boolean checkIsD2t(java.lang.String accountCode) throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException
    {
      send_checkIsD2t(accountCode);
      return recv_checkIsD2t();
    }

    public void send_checkIsD2t(java.lang.String accountCode) throws org.apache.thrift.TException
    {
      checkIsD2t_args args = new checkIsD2t_args();
      args.setAccountCode(accountCode);
      sendBase("checkIsD2t", args);
    }

    public boolean recv_checkIsD2t() throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException
    {
      checkIsD2t_result result = new checkIsD2t_result();
      receiveBase(result, "checkIsD2t");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkIsD2t failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createAccount(TCreateAccountRequest createAccountRequest, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAccount_call method_call = new createAccount_call(createAccountRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAccount_call extends org.apache.thrift.async.TAsyncMethodCall<TAccountResponse> {
      private TCreateAccountRequest createAccountRequest;
      public createAccount_call(TCreateAccountRequest createAccountRequest, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.createAccountRequest = createAccountRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAccount_args args = new createAccount_args();
        args.setCreateAccountRequest(createAccountRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAccountResponse getResult() throws TAccountCreationException, TAccountDataValidationException, TOnboardingDataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAccount();
      }
    }

    public void deleteAccount(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAccount_call method_call = new deleteAccount_call(accountCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAccount_call extends org.apache.thrift.async.TAsyncMethodCall<TAccountResponse> {
      private java.lang.String accountCode;
      public deleteAccount_call(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountCode = accountCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAccount_args args = new deleteAccount_args();
        args.setAccountCode(accountCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAccountResponse getResult() throws TAccountDeleteException, TNoAccountException, TAlreadyDeletedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAccount();
      }
    }

    public void financeApprovalGranted(java.lang.String accountCode, java.lang.String approver, java.lang.String countryCode, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      financeApprovalGranted_call method_call = new financeApprovalGranted_call(accountCode, approver, countryCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class financeApprovalGranted_call extends org.apache.thrift.async.TAsyncMethodCall<TAccountResponse> {
      private java.lang.String accountCode;
      private java.lang.String approver;
      private java.lang.String countryCode;
      public financeApprovalGranted_call(java.lang.String accountCode, java.lang.String approver, java.lang.String countryCode, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountCode = accountCode;
        this.approver = approver;
        this.countryCode = countryCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("financeApprovalGranted", org.apache.thrift.protocol.TMessageType.CALL, 0));
        financeApprovalGranted_args args = new financeApprovalGranted_args();
        args.setAccountCode(accountCode);
        args.setApprover(approver);
        args.setCountryCode(countryCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAccountResponse getResult() throws TNoAccountException, TAccountAcceptedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_financeApprovalGranted();
      }
    }

    public void financeApprovalRejected(java.lang.String accountCode, java.lang.String reason, java.lang.String approver, java.lang.String countryCode, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      financeApprovalRejected_call method_call = new financeApprovalRejected_call(accountCode, reason, approver, countryCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class financeApprovalRejected_call extends org.apache.thrift.async.TAsyncMethodCall<TAccountResponse> {
      private java.lang.String accountCode;
      private java.lang.String reason;
      private java.lang.String approver;
      private java.lang.String countryCode;
      public financeApprovalRejected_call(java.lang.String accountCode, java.lang.String reason, java.lang.String approver, java.lang.String countryCode, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountCode = accountCode;
        this.reason = reason;
        this.approver = approver;
        this.countryCode = countryCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("financeApprovalRejected", org.apache.thrift.protocol.TMessageType.CALL, 0));
        financeApprovalRejected_args args = new financeApprovalRejected_args();
        args.setAccountCode(accountCode);
        args.setReason(reason);
        args.setApprover(approver);
        args.setCountryCode(countryCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAccountResponse getResult() throws TNoAccountException, TAccountRejectedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_financeApprovalRejected();
      }
    }

    public void updateAccount(TUpdateAccountRequest updateAccountRequest, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAccount_call method_call = new updateAccount_call(updateAccountRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAccount_call extends org.apache.thrift.async.TAsyncMethodCall<TAccountResponse> {
      private TUpdateAccountRequest updateAccountRequest;
      public updateAccount_call(TUpdateAccountRequest updateAccountRequest, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.updateAccountRequest = updateAccountRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAccount_args args = new updateAccount_args();
        args.setUpdateAccountRequest(updateAccountRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAccountResponse getResult() throws TAccountUpdateException, TAlreadyDeletedException, TNoAccountException, TAccountDataValidationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAccount();
      }
    }

    public void getAccount(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccount_call method_call = new getAccount_call(accountCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAccount_call extends org.apache.thrift.async.TAsyncMethodCall<TAccountObject> {
      private java.lang.String accountCode;
      public getAccount_call(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountCode = accountCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccount_args args = new getAccount_args();
        args.setAccountCode(accountCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAccountObject getResult() throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccount();
      }
    }

    public void getAccountFromCrsId(java.lang.String crsId, TEntityType entityType, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccountFromCrsId_call method_call = new getAccountFromCrsId_call(crsId, entityType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAccountFromCrsId_call extends org.apache.thrift.async.TAsyncMethodCall<TAccountObject> {
      private java.lang.String crsId;
      private TEntityType entityType;
      public getAccountFromCrsId_call(java.lang.String crsId, TEntityType entityType, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.crsId = crsId;
        this.entityType = entityType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccountFromCrsId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccountFromCrsId_args args = new getAccountFromCrsId_args();
        args.setCrsId(crsId);
        args.setEntityType(entityType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAccountObject getResult() throws TNoAccountException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccountFromCrsId();
      }
    }

    public void getAccountFromCrsCode(java.lang.String crsCode, TEntityType entityType, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccountFromCrsCode_call method_call = new getAccountFromCrsCode_call(crsCode, entityType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAccountFromCrsCode_call extends org.apache.thrift.async.TAsyncMethodCall<TAccountObject> {
      private java.lang.String crsCode;
      private TEntityType entityType;
      public getAccountFromCrsCode_call(java.lang.String crsCode, TEntityType entityType, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.crsCode = crsCode;
        this.entityType = entityType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccountFromCrsCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccountFromCrsCode_args args = new getAccountFromCrsCode_args();
        args.setCrsCode(crsCode);
        args.setEntityType(entityType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAccountObject getResult() throws TNoAccountException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccountFromCrsCode();
      }
    }

    public void getAccounts(java.util.List<java.lang.String> accountCodes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountObject>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccounts_call method_call = new getAccounts_call(accountCodes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAccounts_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TAccountObject>> {
      private java.util.List<java.lang.String> accountCodes;
      public getAccounts_call(java.util.List<java.lang.String> accountCodes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountObject>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountCodes = accountCodes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccounts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccounts_args args = new getAccounts_args();
        args.setAccountCodes(accountCodes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TAccountObject> getResult() throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccounts();
      }
    }

    public void searchAccounts(TSearchAccountRequest searchAccountRequest, org.apache.thrift.async.AsyncMethodCallback<TAccountSearchResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchAccounts_call method_call = new searchAccounts_call(searchAccountRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchAccounts_call extends org.apache.thrift.async.TAsyncMethodCall<TAccountSearchResponse> {
      private TSearchAccountRequest searchAccountRequest;
      public searchAccounts_call(TSearchAccountRequest searchAccountRequest, org.apache.thrift.async.AsyncMethodCallback<TAccountSearchResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchAccountRequest = searchAccountRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAccounts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchAccounts_args args = new searchAccounts_args();
        args.setSearchAccountRequest(searchAccountRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAccountSearchResponse getResult() throws TAccountSearchException, TSizeExceededException, Error, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchAccounts();
      }
    }

    public void AutoCompleteName(TAutoCompleteRequest autoCompleteRequest, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAutoCompleteResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AutoCompleteName_call method_call = new AutoCompleteName_call(autoCompleteRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AutoCompleteName_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TAutoCompleteResponse>> {
      private TAutoCompleteRequest autoCompleteRequest;
      public AutoCompleteName_call(TAutoCompleteRequest autoCompleteRequest, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAutoCompleteResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.autoCompleteRequest = autoCompleteRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AutoCompleteName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AutoCompleteName_args args = new AutoCompleteName_args();
        args.setAutoCompleteRequest(autoCompleteRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TAutoCompleteResponse> getResult() throws TAccountSearchException, TSizeExceededException, Error, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AutoCompleteName();
      }
    }

    public void getAccountHistory(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountVersionResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAccountHistory_call method_call = new getAccountHistory_call(accountCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAccountHistory_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TAccountVersionResponse>> {
      private java.lang.String accountCode;
      public getAccountHistory_call(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountVersionResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountCode = accountCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccountHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAccountHistory_args args = new getAccountHistory_args();
        args.setAccountCode(accountCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TAccountVersionResponse> getResult() throws TAccountHistoryException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAccountHistory();
      }
    }

    public void checkIsD2t(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkIsD2t_call method_call = new checkIsD2t_call(accountCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkIsD2t_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String accountCode;
      public checkIsD2t_call(java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountCode = accountCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkIsD2t", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkIsD2t_args args = new checkIsD2t_args();
        args.setAccountCode(accountCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws TNoAccountException, TAccountSearchException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkIsD2t();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createAccount", new createAccount());
      processMap.put("deleteAccount", new deleteAccount());
      processMap.put("financeApprovalGranted", new financeApprovalGranted());
      processMap.put("financeApprovalRejected", new financeApprovalRejected());
      processMap.put("updateAccount", new updateAccount());
      processMap.put("getAccount", new getAccount());
      processMap.put("getAccountFromCrsId", new getAccountFromCrsId());
      processMap.put("getAccountFromCrsCode", new getAccountFromCrsCode());
      processMap.put("getAccounts", new getAccounts());
      processMap.put("searchAccounts", new searchAccounts());
      processMap.put("AutoCompleteName", new AutoCompleteName());
      processMap.put("getAccountHistory", new getAccountHistory());
      processMap.put("checkIsD2t", new checkIsD2t());
      return processMap;
    }

    public static class createAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAccount_args> {
      public createAccount() {
        super("createAccount");
      }

      public createAccount_args getEmptyArgsInstance() {
        return new createAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createAccount_result getResult(I iface, createAccount_args args) throws org.apache.thrift.TException {
        createAccount_result result = new createAccount_result();
        try {
          result.success = iface.createAccount(args.createAccountRequest);
        } catch (TAccountCreationException e1) {
          result.e1 = e1;
        } catch (TAccountDataValidationException e2) {
          result.e2 = e2;
        } catch (TOnboardingDataException e3) {
          result.e3 = e3;
        }
        return result;
      }
    }

    public static class deleteAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAccount_args> {
      public deleteAccount() {
        super("deleteAccount");
      }

      public deleteAccount_args getEmptyArgsInstance() {
        return new deleteAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteAccount_result getResult(I iface, deleteAccount_args args) throws org.apache.thrift.TException {
        deleteAccount_result result = new deleteAccount_result();
        try {
          result.success = iface.deleteAccount(args.accountCode);
        } catch (TAccountDeleteException e1) {
          result.e1 = e1;
        } catch (TNoAccountException e2) {
          result.e2 = e2;
        } catch (TAlreadyDeletedException e3) {
          result.e3 = e3;
        }
        return result;
      }
    }

    public static class financeApprovalGranted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, financeApprovalGranted_args> {
      public financeApprovalGranted() {
        super("financeApprovalGranted");
      }

      public financeApprovalGranted_args getEmptyArgsInstance() {
        return new financeApprovalGranted_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public financeApprovalGranted_result getResult(I iface, financeApprovalGranted_args args) throws org.apache.thrift.TException {
        financeApprovalGranted_result result = new financeApprovalGranted_result();
        try {
          result.success = iface.financeApprovalGranted(args.accountCode, args.approver, args.countryCode);
        } catch (TNoAccountException e1) {
          result.e1 = e1;
        } catch (TAccountAcceptedException e2) {
          result.e2 = e2;
        }
        return result;
      }
    }

    public static class financeApprovalRejected<I extends Iface> extends org.apache.thrift.ProcessFunction<I, financeApprovalRejected_args> {
      public financeApprovalRejected() {
        super("financeApprovalRejected");
      }

      public financeApprovalRejected_args getEmptyArgsInstance() {
        return new financeApprovalRejected_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public financeApprovalRejected_result getResult(I iface, financeApprovalRejected_args args) throws org.apache.thrift.TException {
        financeApprovalRejected_result result = new financeApprovalRejected_result();
        try {
          result.success = iface.financeApprovalRejected(args.accountCode, args.reason, args.approver, args.countryCode);
        } catch (TNoAccountException e1) {
          result.e1 = e1;
        } catch (TAccountRejectedException e2) {
          result.e2 = e2;
        }
        return result;
      }
    }

    public static class updateAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAccount_args> {
      public updateAccount() {
        super("updateAccount");
      }

      public updateAccount_args getEmptyArgsInstance() {
        return new updateAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAccount_result getResult(I iface, updateAccount_args args) throws org.apache.thrift.TException {
        updateAccount_result result = new updateAccount_result();
        try {
          result.success = iface.updateAccount(args.updateAccountRequest);
        } catch (TAccountUpdateException e1) {
          result.e1 = e1;
        } catch (TAlreadyDeletedException e2) {
          result.e2 = e2;
        } catch (TNoAccountException e3) {
          result.e3 = e3;
        } catch (TAccountDataValidationException e4) {
          result.e4 = e4;
        }
        return result;
      }
    }

    public static class getAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccount_args> {
      public getAccount() {
        super("getAccount");
      }

      public getAccount_args getEmptyArgsInstance() {
        return new getAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAccount_result getResult(I iface, getAccount_args args) throws org.apache.thrift.TException {
        getAccount_result result = new getAccount_result();
        try {
          result.success = iface.getAccount(args.accountCode);
        } catch (TNoAccountException e1) {
          result.e1 = e1;
        } catch (TAccountSearchException e2) {
          result.e2 = e2;
        }
        return result;
      }
    }

    public static class getAccountFromCrsId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccountFromCrsId_args> {
      public getAccountFromCrsId() {
        super("getAccountFromCrsId");
      }

      public getAccountFromCrsId_args getEmptyArgsInstance() {
        return new getAccountFromCrsId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAccountFromCrsId_result getResult(I iface, getAccountFromCrsId_args args) throws org.apache.thrift.TException {
        getAccountFromCrsId_result result = new getAccountFromCrsId_result();
        try {
          result.success = iface.getAccountFromCrsId(args.crsId, args.entityType);
        } catch (TNoAccountException e1) {
          result.e1 = e1;
        }
        return result;
      }
    }

    public static class getAccountFromCrsCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccountFromCrsCode_args> {
      public getAccountFromCrsCode() {
        super("getAccountFromCrsCode");
      }

      public getAccountFromCrsCode_args getEmptyArgsInstance() {
        return new getAccountFromCrsCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAccountFromCrsCode_result getResult(I iface, getAccountFromCrsCode_args args) throws org.apache.thrift.TException {
        getAccountFromCrsCode_result result = new getAccountFromCrsCode_result();
        try {
          result.success = iface.getAccountFromCrsCode(args.crsCode, args.entityType);
        } catch (TNoAccountException e1) {
          result.e1 = e1;
        }
        return result;
      }
    }

    public static class getAccounts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccounts_args> {
      public getAccounts() {
        super("getAccounts");
      }

      public getAccounts_args getEmptyArgsInstance() {
        return new getAccounts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAccounts_result getResult(I iface, getAccounts_args args) throws org.apache.thrift.TException {
        getAccounts_result result = new getAccounts_result();
        try {
          result.success = iface.getAccounts(args.accountCodes);
        } catch (TNoAccountException e1) {
          result.e1 = e1;
        } catch (TAccountSearchException e2) {
          result.e2 = e2;
        }
        return result;
      }
    }

    public static class searchAccounts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchAccounts_args> {
      public searchAccounts() {
        super("searchAccounts");
      }

      public searchAccounts_args getEmptyArgsInstance() {
        return new searchAccounts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchAccounts_result getResult(I iface, searchAccounts_args args) throws org.apache.thrift.TException {
        searchAccounts_result result = new searchAccounts_result();
        try {
          result.success = iface.searchAccounts(args.searchAccountRequest);
        } catch (TAccountSearchException e1) {
          result.e1 = e1;
        } catch (TSizeExceededException e2) {
          result.e2 = e2;
        } catch (Error e3) {
          result.e3 = e3;
        }
        return result;
      }
    }

    public static class AutoCompleteName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AutoCompleteName_args> {
      public AutoCompleteName() {
        super("AutoCompleteName");
      }

      public AutoCompleteName_args getEmptyArgsInstance() {
        return new AutoCompleteName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AutoCompleteName_result getResult(I iface, AutoCompleteName_args args) throws org.apache.thrift.TException {
        AutoCompleteName_result result = new AutoCompleteName_result();
        try {
          result.success = iface.AutoCompleteName(args.autoCompleteRequest);
        } catch (TAccountSearchException e1) {
          result.e1 = e1;
        } catch (TSizeExceededException e2) {
          result.e2 = e2;
        } catch (Error e3) {
          result.e3 = e3;
        }
        return result;
      }
    }

    public static class getAccountHistory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccountHistory_args> {
      public getAccountHistory() {
        super("getAccountHistory");
      }

      public getAccountHistory_args getEmptyArgsInstance() {
        return new getAccountHistory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAccountHistory_result getResult(I iface, getAccountHistory_args args) throws org.apache.thrift.TException {
        getAccountHistory_result result = new getAccountHistory_result();
        try {
          result.success = iface.getAccountHistory(args.accountCode);
        } catch (TAccountHistoryException e1) {
          result.e1 = e1;
        }
        return result;
      }
    }

    public static class checkIsD2t<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkIsD2t_args> {
      public checkIsD2t() {
        super("checkIsD2t");
      }

      public checkIsD2t_args getEmptyArgsInstance() {
        return new checkIsD2t_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkIsD2t_result getResult(I iface, checkIsD2t_args args) throws org.apache.thrift.TException {
        checkIsD2t_result result = new checkIsD2t_result();
        try {
          result.success = iface.checkIsD2t(args.accountCode);
          result.setSuccessIsSet(true);
        } catch (TNoAccountException e1) {
          result.e1 = e1;
        } catch (TAccountSearchException e2) {
          result.e2 = e2;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createAccount", new createAccount());
      processMap.put("deleteAccount", new deleteAccount());
      processMap.put("financeApprovalGranted", new financeApprovalGranted());
      processMap.put("financeApprovalRejected", new financeApprovalRejected());
      processMap.put("updateAccount", new updateAccount());
      processMap.put("getAccount", new getAccount());
      processMap.put("getAccountFromCrsId", new getAccountFromCrsId());
      processMap.put("getAccountFromCrsCode", new getAccountFromCrsCode());
      processMap.put("getAccounts", new getAccounts());
      processMap.put("searchAccounts", new searchAccounts());
      processMap.put("AutoCompleteName", new AutoCompleteName());
      processMap.put("getAccountHistory", new getAccountHistory());
      processMap.put("checkIsD2t", new checkIsD2t());
      return processMap;
    }

    public static class createAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createAccount_args, TAccountResponse> {
      public createAccount() {
        super("createAccount");
      }

      public createAccount_args getEmptyArgsInstance() {
        return new createAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAccountResponse>() { 
          public void onComplete(TAccountResponse o) {
            createAccount_result result = new createAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createAccount_result result = new createAccount_result();
            if (e instanceof TAccountCreationException) {
              result.e1 = (TAccountCreationException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TAccountDataValidationException) {
              result.e2 = (TAccountDataValidationException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof TOnboardingDataException) {
              result.e3 = (TOnboardingDataException) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createAccount_args args, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
        iface.createAccount(args.createAccountRequest,resultHandler);
      }
    }

    public static class deleteAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAccount_args, TAccountResponse> {
      public deleteAccount() {
        super("deleteAccount");
      }

      public deleteAccount_args getEmptyArgsInstance() {
        return new deleteAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAccountResponse>() { 
          public void onComplete(TAccountResponse o) {
            deleteAccount_result result = new deleteAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteAccount_result result = new deleteAccount_result();
            if (e instanceof TAccountDeleteException) {
              result.e1 = (TAccountDeleteException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TNoAccountException) {
              result.e2 = (TNoAccountException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof TAlreadyDeletedException) {
              result.e3 = (TAlreadyDeletedException) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteAccount_args args, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
        iface.deleteAccount(args.accountCode,resultHandler);
      }
    }

    public static class financeApprovalGranted<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, financeApprovalGranted_args, TAccountResponse> {
      public financeApprovalGranted() {
        super("financeApprovalGranted");
      }

      public financeApprovalGranted_args getEmptyArgsInstance() {
        return new financeApprovalGranted_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAccountResponse>() { 
          public void onComplete(TAccountResponse o) {
            financeApprovalGranted_result result = new financeApprovalGranted_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            financeApprovalGranted_result result = new financeApprovalGranted_result();
            if (e instanceof TNoAccountException) {
              result.e1 = (TNoAccountException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TAccountAcceptedException) {
              result.e2 = (TAccountAcceptedException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, financeApprovalGranted_args args, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
        iface.financeApprovalGranted(args.accountCode, args.approver, args.countryCode,resultHandler);
      }
    }

    public static class financeApprovalRejected<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, financeApprovalRejected_args, TAccountResponse> {
      public financeApprovalRejected() {
        super("financeApprovalRejected");
      }

      public financeApprovalRejected_args getEmptyArgsInstance() {
        return new financeApprovalRejected_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAccountResponse>() { 
          public void onComplete(TAccountResponse o) {
            financeApprovalRejected_result result = new financeApprovalRejected_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            financeApprovalRejected_result result = new financeApprovalRejected_result();
            if (e instanceof TNoAccountException) {
              result.e1 = (TNoAccountException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TAccountRejectedException) {
              result.e2 = (TAccountRejectedException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, financeApprovalRejected_args args, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
        iface.financeApprovalRejected(args.accountCode, args.reason, args.approver, args.countryCode,resultHandler);
      }
    }

    public static class updateAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAccount_args, TAccountResponse> {
      public updateAccount() {
        super("updateAccount");
      }

      public updateAccount_args getEmptyArgsInstance() {
        return new updateAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAccountResponse>() { 
          public void onComplete(TAccountResponse o) {
            updateAccount_result result = new updateAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateAccount_result result = new updateAccount_result();
            if (e instanceof TAccountUpdateException) {
              result.e1 = (TAccountUpdateException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TAlreadyDeletedException) {
              result.e2 = (TAlreadyDeletedException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof TNoAccountException) {
              result.e3 = (TNoAccountException) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof TAccountDataValidationException) {
              result.e4 = (TAccountDataValidationException) e;
              result.setE4IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAccount_args args, org.apache.thrift.async.AsyncMethodCallback<TAccountResponse> resultHandler) throws org.apache.thrift.TException {
        iface.updateAccount(args.updateAccountRequest,resultHandler);
      }
    }

    public static class getAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAccount_args, TAccountObject> {
      public getAccount() {
        super("getAccount");
      }

      public getAccount_args getEmptyArgsInstance() {
        return new getAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAccountObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAccountObject>() { 
          public void onComplete(TAccountObject o) {
            getAccount_result result = new getAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAccount_result result = new getAccount_result();
            if (e instanceof TNoAccountException) {
              result.e1 = (TNoAccountException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TAccountSearchException) {
              result.e2 = (TAccountSearchException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAccount_args args, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler) throws org.apache.thrift.TException {
        iface.getAccount(args.accountCode,resultHandler);
      }
    }

    public static class getAccountFromCrsId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAccountFromCrsId_args, TAccountObject> {
      public getAccountFromCrsId() {
        super("getAccountFromCrsId");
      }

      public getAccountFromCrsId_args getEmptyArgsInstance() {
        return new getAccountFromCrsId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAccountObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAccountObject>() { 
          public void onComplete(TAccountObject o) {
            getAccountFromCrsId_result result = new getAccountFromCrsId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAccountFromCrsId_result result = new getAccountFromCrsId_result();
            if (e instanceof TNoAccountException) {
              result.e1 = (TNoAccountException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAccountFromCrsId_args args, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler) throws org.apache.thrift.TException {
        iface.getAccountFromCrsId(args.crsId, args.entityType,resultHandler);
      }
    }

    public static class getAccountFromCrsCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAccountFromCrsCode_args, TAccountObject> {
      public getAccountFromCrsCode() {
        super("getAccountFromCrsCode");
      }

      public getAccountFromCrsCode_args getEmptyArgsInstance() {
        return new getAccountFromCrsCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAccountObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAccountObject>() { 
          public void onComplete(TAccountObject o) {
            getAccountFromCrsCode_result result = new getAccountFromCrsCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAccountFromCrsCode_result result = new getAccountFromCrsCode_result();
            if (e instanceof TNoAccountException) {
              result.e1 = (TNoAccountException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAccountFromCrsCode_args args, org.apache.thrift.async.AsyncMethodCallback<TAccountObject> resultHandler) throws org.apache.thrift.TException {
        iface.getAccountFromCrsCode(args.crsCode, args.entityType,resultHandler);
      }
    }

    public static class getAccounts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAccounts_args, java.util.List<TAccountObject>> {
      public getAccounts() {
        super("getAccounts");
      }

      public getAccounts_args getEmptyArgsInstance() {
        return new getAccounts_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountObject>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountObject>>() { 
          public void onComplete(java.util.List<TAccountObject> o) {
            getAccounts_result result = new getAccounts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAccounts_result result = new getAccounts_result();
            if (e instanceof TNoAccountException) {
              result.e1 = (TNoAccountException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TAccountSearchException) {
              result.e2 = (TAccountSearchException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAccounts_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountObject>> resultHandler) throws org.apache.thrift.TException {
        iface.getAccounts(args.accountCodes,resultHandler);
      }
    }

    public static class searchAccounts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchAccounts_args, TAccountSearchResponse> {
      public searchAccounts() {
        super("searchAccounts");
      }

      public searchAccounts_args getEmptyArgsInstance() {
        return new searchAccounts_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAccountSearchResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAccountSearchResponse>() { 
          public void onComplete(TAccountSearchResponse o) {
            searchAccounts_result result = new searchAccounts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            searchAccounts_result result = new searchAccounts_result();
            if (e instanceof TAccountSearchException) {
              result.e1 = (TAccountSearchException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TSizeExceededException) {
              result.e2 = (TSizeExceededException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof Error) {
              result.e3 = (Error) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchAccounts_args args, org.apache.thrift.async.AsyncMethodCallback<TAccountSearchResponse> resultHandler) throws org.apache.thrift.TException {
        iface.searchAccounts(args.searchAccountRequest,resultHandler);
      }
    }

    public static class AutoCompleteName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AutoCompleteName_args, java.util.List<TAutoCompleteResponse>> {
      public AutoCompleteName() {
        super("AutoCompleteName");
      }

      public AutoCompleteName_args getEmptyArgsInstance() {
        return new AutoCompleteName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAutoCompleteResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAutoCompleteResponse>>() { 
          public void onComplete(java.util.List<TAutoCompleteResponse> o) {
            AutoCompleteName_result result = new AutoCompleteName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AutoCompleteName_result result = new AutoCompleteName_result();
            if (e instanceof TAccountSearchException) {
              result.e1 = (TAccountSearchException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TSizeExceededException) {
              result.e2 = (TSizeExceededException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof Error) {
              result.e3 = (Error) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AutoCompleteName_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAutoCompleteResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.AutoCompleteName(args.autoCompleteRequest,resultHandler);
      }
    }

    public static class getAccountHistory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAccountHistory_args, java.util.List<TAccountVersionResponse>> {
      public getAccountHistory() {
        super("getAccountHistory");
      }

      public getAccountHistory_args getEmptyArgsInstance() {
        return new getAccountHistory_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountVersionResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountVersionResponse>>() { 
          public void onComplete(java.util.List<TAccountVersionResponse> o) {
            getAccountHistory_result result = new getAccountHistory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAccountHistory_result result = new getAccountHistory_result();
            if (e instanceof TAccountHistoryException) {
              result.e1 = (TAccountHistoryException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAccountHistory_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAccountVersionResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.getAccountHistory(args.accountCode,resultHandler);
      }
    }

    public static class checkIsD2t<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkIsD2t_args, java.lang.Boolean> {
      public checkIsD2t() {
        super("checkIsD2t");
      }

      public checkIsD2t_args getEmptyArgsInstance() {
        return new checkIsD2t_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            checkIsD2t_result result = new checkIsD2t_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkIsD2t_result result = new checkIsD2t_result();
            if (e instanceof TNoAccountException) {
              result.e1 = (TNoAccountException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TAccountSearchException) {
              result.e2 = (TAccountSearchException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkIsD2t_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.checkIsD2t(args.accountCode,resultHandler);
      }
    }

  }

  public static class createAccount_args implements org.apache.thrift.TBase<createAccount_args, createAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<createAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAccount_args");

    private static final org.apache.thrift.protocol.TField CREATE_ACCOUNT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("createAccountRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAccount_argsTupleSchemeFactory();

    private TCreateAccountRequest createAccountRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREATE_ACCOUNT_REQUEST((short)1, "createAccountRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREATE_ACCOUNT_REQUEST
            return CREATE_ACCOUNT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREATE_ACCOUNT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("createAccountRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateAccountRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAccount_args.class, metaDataMap);
    }

    public createAccount_args() {
    }

    public createAccount_args(
      TCreateAccountRequest createAccountRequest)
    {
      this();
      this.createAccountRequest = createAccountRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAccount_args(createAccount_args other) {
      if (other.isSetCreateAccountRequest()) {
        this.createAccountRequest = new TCreateAccountRequest(other.createAccountRequest);
      }
    }

    public createAccount_args deepCopy() {
      return new createAccount_args(this);
    }

    @Override
    public void clear() {
      this.createAccountRequest = null;
    }

    public TCreateAccountRequest getCreateAccountRequest() {
      return this.createAccountRequest;
    }

    public void setCreateAccountRequest(TCreateAccountRequest createAccountRequest) {
      this.createAccountRequest = createAccountRequest;
    }

    public void unsetCreateAccountRequest() {
      this.createAccountRequest = null;
    }

    /** Returns true if field createAccountRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateAccountRequest() {
      return this.createAccountRequest != null;
    }

    public void setCreateAccountRequestIsSet(boolean value) {
      if (!value) {
        this.createAccountRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CREATE_ACCOUNT_REQUEST:
        if (value == null) {
          unsetCreateAccountRequest();
        } else {
          setCreateAccountRequest((TCreateAccountRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CREATE_ACCOUNT_REQUEST:
        return getCreateAccountRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CREATE_ACCOUNT_REQUEST:
        return isSetCreateAccountRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAccount_args)
        return this.equals((createAccount_args)that);
      return false;
    }

    public boolean equals(createAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_createAccountRequest = true && this.isSetCreateAccountRequest();
      boolean that_present_createAccountRequest = true && that.isSetCreateAccountRequest();
      if (this_present_createAccountRequest || that_present_createAccountRequest) {
        if (!(this_present_createAccountRequest && that_present_createAccountRequest))
          return false;
        if (!this.createAccountRequest.equals(that.createAccountRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCreateAccountRequest()) ? 131071 : 524287);
      if (isSetCreateAccountRequest())
        hashCode = hashCode * 8191 + createAccountRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCreateAccountRequest()).compareTo(other.isSetCreateAccountRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateAccountRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAccountRequest, other.createAccountRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAccount_args(");
      boolean first = true;

      sb.append("createAccountRequest:");
      if (this.createAccountRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.createAccountRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (createAccountRequest != null) {
        createAccountRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAccount_argsStandardScheme getScheme() {
        return new createAccount_argsStandardScheme();
      }
    }

    private static class createAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREATE_ACCOUNT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.createAccountRequest = new TCreateAccountRequest();
                struct.createAccountRequest.read(iprot);
                struct.setCreateAccountRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.createAccountRequest != null) {
          oprot.writeFieldBegin(CREATE_ACCOUNT_REQUEST_FIELD_DESC);
          struct.createAccountRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAccount_argsTupleScheme getScheme() {
        return new createAccount_argsTupleScheme();
      }
    }

    private static class createAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCreateAccountRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCreateAccountRequest()) {
          struct.createAccountRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.createAccountRequest = new TCreateAccountRequest();
          struct.createAccountRequest.read(iprot);
          struct.setCreateAccountRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAccount_result implements org.apache.thrift.TBase<createAccount_result, createAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<createAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAccount_resultTupleSchemeFactory();

    private TAccountResponse success; // required
    private TAccountCreationException e1; // required
    private TAccountDataValidationException e2; // required
    private TOnboardingDataException e3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountCreationException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountDataValidationException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOnboardingDataException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAccount_result.class, metaDataMap);
    }

    public createAccount_result() {
    }

    public createAccount_result(
      TAccountResponse success,
      TAccountCreationException e1,
      TAccountDataValidationException e2,
      TOnboardingDataException e3)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAccount_result(createAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAccountResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TAccountCreationException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TAccountDataValidationException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new TOnboardingDataException(other.e3);
      }
    }

    public createAccount_result deepCopy() {
      return new createAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
    }

    public TAccountResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TAccountResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TAccountCreationException getE1() {
      return this.e1;
    }

    public void setE1(TAccountCreationException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TAccountDataValidationException getE2() {
      return this.e2;
    }

    public void setE2(TAccountDataValidationException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public TOnboardingDataException getE3() {
      return this.e3;
    }

    public void setE3(TOnboardingDataException e3) {
      this.e3 = e3;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAccountResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TAccountCreationException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TAccountDataValidationException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((TOnboardingDataException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAccount_result)
        return this.equals((createAccount_result)that);
      return false;
    }

    public boolean equals(createAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE3()).compareTo(other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAccount_resultStandardScheme getScheme() {
        return new createAccount_resultStandardScheme();
      }
    }

    private static class createAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAccountResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TAccountCreationException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TAccountDataValidationException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new TOnboardingDataException();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAccount_resultTupleScheme getScheme() {
        return new createAccount_resultTupleScheme();
      }
    }

    private static class createAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TAccountResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TAccountCreationException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TAccountDataValidationException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new TOnboardingDataException();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAccount_args implements org.apache.thrift.TBase<deleteAccount_args, deleteAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAccount_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAccount_argsTupleSchemeFactory();

    private java.lang.String accountCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_CODE((short)1, "accountCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_CODE
            return ACCOUNT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAccount_args.class, metaDataMap);
    }

    public deleteAccount_args() {
    }

    public deleteAccount_args(
      java.lang.String accountCode)
    {
      this();
      this.accountCode = accountCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAccount_args(deleteAccount_args other) {
      if (other.isSetAccountCode()) {
        this.accountCode = other.accountCode;
      }
    }

    public deleteAccount_args deepCopy() {
      return new deleteAccount_args(this);
    }

    @Override
    public void clear() {
      this.accountCode = null;
    }

    public java.lang.String getAccountCode() {
      return this.accountCode;
    }

    public void setAccountCode(java.lang.String accountCode) {
      this.accountCode = accountCode;
    }

    public void unsetAccountCode() {
      this.accountCode = null;
    }

    /** Returns true if field accountCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCode() {
      return this.accountCode != null;
    }

    public void setAccountCodeIsSet(boolean value) {
      if (!value) {
        this.accountCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ACCOUNT_CODE:
        if (value == null) {
          unsetAccountCode();
        } else {
          setAccountCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_CODE:
        return getAccountCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_CODE:
        return isSetAccountCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAccount_args)
        return this.equals((deleteAccount_args)that);
      return false;
    }

    public boolean equals(deleteAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountCode = true && this.isSetAccountCode();
      boolean that_present_accountCode = true && that.isSetAccountCode();
      if (this_present_accountCode || that_present_accountCode) {
        if (!(this_present_accountCode && that_present_accountCode))
          return false;
        if (!this.accountCode.equals(that.accountCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountCode()) ? 131071 : 524287);
      if (isSetAccountCode())
        hashCode = hashCode * 8191 + accountCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAccountCode()).compareTo(other.isSetAccountCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCode, other.accountCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAccount_args(");
      boolean first = true;

      sb.append("accountCode:");
      if (this.accountCode == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAccount_argsStandardScheme getScheme() {
        return new deleteAccount_argsStandardScheme();
      }
    }

    private static class deleteAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountCode = iprot.readString();
                struct.setAccountCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountCode != null) {
          oprot.writeFieldBegin(ACCOUNT_CODE_FIELD_DESC);
          oprot.writeString(struct.accountCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAccount_argsTupleScheme getScheme() {
        return new deleteAccount_argsTupleScheme();
      }
    }

    private static class deleteAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAccountCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccountCode()) {
          oprot.writeString(struct.accountCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.accountCode = iprot.readString();
          struct.setAccountCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAccount_result implements org.apache.thrift.TBase<deleteAccount_result, deleteAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAccount_resultTupleSchemeFactory();

    private TAccountResponse success; // required
    private TAccountDeleteException e1; // required
    private TNoAccountException e2; // required
    private TAlreadyDeletedException e3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountDeleteException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlreadyDeletedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAccount_result.class, metaDataMap);
    }

    public deleteAccount_result() {
    }

    public deleteAccount_result(
      TAccountResponse success,
      TAccountDeleteException e1,
      TNoAccountException e2,
      TAlreadyDeletedException e3)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAccount_result(deleteAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAccountResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TAccountDeleteException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TNoAccountException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new TAlreadyDeletedException(other.e3);
      }
    }

    public deleteAccount_result deepCopy() {
      return new deleteAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
    }

    public TAccountResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TAccountResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TAccountDeleteException getE1() {
      return this.e1;
    }

    public void setE1(TAccountDeleteException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TNoAccountException getE2() {
      return this.e2;
    }

    public void setE2(TNoAccountException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public TAlreadyDeletedException getE3() {
      return this.e3;
    }

    public void setE3(TAlreadyDeletedException e3) {
      this.e3 = e3;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAccountResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TAccountDeleteException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TNoAccountException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((TAlreadyDeletedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAccount_result)
        return this.equals((deleteAccount_result)that);
      return false;
    }

    public boolean equals(deleteAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE3()).compareTo(other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAccount_resultStandardScheme getScheme() {
        return new deleteAccount_resultStandardScheme();
      }
    }

    private static class deleteAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAccountResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TAccountDeleteException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TNoAccountException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new TAlreadyDeletedException();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAccount_resultTupleScheme getScheme() {
        return new deleteAccount_resultTupleScheme();
      }
    }

    private static class deleteAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TAccountResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TAccountDeleteException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TNoAccountException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new TAlreadyDeletedException();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class financeApprovalGranted_args implements org.apache.thrift.TBase<financeApprovalGranted_args, financeApprovalGranted_args._Fields>, java.io.Serializable, Cloneable, Comparable<financeApprovalGranted_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("financeApprovalGranted_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPROVER_FIELD_DESC = new org.apache.thrift.protocol.TField("approver", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new financeApprovalGranted_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new financeApprovalGranted_argsTupleSchemeFactory();

    private java.lang.String accountCode; // required
    private java.lang.String approver; // required
    private java.lang.String countryCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_CODE((short)1, "accountCode"),
      APPROVER((short)2, "approver"),
      COUNTRY_CODE((short)3, "countryCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_CODE
            return ACCOUNT_CODE;
          case 2: // APPROVER
            return APPROVER;
          case 3: // COUNTRY_CODE
            return COUNTRY_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPROVER, new org.apache.thrift.meta_data.FieldMetaData("approver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(financeApprovalGranted_args.class, metaDataMap);
    }

    public financeApprovalGranted_args() {
    }

    public financeApprovalGranted_args(
      java.lang.String accountCode,
      java.lang.String approver,
      java.lang.String countryCode)
    {
      this();
      this.accountCode = accountCode;
      this.approver = approver;
      this.countryCode = countryCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public financeApprovalGranted_args(financeApprovalGranted_args other) {
      if (other.isSetAccountCode()) {
        this.accountCode = other.accountCode;
      }
      if (other.isSetApprover()) {
        this.approver = other.approver;
      }
      if (other.isSetCountryCode()) {
        this.countryCode = other.countryCode;
      }
    }

    public financeApprovalGranted_args deepCopy() {
      return new financeApprovalGranted_args(this);
    }

    @Override
    public void clear() {
      this.accountCode = null;
      this.approver = null;
      this.countryCode = null;
    }

    public java.lang.String getAccountCode() {
      return this.accountCode;
    }

    public void setAccountCode(java.lang.String accountCode) {
      this.accountCode = accountCode;
    }

    public void unsetAccountCode() {
      this.accountCode = null;
    }

    /** Returns true if field accountCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCode() {
      return this.accountCode != null;
    }

    public void setAccountCodeIsSet(boolean value) {
      if (!value) {
        this.accountCode = null;
      }
    }

    public java.lang.String getApprover() {
      return this.approver;
    }

    public void setApprover(java.lang.String approver) {
      this.approver = approver;
    }

    public void unsetApprover() {
      this.approver = null;
    }

    /** Returns true if field approver is set (has been assigned a value) and false otherwise */
    public boolean isSetApprover() {
      return this.approver != null;
    }

    public void setApproverIsSet(boolean value) {
      if (!value) {
        this.approver = null;
      }
    }

    public java.lang.String getCountryCode() {
      return this.countryCode;
    }

    public void setCountryCode(java.lang.String countryCode) {
      this.countryCode = countryCode;
    }

    public void unsetCountryCode() {
      this.countryCode = null;
    }

    /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryCode() {
      return this.countryCode != null;
    }

    public void setCountryCodeIsSet(boolean value) {
      if (!value) {
        this.countryCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ACCOUNT_CODE:
        if (value == null) {
          unsetAccountCode();
        } else {
          setAccountCode((java.lang.String)value);
        }
        break;

      case APPROVER:
        if (value == null) {
          unsetApprover();
        } else {
          setApprover((java.lang.String)value);
        }
        break;

      case COUNTRY_CODE:
        if (value == null) {
          unsetCountryCode();
        } else {
          setCountryCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_CODE:
        return getAccountCode();

      case APPROVER:
        return getApprover();

      case COUNTRY_CODE:
        return getCountryCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_CODE:
        return isSetAccountCode();
      case APPROVER:
        return isSetApprover();
      case COUNTRY_CODE:
        return isSetCountryCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof financeApprovalGranted_args)
        return this.equals((financeApprovalGranted_args)that);
      return false;
    }

    public boolean equals(financeApprovalGranted_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountCode = true && this.isSetAccountCode();
      boolean that_present_accountCode = true && that.isSetAccountCode();
      if (this_present_accountCode || that_present_accountCode) {
        if (!(this_present_accountCode && that_present_accountCode))
          return false;
        if (!this.accountCode.equals(that.accountCode))
          return false;
      }

      boolean this_present_approver = true && this.isSetApprover();
      boolean that_present_approver = true && that.isSetApprover();
      if (this_present_approver || that_present_approver) {
        if (!(this_present_approver && that_present_approver))
          return false;
        if (!this.approver.equals(that.approver))
          return false;
      }

      boolean this_present_countryCode = true && this.isSetCountryCode();
      boolean that_present_countryCode = true && that.isSetCountryCode();
      if (this_present_countryCode || that_present_countryCode) {
        if (!(this_present_countryCode && that_present_countryCode))
          return false;
        if (!this.countryCode.equals(that.countryCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountCode()) ? 131071 : 524287);
      if (isSetAccountCode())
        hashCode = hashCode * 8191 + accountCode.hashCode();

      hashCode = hashCode * 8191 + ((isSetApprover()) ? 131071 : 524287);
      if (isSetApprover())
        hashCode = hashCode * 8191 + approver.hashCode();

      hashCode = hashCode * 8191 + ((isSetCountryCode()) ? 131071 : 524287);
      if (isSetCountryCode())
        hashCode = hashCode * 8191 + countryCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(financeApprovalGranted_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAccountCode()).compareTo(other.isSetAccountCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCode, other.accountCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApprover()).compareTo(other.isSetApprover());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApprover()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approver, other.approver);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("financeApprovalGranted_args(");
      boolean first = true;

      sb.append("accountCode:");
      if (this.accountCode == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("approver:");
      if (this.approver == null) {
        sb.append("null");
      } else {
        sb.append(this.approver);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("countryCode:");
      if (this.countryCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class financeApprovalGranted_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public financeApprovalGranted_argsStandardScheme getScheme() {
        return new financeApprovalGranted_argsStandardScheme();
      }
    }

    private static class financeApprovalGranted_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<financeApprovalGranted_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, financeApprovalGranted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountCode = iprot.readString();
                struct.setAccountCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPROVER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.approver = iprot.readString();
                struct.setApproverIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNTRY_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countryCode = iprot.readString();
                struct.setCountryCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, financeApprovalGranted_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountCode != null) {
          oprot.writeFieldBegin(ACCOUNT_CODE_FIELD_DESC);
          oprot.writeString(struct.accountCode);
          oprot.writeFieldEnd();
        }
        if (struct.approver != null) {
          oprot.writeFieldBegin(APPROVER_FIELD_DESC);
          oprot.writeString(struct.approver);
          oprot.writeFieldEnd();
        }
        if (struct.countryCode != null) {
          oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
          oprot.writeString(struct.countryCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class financeApprovalGranted_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public financeApprovalGranted_argsTupleScheme getScheme() {
        return new financeApprovalGranted_argsTupleScheme();
      }
    }

    private static class financeApprovalGranted_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<financeApprovalGranted_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, financeApprovalGranted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAccountCode()) {
          optionals.set(0);
        }
        if (struct.isSetApprover()) {
          optionals.set(1);
        }
        if (struct.isSetCountryCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccountCode()) {
          oprot.writeString(struct.accountCode);
        }
        if (struct.isSetApprover()) {
          oprot.writeString(struct.approver);
        }
        if (struct.isSetCountryCode()) {
          oprot.writeString(struct.countryCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, financeApprovalGranted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accountCode = iprot.readString();
          struct.setAccountCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.approver = iprot.readString();
          struct.setApproverIsSet(true);
        }
        if (incoming.get(2)) {
          struct.countryCode = iprot.readString();
          struct.setCountryCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class financeApprovalGranted_result implements org.apache.thrift.TBase<financeApprovalGranted_result, financeApprovalGranted_result._Fields>, java.io.Serializable, Cloneable, Comparable<financeApprovalGranted_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("financeApprovalGranted_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new financeApprovalGranted_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new financeApprovalGranted_resultTupleSchemeFactory();

    private TAccountResponse success; // required
    private TNoAccountException e1; // required
    private TAccountAcceptedException e2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountAcceptedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(financeApprovalGranted_result.class, metaDataMap);
    }

    public financeApprovalGranted_result() {
    }

    public financeApprovalGranted_result(
      TAccountResponse success,
      TNoAccountException e1,
      TAccountAcceptedException e2)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public financeApprovalGranted_result(financeApprovalGranted_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAccountResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TNoAccountException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TAccountAcceptedException(other.e2);
      }
    }

    public financeApprovalGranted_result deepCopy() {
      return new financeApprovalGranted_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
    }

    public TAccountResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TAccountResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNoAccountException getE1() {
      return this.e1;
    }

    public void setE1(TNoAccountException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TAccountAcceptedException getE2() {
      return this.e2;
    }

    public void setE2(TAccountAcceptedException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAccountResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TNoAccountException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TAccountAcceptedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof financeApprovalGranted_result)
        return this.equals((financeApprovalGranted_result)that);
      return false;
    }

    public boolean equals(financeApprovalGranted_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(financeApprovalGranted_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("financeApprovalGranted_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class financeApprovalGranted_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public financeApprovalGranted_resultStandardScheme getScheme() {
        return new financeApprovalGranted_resultStandardScheme();
      }
    }

    private static class financeApprovalGranted_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<financeApprovalGranted_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, financeApprovalGranted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAccountResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TNoAccountException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TAccountAcceptedException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, financeApprovalGranted_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class financeApprovalGranted_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public financeApprovalGranted_resultTupleScheme getScheme() {
        return new financeApprovalGranted_resultTupleScheme();
      }
    }

    private static class financeApprovalGranted_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<financeApprovalGranted_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, financeApprovalGranted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, financeApprovalGranted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TAccountResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TNoAccountException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TAccountAcceptedException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class financeApprovalRejected_args implements org.apache.thrift.TBase<financeApprovalRejected_args, financeApprovalRejected_args._Fields>, java.io.Serializable, Cloneable, Comparable<financeApprovalRejected_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("financeApprovalRejected_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APPROVER_FIELD_DESC = new org.apache.thrift.protocol.TField("approver", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new financeApprovalRejected_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new financeApprovalRejected_argsTupleSchemeFactory();

    private java.lang.String accountCode; // required
    private java.lang.String reason; // required
    private java.lang.String approver; // required
    private java.lang.String countryCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_CODE((short)1, "accountCode"),
      REASON((short)2, "reason"),
      APPROVER((short)3, "approver"),
      COUNTRY_CODE((short)4, "countryCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_CODE
            return ACCOUNT_CODE;
          case 2: // REASON
            return REASON;
          case 3: // APPROVER
            return APPROVER;
          case 4: // COUNTRY_CODE
            return COUNTRY_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPROVER, new org.apache.thrift.meta_data.FieldMetaData("approver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(financeApprovalRejected_args.class, metaDataMap);
    }

    public financeApprovalRejected_args() {
    }

    public financeApprovalRejected_args(
      java.lang.String accountCode,
      java.lang.String reason,
      java.lang.String approver,
      java.lang.String countryCode)
    {
      this();
      this.accountCode = accountCode;
      this.reason = reason;
      this.approver = approver;
      this.countryCode = countryCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public financeApprovalRejected_args(financeApprovalRejected_args other) {
      if (other.isSetAccountCode()) {
        this.accountCode = other.accountCode;
      }
      if (other.isSetReason()) {
        this.reason = other.reason;
      }
      if (other.isSetApprover()) {
        this.approver = other.approver;
      }
      if (other.isSetCountryCode()) {
        this.countryCode = other.countryCode;
      }
    }

    public financeApprovalRejected_args deepCopy() {
      return new financeApprovalRejected_args(this);
    }

    @Override
    public void clear() {
      this.accountCode = null;
      this.reason = null;
      this.approver = null;
      this.countryCode = null;
    }

    public java.lang.String getAccountCode() {
      return this.accountCode;
    }

    public void setAccountCode(java.lang.String accountCode) {
      this.accountCode = accountCode;
    }

    public void unsetAccountCode() {
      this.accountCode = null;
    }

    /** Returns true if field accountCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCode() {
      return this.accountCode != null;
    }

    public void setAccountCodeIsSet(boolean value) {
      if (!value) {
        this.accountCode = null;
      }
    }

    public java.lang.String getReason() {
      return this.reason;
    }

    public void setReason(java.lang.String reason) {
      this.reason = reason;
    }

    public void unsetReason() {
      this.reason = null;
    }

    /** Returns true if field reason is set (has been assigned a value) and false otherwise */
    public boolean isSetReason() {
      return this.reason != null;
    }

    public void setReasonIsSet(boolean value) {
      if (!value) {
        this.reason = null;
      }
    }

    public java.lang.String getApprover() {
      return this.approver;
    }

    public void setApprover(java.lang.String approver) {
      this.approver = approver;
    }

    public void unsetApprover() {
      this.approver = null;
    }

    /** Returns true if field approver is set (has been assigned a value) and false otherwise */
    public boolean isSetApprover() {
      return this.approver != null;
    }

    public void setApproverIsSet(boolean value) {
      if (!value) {
        this.approver = null;
      }
    }

    public java.lang.String getCountryCode() {
      return this.countryCode;
    }

    public void setCountryCode(java.lang.String countryCode) {
      this.countryCode = countryCode;
    }

    public void unsetCountryCode() {
      this.countryCode = null;
    }

    /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryCode() {
      return this.countryCode != null;
    }

    public void setCountryCodeIsSet(boolean value) {
      if (!value) {
        this.countryCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ACCOUNT_CODE:
        if (value == null) {
          unsetAccountCode();
        } else {
          setAccountCode((java.lang.String)value);
        }
        break;

      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          setReason((java.lang.String)value);
        }
        break;

      case APPROVER:
        if (value == null) {
          unsetApprover();
        } else {
          setApprover((java.lang.String)value);
        }
        break;

      case COUNTRY_CODE:
        if (value == null) {
          unsetCountryCode();
        } else {
          setCountryCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_CODE:
        return getAccountCode();

      case REASON:
        return getReason();

      case APPROVER:
        return getApprover();

      case COUNTRY_CODE:
        return getCountryCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_CODE:
        return isSetAccountCode();
      case REASON:
        return isSetReason();
      case APPROVER:
        return isSetApprover();
      case COUNTRY_CODE:
        return isSetCountryCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof financeApprovalRejected_args)
        return this.equals((financeApprovalRejected_args)that);
      return false;
    }

    public boolean equals(financeApprovalRejected_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountCode = true && this.isSetAccountCode();
      boolean that_present_accountCode = true && that.isSetAccountCode();
      if (this_present_accountCode || that_present_accountCode) {
        if (!(this_present_accountCode && that_present_accountCode))
          return false;
        if (!this.accountCode.equals(that.accountCode))
          return false;
      }

      boolean this_present_reason = true && this.isSetReason();
      boolean that_present_reason = true && that.isSetReason();
      if (this_present_reason || that_present_reason) {
        if (!(this_present_reason && that_present_reason))
          return false;
        if (!this.reason.equals(that.reason))
          return false;
      }

      boolean this_present_approver = true && this.isSetApprover();
      boolean that_present_approver = true && that.isSetApprover();
      if (this_present_approver || that_present_approver) {
        if (!(this_present_approver && that_present_approver))
          return false;
        if (!this.approver.equals(that.approver))
          return false;
      }

      boolean this_present_countryCode = true && this.isSetCountryCode();
      boolean that_present_countryCode = true && that.isSetCountryCode();
      if (this_present_countryCode || that_present_countryCode) {
        if (!(this_present_countryCode && that_present_countryCode))
          return false;
        if (!this.countryCode.equals(that.countryCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountCode()) ? 131071 : 524287);
      if (isSetAccountCode())
        hashCode = hashCode * 8191 + accountCode.hashCode();

      hashCode = hashCode * 8191 + ((isSetReason()) ? 131071 : 524287);
      if (isSetReason())
        hashCode = hashCode * 8191 + reason.hashCode();

      hashCode = hashCode * 8191 + ((isSetApprover()) ? 131071 : 524287);
      if (isSetApprover())
        hashCode = hashCode * 8191 + approver.hashCode();

      hashCode = hashCode * 8191 + ((isSetCountryCode()) ? 131071 : 524287);
      if (isSetCountryCode())
        hashCode = hashCode * 8191 + countryCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(financeApprovalRejected_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAccountCode()).compareTo(other.isSetAccountCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCode, other.accountCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApprover()).compareTo(other.isSetApprover());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApprover()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approver, other.approver);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("financeApprovalRejected_args(");
      boolean first = true;

      sb.append("accountCode:");
      if (this.accountCode == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("approver:");
      if (this.approver == null) {
        sb.append("null");
      } else {
        sb.append(this.approver);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("countryCode:");
      if (this.countryCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class financeApprovalRejected_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public financeApprovalRejected_argsStandardScheme getScheme() {
        return new financeApprovalRejected_argsStandardScheme();
      }
    }

    private static class financeApprovalRejected_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<financeApprovalRejected_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, financeApprovalRejected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountCode = iprot.readString();
                struct.setAccountCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reason = iprot.readString();
                struct.setReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APPROVER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.approver = iprot.readString();
                struct.setApproverIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNTRY_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countryCode = iprot.readString();
                struct.setCountryCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, financeApprovalRejected_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountCode != null) {
          oprot.writeFieldBegin(ACCOUNT_CODE_FIELD_DESC);
          oprot.writeString(struct.accountCode);
          oprot.writeFieldEnd();
        }
        if (struct.reason != null) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeString(struct.reason);
          oprot.writeFieldEnd();
        }
        if (struct.approver != null) {
          oprot.writeFieldBegin(APPROVER_FIELD_DESC);
          oprot.writeString(struct.approver);
          oprot.writeFieldEnd();
        }
        if (struct.countryCode != null) {
          oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
          oprot.writeString(struct.countryCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class financeApprovalRejected_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public financeApprovalRejected_argsTupleScheme getScheme() {
        return new financeApprovalRejected_argsTupleScheme();
      }
    }

    private static class financeApprovalRejected_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<financeApprovalRejected_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, financeApprovalRejected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAccountCode()) {
          optionals.set(0);
        }
        if (struct.isSetReason()) {
          optionals.set(1);
        }
        if (struct.isSetApprover()) {
          optionals.set(2);
        }
        if (struct.isSetCountryCode()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAccountCode()) {
          oprot.writeString(struct.accountCode);
        }
        if (struct.isSetReason()) {
          oprot.writeString(struct.reason);
        }
        if (struct.isSetApprover()) {
          oprot.writeString(struct.approver);
        }
        if (struct.isSetCountryCode()) {
          oprot.writeString(struct.countryCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, financeApprovalRejected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.accountCode = iprot.readString();
          struct.setAccountCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.reason = iprot.readString();
          struct.setReasonIsSet(true);
        }
        if (incoming.get(2)) {
          struct.approver = iprot.readString();
          struct.setApproverIsSet(true);
        }
        if (incoming.get(3)) {
          struct.countryCode = iprot.readString();
          struct.setCountryCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class financeApprovalRejected_result implements org.apache.thrift.TBase<financeApprovalRejected_result, financeApprovalRejected_result._Fields>, java.io.Serializable, Cloneable, Comparable<financeApprovalRejected_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("financeApprovalRejected_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new financeApprovalRejected_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new financeApprovalRejected_resultTupleSchemeFactory();

    private TAccountResponse success; // required
    private TNoAccountException e1; // required
    private TAccountRejectedException e2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountRejectedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(financeApprovalRejected_result.class, metaDataMap);
    }

    public financeApprovalRejected_result() {
    }

    public financeApprovalRejected_result(
      TAccountResponse success,
      TNoAccountException e1,
      TAccountRejectedException e2)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public financeApprovalRejected_result(financeApprovalRejected_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAccountResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TNoAccountException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TAccountRejectedException(other.e2);
      }
    }

    public financeApprovalRejected_result deepCopy() {
      return new financeApprovalRejected_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
    }

    public TAccountResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TAccountResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNoAccountException getE1() {
      return this.e1;
    }

    public void setE1(TNoAccountException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TAccountRejectedException getE2() {
      return this.e2;
    }

    public void setE2(TAccountRejectedException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAccountResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TNoAccountException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TAccountRejectedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof financeApprovalRejected_result)
        return this.equals((financeApprovalRejected_result)that);
      return false;
    }

    public boolean equals(financeApprovalRejected_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(financeApprovalRejected_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("financeApprovalRejected_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class financeApprovalRejected_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public financeApprovalRejected_resultStandardScheme getScheme() {
        return new financeApprovalRejected_resultStandardScheme();
      }
    }

    private static class financeApprovalRejected_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<financeApprovalRejected_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, financeApprovalRejected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAccountResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TNoAccountException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TAccountRejectedException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, financeApprovalRejected_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class financeApprovalRejected_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public financeApprovalRejected_resultTupleScheme getScheme() {
        return new financeApprovalRejected_resultTupleScheme();
      }
    }

    private static class financeApprovalRejected_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<financeApprovalRejected_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, financeApprovalRejected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, financeApprovalRejected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TAccountResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TNoAccountException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TAccountRejectedException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAccount_args implements org.apache.thrift.TBase<updateAccount_args, updateAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAccount_args");

    private static final org.apache.thrift.protocol.TField UPDATE_ACCOUNT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAccountRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAccount_argsTupleSchemeFactory();

    private TUpdateAccountRequest updateAccountRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATE_ACCOUNT_REQUEST((short)1, "updateAccountRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPDATE_ACCOUNT_REQUEST
            return UPDATE_ACCOUNT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATE_ACCOUNT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("updateAccountRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUpdateAccountRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAccount_args.class, metaDataMap);
    }

    public updateAccount_args() {
    }

    public updateAccount_args(
      TUpdateAccountRequest updateAccountRequest)
    {
      this();
      this.updateAccountRequest = updateAccountRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAccount_args(updateAccount_args other) {
      if (other.isSetUpdateAccountRequest()) {
        this.updateAccountRequest = new TUpdateAccountRequest(other.updateAccountRequest);
      }
    }

    public updateAccount_args deepCopy() {
      return new updateAccount_args(this);
    }

    @Override
    public void clear() {
      this.updateAccountRequest = null;
    }

    public TUpdateAccountRequest getUpdateAccountRequest() {
      return this.updateAccountRequest;
    }

    public void setUpdateAccountRequest(TUpdateAccountRequest updateAccountRequest) {
      this.updateAccountRequest = updateAccountRequest;
    }

    public void unsetUpdateAccountRequest() {
      this.updateAccountRequest = null;
    }

    /** Returns true if field updateAccountRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateAccountRequest() {
      return this.updateAccountRequest != null;
    }

    public void setUpdateAccountRequestIsSet(boolean value) {
      if (!value) {
        this.updateAccountRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UPDATE_ACCOUNT_REQUEST:
        if (value == null) {
          unsetUpdateAccountRequest();
        } else {
          setUpdateAccountRequest((TUpdateAccountRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UPDATE_ACCOUNT_REQUEST:
        return getUpdateAccountRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UPDATE_ACCOUNT_REQUEST:
        return isSetUpdateAccountRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAccount_args)
        return this.equals((updateAccount_args)that);
      return false;
    }

    public boolean equals(updateAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_updateAccountRequest = true && this.isSetUpdateAccountRequest();
      boolean that_present_updateAccountRequest = true && that.isSetUpdateAccountRequest();
      if (this_present_updateAccountRequest || that_present_updateAccountRequest) {
        if (!(this_present_updateAccountRequest && that_present_updateAccountRequest))
          return false;
        if (!this.updateAccountRequest.equals(that.updateAccountRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUpdateAccountRequest()) ? 131071 : 524287);
      if (isSetUpdateAccountRequest())
        hashCode = hashCode * 8191 + updateAccountRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUpdateAccountRequest()).compareTo(other.isSetUpdateAccountRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateAccountRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAccountRequest, other.updateAccountRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAccount_args(");
      boolean first = true;

      sb.append("updateAccountRequest:");
      if (this.updateAccountRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.updateAccountRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (updateAccountRequest != null) {
        updateAccountRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAccount_argsStandardScheme getScheme() {
        return new updateAccount_argsStandardScheme();
      }
    }

    private static class updateAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATE_ACCOUNT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.updateAccountRequest = new TUpdateAccountRequest();
                struct.updateAccountRequest.read(iprot);
                struct.setUpdateAccountRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.updateAccountRequest != null) {
          oprot.writeFieldBegin(UPDATE_ACCOUNT_REQUEST_FIELD_DESC);
          struct.updateAccountRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAccount_argsTupleScheme getScheme() {
        return new updateAccount_argsTupleScheme();
      }
    }

    private static class updateAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUpdateAccountRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUpdateAccountRequest()) {
          struct.updateAccountRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.updateAccountRequest = new TUpdateAccountRequest();
          struct.updateAccountRequest.read(iprot);
          struct.setUpdateAccountRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAccount_result implements org.apache.thrift.TBase<updateAccount_result, updateAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E4_FIELD_DESC = new org.apache.thrift.protocol.TField("e4", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAccount_resultTupleSchemeFactory();

    private TAccountResponse success; // required
    private TAccountUpdateException e1; // required
    private TAlreadyDeletedException e2; // required
    private TNoAccountException e3; // required
    private TAccountDataValidationException e4; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3"),
      E4((short)4, "e4");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          case 4: // E4
            return E4;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountUpdateException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlreadyDeletedException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      tmpMap.put(_Fields.E4, new org.apache.thrift.meta_data.FieldMetaData("e4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountDataValidationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAccount_result.class, metaDataMap);
    }

    public updateAccount_result() {
    }

    public updateAccount_result(
      TAccountResponse success,
      TAccountUpdateException e1,
      TAlreadyDeletedException e2,
      TNoAccountException e3,
      TAccountDataValidationException e4)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
      this.e4 = e4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAccount_result(updateAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAccountResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TAccountUpdateException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TAlreadyDeletedException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new TNoAccountException(other.e3);
      }
      if (other.isSetE4()) {
        this.e4 = new TAccountDataValidationException(other.e4);
      }
    }

    public updateAccount_result deepCopy() {
      return new updateAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
      this.e4 = null;
    }

    public TAccountResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TAccountResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TAccountUpdateException getE1() {
      return this.e1;
    }

    public void setE1(TAccountUpdateException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TAlreadyDeletedException getE2() {
      return this.e2;
    }

    public void setE2(TAlreadyDeletedException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public TNoAccountException getE3() {
      return this.e3;
    }

    public void setE3(TNoAccountException e3) {
      this.e3 = e3;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    public TAccountDataValidationException getE4() {
      return this.e4;
    }

    public void setE4(TAccountDataValidationException e4) {
      this.e4 = e4;
    }

    public void unsetE4() {
      this.e4 = null;
    }

    /** Returns true if field e4 is set (has been assigned a value) and false otherwise */
    public boolean isSetE4() {
      return this.e4 != null;
    }

    public void setE4IsSet(boolean value) {
      if (!value) {
        this.e4 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAccountResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TAccountUpdateException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TAlreadyDeletedException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((TNoAccountException)value);
        }
        break;

      case E4:
        if (value == null) {
          unsetE4();
        } else {
          setE4((TAccountDataValidationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      case E4:
        return getE4();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      case E4:
        return isSetE4();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAccount_result)
        return this.equals((updateAccount_result)that);
      return false;
    }

    public boolean equals(updateAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      boolean this_present_e4 = true && this.isSetE4();
      boolean that_present_e4 = true && that.isSetE4();
      if (this_present_e4 || that_present_e4) {
        if (!(this_present_e4 && that_present_e4))
          return false;
        if (!this.e4.equals(that.e4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      hashCode = hashCode * 8191 + ((isSetE4()) ? 131071 : 524287);
      if (isSetE4())
        hashCode = hashCode * 8191 + e4.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE3()).compareTo(other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE4()).compareTo(other.isSetE4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e4, other.e4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e4:");
      if (this.e4 == null) {
        sb.append("null");
      } else {
        sb.append(this.e4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAccount_resultStandardScheme getScheme() {
        return new updateAccount_resultStandardScheme();
      }
    }

    private static class updateAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAccountResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TAccountUpdateException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TAlreadyDeletedException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new TNoAccountException();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // E4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e4 = new TAccountDataValidationException();
                struct.e4.read(iprot);
                struct.setE4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e4 != null) {
          oprot.writeFieldBegin(E4_FIELD_DESC);
          struct.e4.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAccount_resultTupleScheme getScheme() {
        return new updateAccount_resultTupleScheme();
      }
    }

    private static class updateAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        if (struct.isSetE4()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
        if (struct.isSetE4()) {
          struct.e4.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new TAccountResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TAccountUpdateException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TAlreadyDeletedException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new TNoAccountException();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
        if (incoming.get(4)) {
          struct.e4 = new TAccountDataValidationException();
          struct.e4.read(iprot);
          struct.setE4IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccount_args implements org.apache.thrift.TBase<getAccount_args, getAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccount_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccount_argsTupleSchemeFactory();

    private java.lang.String accountCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_CODE((short)1, "accountCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_CODE
            return ACCOUNT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccount_args.class, metaDataMap);
    }

    public getAccount_args() {
    }

    public getAccount_args(
      java.lang.String accountCode)
    {
      this();
      this.accountCode = accountCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccount_args(getAccount_args other) {
      if (other.isSetAccountCode()) {
        this.accountCode = other.accountCode;
      }
    }

    public getAccount_args deepCopy() {
      return new getAccount_args(this);
    }

    @Override
    public void clear() {
      this.accountCode = null;
    }

    public java.lang.String getAccountCode() {
      return this.accountCode;
    }

    public void setAccountCode(java.lang.String accountCode) {
      this.accountCode = accountCode;
    }

    public void unsetAccountCode() {
      this.accountCode = null;
    }

    /** Returns true if field accountCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCode() {
      return this.accountCode != null;
    }

    public void setAccountCodeIsSet(boolean value) {
      if (!value) {
        this.accountCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ACCOUNT_CODE:
        if (value == null) {
          unsetAccountCode();
        } else {
          setAccountCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_CODE:
        return getAccountCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_CODE:
        return isSetAccountCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccount_args)
        return this.equals((getAccount_args)that);
      return false;
    }

    public boolean equals(getAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountCode = true && this.isSetAccountCode();
      boolean that_present_accountCode = true && that.isSetAccountCode();
      if (this_present_accountCode || that_present_accountCode) {
        if (!(this_present_accountCode && that_present_accountCode))
          return false;
        if (!this.accountCode.equals(that.accountCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountCode()) ? 131071 : 524287);
      if (isSetAccountCode())
        hashCode = hashCode * 8191 + accountCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAccountCode()).compareTo(other.isSetAccountCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCode, other.accountCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccount_args(");
      boolean first = true;

      sb.append("accountCode:");
      if (this.accountCode == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccount_argsStandardScheme getScheme() {
        return new getAccount_argsStandardScheme();
      }
    }

    private static class getAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountCode = iprot.readString();
                struct.setAccountCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountCode != null) {
          oprot.writeFieldBegin(ACCOUNT_CODE_FIELD_DESC);
          oprot.writeString(struct.accountCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccount_argsTupleScheme getScheme() {
        return new getAccount_argsTupleScheme();
      }
    }

    private static class getAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAccountCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccountCode()) {
          oprot.writeString(struct.accountCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.accountCode = iprot.readString();
          struct.setAccountCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccount_result implements org.apache.thrift.TBase<getAccount_result, getAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccount_resultTupleSchemeFactory();

    private TAccountObject success; // required
    private TNoAccountException e1; // required
    private TAccountSearchException e2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountObject.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountSearchException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccount_result.class, metaDataMap);
    }

    public getAccount_result() {
    }

    public getAccount_result(
      TAccountObject success,
      TNoAccountException e1,
      TAccountSearchException e2)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccount_result(getAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAccountObject(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TNoAccountException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TAccountSearchException(other.e2);
      }
    }

    public getAccount_result deepCopy() {
      return new getAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
    }

    public TAccountObject getSuccess() {
      return this.success;
    }

    public void setSuccess(TAccountObject success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNoAccountException getE1() {
      return this.e1;
    }

    public void setE1(TNoAccountException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TAccountSearchException getE2() {
      return this.e2;
    }

    public void setE2(TAccountSearchException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAccountObject)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TNoAccountException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TAccountSearchException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccount_result)
        return this.equals((getAccount_result)that);
      return false;
    }

    public boolean equals(getAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccount_resultStandardScheme getScheme() {
        return new getAccount_resultStandardScheme();
      }
    }

    private static class getAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAccountObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TNoAccountException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TAccountSearchException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccount_resultTupleScheme getScheme() {
        return new getAccount_resultTupleScheme();
      }
    }

    private static class getAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TAccountObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TNoAccountException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TAccountSearchException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccountFromCrsId_args implements org.apache.thrift.TBase<getAccountFromCrsId_args, getAccountFromCrsId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountFromCrsId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountFromCrsId_args");

    private static final org.apache.thrift.protocol.TField CRS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("crsId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("entityType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccountFromCrsId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccountFromCrsId_argsTupleSchemeFactory();

    private java.lang.String crsId; // required
    private TEntityType entityType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRS_ID((short)1, "crsId"),
      /**
       * 
       * @see TEntityType
       */
      ENTITY_TYPE((short)2, "entityType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRS_ID
            return CRS_ID;
          case 2: // ENTITY_TYPE
            return ENTITY_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRS_ID, new org.apache.thrift.meta_data.FieldMetaData("crsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("entityType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEntityType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountFromCrsId_args.class, metaDataMap);
    }

    public getAccountFromCrsId_args() {
    }

    public getAccountFromCrsId_args(
      java.lang.String crsId,
      TEntityType entityType)
    {
      this();
      this.crsId = crsId;
      this.entityType = entityType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountFromCrsId_args(getAccountFromCrsId_args other) {
      if (other.isSetCrsId()) {
        this.crsId = other.crsId;
      }
      if (other.isSetEntityType()) {
        this.entityType = other.entityType;
      }
    }

    public getAccountFromCrsId_args deepCopy() {
      return new getAccountFromCrsId_args(this);
    }

    @Override
    public void clear() {
      this.crsId = null;
      this.entityType = null;
    }

    public java.lang.String getCrsId() {
      return this.crsId;
    }

    public void setCrsId(java.lang.String crsId) {
      this.crsId = crsId;
    }

    public void unsetCrsId() {
      this.crsId = null;
    }

    /** Returns true if field crsId is set (has been assigned a value) and false otherwise */
    public boolean isSetCrsId() {
      return this.crsId != null;
    }

    public void setCrsIdIsSet(boolean value) {
      if (!value) {
        this.crsId = null;
      }
    }

    /**
     * 
     * @see TEntityType
     */
    public TEntityType getEntityType() {
      return this.entityType;
    }

    /**
     * 
     * @see TEntityType
     */
    public void setEntityType(TEntityType entityType) {
      this.entityType = entityType;
    }

    public void unsetEntityType() {
      this.entityType = null;
    }

    /** Returns true if field entityType is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityType() {
      return this.entityType != null;
    }

    public void setEntityTypeIsSet(boolean value) {
      if (!value) {
        this.entityType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CRS_ID:
        if (value == null) {
          unsetCrsId();
        } else {
          setCrsId((java.lang.String)value);
        }
        break;

      case ENTITY_TYPE:
        if (value == null) {
          unsetEntityType();
        } else {
          setEntityType((TEntityType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CRS_ID:
        return getCrsId();

      case ENTITY_TYPE:
        return getEntityType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CRS_ID:
        return isSetCrsId();
      case ENTITY_TYPE:
        return isSetEntityType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountFromCrsId_args)
        return this.equals((getAccountFromCrsId_args)that);
      return false;
    }

    public boolean equals(getAccountFromCrsId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_crsId = true && this.isSetCrsId();
      boolean that_present_crsId = true && that.isSetCrsId();
      if (this_present_crsId || that_present_crsId) {
        if (!(this_present_crsId && that_present_crsId))
          return false;
        if (!this.crsId.equals(that.crsId))
          return false;
      }

      boolean this_present_entityType = true && this.isSetEntityType();
      boolean that_present_entityType = true && that.isSetEntityType();
      if (this_present_entityType || that_present_entityType) {
        if (!(this_present_entityType && that_present_entityType))
          return false;
        if (!this.entityType.equals(that.entityType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCrsId()) ? 131071 : 524287);
      if (isSetCrsId())
        hashCode = hashCode * 8191 + crsId.hashCode();

      hashCode = hashCode * 8191 + ((isSetEntityType()) ? 131071 : 524287);
      if (isSetEntityType())
        hashCode = hashCode * 8191 + entityType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(getAccountFromCrsId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCrsId()).compareTo(other.isSetCrsId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCrsId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crsId, other.crsId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEntityType()).compareTo(other.isSetEntityType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityType, other.entityType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccountFromCrsId_args(");
      boolean first = true;

      sb.append("crsId:");
      if (this.crsId == null) {
        sb.append("null");
      } else {
        sb.append(this.crsId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityType:");
      if (this.entityType == null) {
        sb.append("null");
      } else {
        sb.append(this.entityType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountFromCrsId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountFromCrsId_argsStandardScheme getScheme() {
        return new getAccountFromCrsId_argsStandardScheme();
      }
    }

    private static class getAccountFromCrsId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccountFromCrsId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountFromCrsId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.crsId = iprot.readString();
                struct.setCrsIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entityType = com.oyo.mm.channel.accountmanagement.TEntityType.findByValue(iprot.readI32());
                struct.setEntityTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountFromCrsId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.crsId != null) {
          oprot.writeFieldBegin(CRS_ID_FIELD_DESC);
          oprot.writeString(struct.crsId);
          oprot.writeFieldEnd();
        }
        if (struct.entityType != null) {
          oprot.writeFieldBegin(ENTITY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.entityType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountFromCrsId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountFromCrsId_argsTupleScheme getScheme() {
        return new getAccountFromCrsId_argsTupleScheme();
      }
    }

    private static class getAccountFromCrsId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccountFromCrsId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountFromCrsId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCrsId()) {
          optionals.set(0);
        }
        if (struct.isSetEntityType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCrsId()) {
          oprot.writeString(struct.crsId);
        }
        if (struct.isSetEntityType()) {
          oprot.writeI32(struct.entityType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountFromCrsId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.crsId = iprot.readString();
          struct.setCrsIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.entityType = com.oyo.mm.channel.accountmanagement.TEntityType.findByValue(iprot.readI32());
          struct.setEntityTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccountFromCrsId_result implements org.apache.thrift.TBase<getAccountFromCrsId_result, getAccountFromCrsId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountFromCrsId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountFromCrsId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccountFromCrsId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccountFromCrsId_resultTupleSchemeFactory();

    private TAccountObject success; // required
    private TNoAccountException e1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountObject.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountFromCrsId_result.class, metaDataMap);
    }

    public getAccountFromCrsId_result() {
    }

    public getAccountFromCrsId_result(
      TAccountObject success,
      TNoAccountException e1)
    {
      this();
      this.success = success;
      this.e1 = e1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountFromCrsId_result(getAccountFromCrsId_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAccountObject(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TNoAccountException(other.e1);
      }
    }

    public getAccountFromCrsId_result deepCopy() {
      return new getAccountFromCrsId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
    }

    public TAccountObject getSuccess() {
      return this.success;
    }

    public void setSuccess(TAccountObject success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNoAccountException getE1() {
      return this.e1;
    }

    public void setE1(TNoAccountException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAccountObject)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TNoAccountException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountFromCrsId_result)
        return this.equals((getAccountFromCrsId_result)that);
      return false;
    }

    public boolean equals(getAccountFromCrsId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAccountFromCrsId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccountFromCrsId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountFromCrsId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountFromCrsId_resultStandardScheme getScheme() {
        return new getAccountFromCrsId_resultStandardScheme();
      }
    }

    private static class getAccountFromCrsId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccountFromCrsId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountFromCrsId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAccountObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TNoAccountException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountFromCrsId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountFromCrsId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountFromCrsId_resultTupleScheme getScheme() {
        return new getAccountFromCrsId_resultTupleScheme();
      }
    }

    private static class getAccountFromCrsId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccountFromCrsId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountFromCrsId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountFromCrsId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TAccountObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TNoAccountException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccountFromCrsCode_args implements org.apache.thrift.TBase<getAccountFromCrsCode_args, getAccountFromCrsCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountFromCrsCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountFromCrsCode_args");

    private static final org.apache.thrift.protocol.TField CRS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("crsCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("entityType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccountFromCrsCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccountFromCrsCode_argsTupleSchemeFactory();

    private java.lang.String crsCode; // required
    private TEntityType entityType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRS_CODE((short)1, "crsCode"),
      /**
       * 
       * @see TEntityType
       */
      ENTITY_TYPE((short)2, "entityType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRS_CODE
            return CRS_CODE;
          case 2: // ENTITY_TYPE
            return ENTITY_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRS_CODE, new org.apache.thrift.meta_data.FieldMetaData("crsCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("entityType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEntityType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountFromCrsCode_args.class, metaDataMap);
    }

    public getAccountFromCrsCode_args() {
    }

    public getAccountFromCrsCode_args(
      java.lang.String crsCode,
      TEntityType entityType)
    {
      this();
      this.crsCode = crsCode;
      this.entityType = entityType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountFromCrsCode_args(getAccountFromCrsCode_args other) {
      if (other.isSetCrsCode()) {
        this.crsCode = other.crsCode;
      }
      if (other.isSetEntityType()) {
        this.entityType = other.entityType;
      }
    }

    public getAccountFromCrsCode_args deepCopy() {
      return new getAccountFromCrsCode_args(this);
    }

    @Override
    public void clear() {
      this.crsCode = null;
      this.entityType = null;
    }

    public java.lang.String getCrsCode() {
      return this.crsCode;
    }

    public void setCrsCode(java.lang.String crsCode) {
      this.crsCode = crsCode;
    }

    public void unsetCrsCode() {
      this.crsCode = null;
    }

    /** Returns true if field crsCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCrsCode() {
      return this.crsCode != null;
    }

    public void setCrsCodeIsSet(boolean value) {
      if (!value) {
        this.crsCode = null;
      }
    }

    /**
     * 
     * @see TEntityType
     */
    public TEntityType getEntityType() {
      return this.entityType;
    }

    /**
     * 
     * @see TEntityType
     */
    public void setEntityType(TEntityType entityType) {
      this.entityType = entityType;
    }

    public void unsetEntityType() {
      this.entityType = null;
    }

    /** Returns true if field entityType is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityType() {
      return this.entityType != null;
    }

    public void setEntityTypeIsSet(boolean value) {
      if (!value) {
        this.entityType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CRS_CODE:
        if (value == null) {
          unsetCrsCode();
        } else {
          setCrsCode((java.lang.String)value);
        }
        break;

      case ENTITY_TYPE:
        if (value == null) {
          unsetEntityType();
        } else {
          setEntityType((TEntityType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CRS_CODE:
        return getCrsCode();

      case ENTITY_TYPE:
        return getEntityType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CRS_CODE:
        return isSetCrsCode();
      case ENTITY_TYPE:
        return isSetEntityType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountFromCrsCode_args)
        return this.equals((getAccountFromCrsCode_args)that);
      return false;
    }

    public boolean equals(getAccountFromCrsCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_crsCode = true && this.isSetCrsCode();
      boolean that_present_crsCode = true && that.isSetCrsCode();
      if (this_present_crsCode || that_present_crsCode) {
        if (!(this_present_crsCode && that_present_crsCode))
          return false;
        if (!this.crsCode.equals(that.crsCode))
          return false;
      }

      boolean this_present_entityType = true && this.isSetEntityType();
      boolean that_present_entityType = true && that.isSetEntityType();
      if (this_present_entityType || that_present_entityType) {
        if (!(this_present_entityType && that_present_entityType))
          return false;
        if (!this.entityType.equals(that.entityType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCrsCode()) ? 131071 : 524287);
      if (isSetCrsCode())
        hashCode = hashCode * 8191 + crsCode.hashCode();

      hashCode = hashCode * 8191 + ((isSetEntityType()) ? 131071 : 524287);
      if (isSetEntityType())
        hashCode = hashCode * 8191 + entityType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(getAccountFromCrsCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCrsCode()).compareTo(other.isSetCrsCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCrsCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crsCode, other.crsCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEntityType()).compareTo(other.isSetEntityType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityType, other.entityType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccountFromCrsCode_args(");
      boolean first = true;

      sb.append("crsCode:");
      if (this.crsCode == null) {
        sb.append("null");
      } else {
        sb.append(this.crsCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityType:");
      if (this.entityType == null) {
        sb.append("null");
      } else {
        sb.append(this.entityType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountFromCrsCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountFromCrsCode_argsStandardScheme getScheme() {
        return new getAccountFromCrsCode_argsStandardScheme();
      }
    }

    private static class getAccountFromCrsCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccountFromCrsCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountFromCrsCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.crsCode = iprot.readString();
                struct.setCrsCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entityType = com.oyo.mm.channel.accountmanagement.TEntityType.findByValue(iprot.readI32());
                struct.setEntityTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountFromCrsCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.crsCode != null) {
          oprot.writeFieldBegin(CRS_CODE_FIELD_DESC);
          oprot.writeString(struct.crsCode);
          oprot.writeFieldEnd();
        }
        if (struct.entityType != null) {
          oprot.writeFieldBegin(ENTITY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.entityType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountFromCrsCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountFromCrsCode_argsTupleScheme getScheme() {
        return new getAccountFromCrsCode_argsTupleScheme();
      }
    }

    private static class getAccountFromCrsCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccountFromCrsCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountFromCrsCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCrsCode()) {
          optionals.set(0);
        }
        if (struct.isSetEntityType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCrsCode()) {
          oprot.writeString(struct.crsCode);
        }
        if (struct.isSetEntityType()) {
          oprot.writeI32(struct.entityType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountFromCrsCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.crsCode = iprot.readString();
          struct.setCrsCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.entityType = com.oyo.mm.channel.accountmanagement.TEntityType.findByValue(iprot.readI32());
          struct.setEntityTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccountFromCrsCode_result implements org.apache.thrift.TBase<getAccountFromCrsCode_result, getAccountFromCrsCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountFromCrsCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountFromCrsCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccountFromCrsCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccountFromCrsCode_resultTupleSchemeFactory();

    private TAccountObject success; // required
    private TNoAccountException e1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountObject.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountFromCrsCode_result.class, metaDataMap);
    }

    public getAccountFromCrsCode_result() {
    }

    public getAccountFromCrsCode_result(
      TAccountObject success,
      TNoAccountException e1)
    {
      this();
      this.success = success;
      this.e1 = e1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountFromCrsCode_result(getAccountFromCrsCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAccountObject(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TNoAccountException(other.e1);
      }
    }

    public getAccountFromCrsCode_result deepCopy() {
      return new getAccountFromCrsCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
    }

    public TAccountObject getSuccess() {
      return this.success;
    }

    public void setSuccess(TAccountObject success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNoAccountException getE1() {
      return this.e1;
    }

    public void setE1(TNoAccountException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAccountObject)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TNoAccountException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountFromCrsCode_result)
        return this.equals((getAccountFromCrsCode_result)that);
      return false;
    }

    public boolean equals(getAccountFromCrsCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAccountFromCrsCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccountFromCrsCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountFromCrsCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountFromCrsCode_resultStandardScheme getScheme() {
        return new getAccountFromCrsCode_resultStandardScheme();
      }
    }

    private static class getAccountFromCrsCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccountFromCrsCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountFromCrsCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAccountObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TNoAccountException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountFromCrsCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountFromCrsCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountFromCrsCode_resultTupleScheme getScheme() {
        return new getAccountFromCrsCode_resultTupleScheme();
      }
    }

    private static class getAccountFromCrsCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccountFromCrsCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountFromCrsCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountFromCrsCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TAccountObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TNoAccountException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccounts_args implements org.apache.thrift.TBase<getAccounts_args, getAccounts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAccounts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccounts_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCodes", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccounts_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccounts_argsTupleSchemeFactory();

    private java.util.List<java.lang.String> accountCodes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_CODES((short)1, "accountCodes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_CODES
            return ACCOUNT_CODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_CODES, new org.apache.thrift.meta_data.FieldMetaData("accountCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccounts_args.class, metaDataMap);
    }

    public getAccounts_args() {
    }

    public getAccounts_args(
      java.util.List<java.lang.String> accountCodes)
    {
      this();
      this.accountCodes = accountCodes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccounts_args(getAccounts_args other) {
      if (other.isSetAccountCodes()) {
        java.util.List<java.lang.String> __this__accountCodes = new java.util.ArrayList<java.lang.String>(other.accountCodes);
        this.accountCodes = __this__accountCodes;
      }
    }

    public getAccounts_args deepCopy() {
      return new getAccounts_args(this);
    }

    @Override
    public void clear() {
      this.accountCodes = null;
    }

    public int getAccountCodesSize() {
      return (this.accountCodes == null) ? 0 : this.accountCodes.size();
    }

    public java.util.Iterator<java.lang.String> getAccountCodesIterator() {
      return (this.accountCodes == null) ? null : this.accountCodes.iterator();
    }

    public void addToAccountCodes(java.lang.String elem) {
      if (this.accountCodes == null) {
        this.accountCodes = new java.util.ArrayList<java.lang.String>();
      }
      this.accountCodes.add(elem);
    }

    public java.util.List<java.lang.String> getAccountCodes() {
      return this.accountCodes;
    }

    public void setAccountCodes(java.util.List<java.lang.String> accountCodes) {
      this.accountCodes = accountCodes;
    }

    public void unsetAccountCodes() {
      this.accountCodes = null;
    }

    /** Returns true if field accountCodes is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCodes() {
      return this.accountCodes != null;
    }

    public void setAccountCodesIsSet(boolean value) {
      if (!value) {
        this.accountCodes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ACCOUNT_CODES:
        if (value == null) {
          unsetAccountCodes();
        } else {
          setAccountCodes((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_CODES:
        return getAccountCodes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_CODES:
        return isSetAccountCodes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccounts_args)
        return this.equals((getAccounts_args)that);
      return false;
    }

    public boolean equals(getAccounts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountCodes = true && this.isSetAccountCodes();
      boolean that_present_accountCodes = true && that.isSetAccountCodes();
      if (this_present_accountCodes || that_present_accountCodes) {
        if (!(this_present_accountCodes && that_present_accountCodes))
          return false;
        if (!this.accountCodes.equals(that.accountCodes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountCodes()) ? 131071 : 524287);
      if (isSetAccountCodes())
        hashCode = hashCode * 8191 + accountCodes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAccounts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAccountCodes()).compareTo(other.isSetAccountCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCodes, other.accountCodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccounts_args(");
      boolean first = true;

      sb.append("accountCodes:");
      if (this.accountCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCodes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccounts_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccounts_argsStandardScheme getScheme() {
        return new getAccounts_argsStandardScheme();
      }
    }

    private static class getAccounts_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccounts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.accountCodes = new java.util.ArrayList<java.lang.String>(_list144.size);
                  java.lang.String _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = iprot.readString();
                    struct.accountCodes.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setAccountCodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccounts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountCodes != null) {
          oprot.writeFieldBegin(ACCOUNT_CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.accountCodes.size()));
            for (java.lang.String _iter147 : struct.accountCodes)
            {
              oprot.writeString(_iter147);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccounts_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccounts_argsTupleScheme getScheme() {
        return new getAccounts_argsTupleScheme();
      }
    }

    private static class getAccounts_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccounts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAccountCodes()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccountCodes()) {
          {
            oprot.writeI32(struct.accountCodes.size());
            for (java.lang.String _iter148 : struct.accountCodes)
            {
              oprot.writeString(_iter148);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.accountCodes = new java.util.ArrayList<java.lang.String>(_list149.size);
            java.lang.String _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = iprot.readString();
              struct.accountCodes.add(_elem150);
            }
          }
          struct.setAccountCodesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccounts_result implements org.apache.thrift.TBase<getAccounts_result, getAccounts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAccounts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccounts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccounts_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccounts_resultTupleSchemeFactory();

    private java.util.List<TAccountObject> success; // required
    private TNoAccountException e1; // required
    private TAccountSearchException e2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountObject.class))));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountSearchException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccounts_result.class, metaDataMap);
    }

    public getAccounts_result() {
    }

    public getAccounts_result(
      java.util.List<TAccountObject> success,
      TNoAccountException e1,
      TAccountSearchException e2)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccounts_result(getAccounts_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TAccountObject> __this__success = new java.util.ArrayList<TAccountObject>(other.success.size());
        for (TAccountObject other_element : other.success) {
          __this__success.add(new TAccountObject(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE1()) {
        this.e1 = new TNoAccountException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TAccountSearchException(other.e2);
      }
    }

    public getAccounts_result deepCopy() {
      return new getAccounts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TAccountObject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TAccountObject elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TAccountObject>();
      }
      this.success.add(elem);
    }

    public java.util.List<TAccountObject> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TAccountObject> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNoAccountException getE1() {
      return this.e1;
    }

    public void setE1(TNoAccountException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TAccountSearchException getE2() {
      return this.e2;
    }

    public void setE2(TAccountSearchException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TAccountObject>)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TNoAccountException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TAccountSearchException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccounts_result)
        return this.equals((getAccounts_result)that);
      return false;
    }

    public boolean equals(getAccounts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAccounts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccounts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccounts_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccounts_resultStandardScheme getScheme() {
        return new getAccounts_resultStandardScheme();
      }
    }

    private static class getAccounts_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccounts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TAccountObject>(_list152.size);
                  TAccountObject _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new TAccountObject();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TNoAccountException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TAccountSearchException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccounts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TAccountObject _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccounts_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccounts_resultTupleScheme getScheme() {
        return new getAccounts_resultTupleScheme();
      }
    }

    private static class getAccounts_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccounts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TAccountObject _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TAccountObject>(_list157.size);
            TAccountObject _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new TAccountObject();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TNoAccountException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TAccountSearchException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchAccounts_args implements org.apache.thrift.TBase<searchAccounts_args, searchAccounts_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchAccounts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAccounts_args");

    private static final org.apache.thrift.protocol.TField SEARCH_ACCOUNT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("searchAccountRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchAccounts_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchAccounts_argsTupleSchemeFactory();

    private TSearchAccountRequest searchAccountRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_ACCOUNT_REQUEST((short)1, "searchAccountRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_ACCOUNT_REQUEST
            return SEARCH_ACCOUNT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_ACCOUNT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("searchAccountRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSearchAccountRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAccounts_args.class, metaDataMap);
    }

    public searchAccounts_args() {
    }

    public searchAccounts_args(
      TSearchAccountRequest searchAccountRequest)
    {
      this();
      this.searchAccountRequest = searchAccountRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAccounts_args(searchAccounts_args other) {
      if (other.isSetSearchAccountRequest()) {
        this.searchAccountRequest = new TSearchAccountRequest(other.searchAccountRequest);
      }
    }

    public searchAccounts_args deepCopy() {
      return new searchAccounts_args(this);
    }

    @Override
    public void clear() {
      this.searchAccountRequest = null;
    }

    public TSearchAccountRequest getSearchAccountRequest() {
      return this.searchAccountRequest;
    }

    public void setSearchAccountRequest(TSearchAccountRequest searchAccountRequest) {
      this.searchAccountRequest = searchAccountRequest;
    }

    public void unsetSearchAccountRequest() {
      this.searchAccountRequest = null;
    }

    /** Returns true if field searchAccountRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchAccountRequest() {
      return this.searchAccountRequest != null;
    }

    public void setSearchAccountRequestIsSet(boolean value) {
      if (!value) {
        this.searchAccountRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SEARCH_ACCOUNT_REQUEST:
        if (value == null) {
          unsetSearchAccountRequest();
        } else {
          setSearchAccountRequest((TSearchAccountRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_ACCOUNT_REQUEST:
        return getSearchAccountRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_ACCOUNT_REQUEST:
        return isSetSearchAccountRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAccounts_args)
        return this.equals((searchAccounts_args)that);
      return false;
    }

    public boolean equals(searchAccounts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_searchAccountRequest = true && this.isSetSearchAccountRequest();
      boolean that_present_searchAccountRequest = true && that.isSetSearchAccountRequest();
      if (this_present_searchAccountRequest || that_present_searchAccountRequest) {
        if (!(this_present_searchAccountRequest && that_present_searchAccountRequest))
          return false;
        if (!this.searchAccountRequest.equals(that.searchAccountRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSearchAccountRequest()) ? 131071 : 524287);
      if (isSetSearchAccountRequest())
        hashCode = hashCode * 8191 + searchAccountRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchAccounts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSearchAccountRequest()).compareTo(other.isSetSearchAccountRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchAccountRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchAccountRequest, other.searchAccountRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchAccounts_args(");
      boolean first = true;

      sb.append("searchAccountRequest:");
      if (this.searchAccountRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.searchAccountRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchAccountRequest != null) {
        searchAccountRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchAccounts_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchAccounts_argsStandardScheme getScheme() {
        return new searchAccounts_argsStandardScheme();
      }
    }

    private static class searchAccounts_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchAccounts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchAccounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_ACCOUNT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchAccountRequest = new TSearchAccountRequest();
                struct.searchAccountRequest.read(iprot);
                struct.setSearchAccountRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchAccounts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchAccountRequest != null) {
          oprot.writeFieldBegin(SEARCH_ACCOUNT_REQUEST_FIELD_DESC);
          struct.searchAccountRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchAccounts_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchAccounts_argsTupleScheme getScheme() {
        return new searchAccounts_argsTupleScheme();
      }
    }

    private static class searchAccounts_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchAccounts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchAccounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSearchAccountRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSearchAccountRequest()) {
          struct.searchAccountRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchAccounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.searchAccountRequest = new TSearchAccountRequest();
          struct.searchAccountRequest.read(iprot);
          struct.setSearchAccountRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class searchAccounts_result implements org.apache.thrift.TBase<searchAccounts_result, searchAccounts_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchAccounts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAccounts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new searchAccounts_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new searchAccounts_resultTupleSchemeFactory();

    private TAccountSearchResponse success; // required
    private TAccountSearchException e1; // required
    private TSizeExceededException e2; // required
    private Error e3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountSearchResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountSearchException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSizeExceededException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Error.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAccounts_result.class, metaDataMap);
    }

    public searchAccounts_result() {
    }

    public searchAccounts_result(
      TAccountSearchResponse success,
      TAccountSearchException e1,
      TSizeExceededException e2,
      Error e3)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAccounts_result(searchAccounts_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAccountSearchResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TAccountSearchException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TSizeExceededException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new Error(other.e3);
      }
    }

    public searchAccounts_result deepCopy() {
      return new searchAccounts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
    }

    public TAccountSearchResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TAccountSearchResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TAccountSearchException getE1() {
      return this.e1;
    }

    public void setE1(TAccountSearchException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TSizeExceededException getE2() {
      return this.e2;
    }

    public void setE2(TSizeExceededException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public Error getE3() {
      return this.e3;
    }

    public void setE3(Error e3) {
      this.e3 = e3;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAccountSearchResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TAccountSearchException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TSizeExceededException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((Error)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAccounts_result)
        return this.equals((searchAccounts_result)that);
      return false;
    }

    public boolean equals(searchAccounts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(searchAccounts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE3()).compareTo(other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("searchAccounts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchAccounts_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchAccounts_resultStandardScheme getScheme() {
        return new searchAccounts_resultStandardScheme();
      }
    }

    private static class searchAccounts_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<searchAccounts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchAccounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAccountSearchResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TAccountSearchException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TSizeExceededException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new Error();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchAccounts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchAccounts_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public searchAccounts_resultTupleScheme getScheme() {
        return new searchAccounts_resultTupleScheme();
      }
    }

    private static class searchAccounts_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<searchAccounts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchAccounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchAccounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TAccountSearchResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TAccountSearchException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TSizeExceededException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new Error();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AutoCompleteName_args implements org.apache.thrift.TBase<AutoCompleteName_args, AutoCompleteName_args._Fields>, java.io.Serializable, Cloneable, Comparable<AutoCompleteName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AutoCompleteName_args");

    private static final org.apache.thrift.protocol.TField AUTO_COMPLETE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("autoCompleteRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AutoCompleteName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AutoCompleteName_argsTupleSchemeFactory();

    private TAutoCompleteRequest autoCompleteRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTO_COMPLETE_REQUEST((short)1, "autoCompleteRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTO_COMPLETE_REQUEST
            return AUTO_COMPLETE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTO_COMPLETE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("autoCompleteRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAutoCompleteRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AutoCompleteName_args.class, metaDataMap);
    }

    public AutoCompleteName_args() {
    }

    public AutoCompleteName_args(
      TAutoCompleteRequest autoCompleteRequest)
    {
      this();
      this.autoCompleteRequest = autoCompleteRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AutoCompleteName_args(AutoCompleteName_args other) {
      if (other.isSetAutoCompleteRequest()) {
        this.autoCompleteRequest = new TAutoCompleteRequest(other.autoCompleteRequest);
      }
    }

    public AutoCompleteName_args deepCopy() {
      return new AutoCompleteName_args(this);
    }

    @Override
    public void clear() {
      this.autoCompleteRequest = null;
    }

    public TAutoCompleteRequest getAutoCompleteRequest() {
      return this.autoCompleteRequest;
    }

    public void setAutoCompleteRequest(TAutoCompleteRequest autoCompleteRequest) {
      this.autoCompleteRequest = autoCompleteRequest;
    }

    public void unsetAutoCompleteRequest() {
      this.autoCompleteRequest = null;
    }

    /** Returns true if field autoCompleteRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetAutoCompleteRequest() {
      return this.autoCompleteRequest != null;
    }

    public void setAutoCompleteRequestIsSet(boolean value) {
      if (!value) {
        this.autoCompleteRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTO_COMPLETE_REQUEST:
        if (value == null) {
          unsetAutoCompleteRequest();
        } else {
          setAutoCompleteRequest((TAutoCompleteRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTO_COMPLETE_REQUEST:
        return getAutoCompleteRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTO_COMPLETE_REQUEST:
        return isSetAutoCompleteRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AutoCompleteName_args)
        return this.equals((AutoCompleteName_args)that);
      return false;
    }

    public boolean equals(AutoCompleteName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_autoCompleteRequest = true && this.isSetAutoCompleteRequest();
      boolean that_present_autoCompleteRequest = true && that.isSetAutoCompleteRequest();
      if (this_present_autoCompleteRequest || that_present_autoCompleteRequest) {
        if (!(this_present_autoCompleteRequest && that_present_autoCompleteRequest))
          return false;
        if (!this.autoCompleteRequest.equals(that.autoCompleteRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAutoCompleteRequest()) ? 131071 : 524287);
      if (isSetAutoCompleteRequest())
        hashCode = hashCode * 8191 + autoCompleteRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AutoCompleteName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAutoCompleteRequest()).compareTo(other.isSetAutoCompleteRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAutoCompleteRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoCompleteRequest, other.autoCompleteRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AutoCompleteName_args(");
      boolean first = true;

      sb.append("autoCompleteRequest:");
      if (this.autoCompleteRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.autoCompleteRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (autoCompleteRequest != null) {
        autoCompleteRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AutoCompleteName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AutoCompleteName_argsStandardScheme getScheme() {
        return new AutoCompleteName_argsStandardScheme();
      }
    }

    private static class AutoCompleteName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AutoCompleteName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AutoCompleteName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTO_COMPLETE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.autoCompleteRequest = new TAutoCompleteRequest();
                struct.autoCompleteRequest.read(iprot);
                struct.setAutoCompleteRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AutoCompleteName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.autoCompleteRequest != null) {
          oprot.writeFieldBegin(AUTO_COMPLETE_REQUEST_FIELD_DESC);
          struct.autoCompleteRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AutoCompleteName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AutoCompleteName_argsTupleScheme getScheme() {
        return new AutoCompleteName_argsTupleScheme();
      }
    }

    private static class AutoCompleteName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AutoCompleteName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AutoCompleteName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAutoCompleteRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAutoCompleteRequest()) {
          struct.autoCompleteRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AutoCompleteName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.autoCompleteRequest = new TAutoCompleteRequest();
          struct.autoCompleteRequest.read(iprot);
          struct.setAutoCompleteRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AutoCompleteName_result implements org.apache.thrift.TBase<AutoCompleteName_result, AutoCompleteName_result._Fields>, java.io.Serializable, Cloneable, Comparable<AutoCompleteName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AutoCompleteName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AutoCompleteName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AutoCompleteName_resultTupleSchemeFactory();

    private java.util.List<TAutoCompleteResponse> success; // required
    private TAccountSearchException e1; // required
    private TSizeExceededException e2; // required
    private Error e3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAutoCompleteResponse.class))));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountSearchException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSizeExceededException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Error.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AutoCompleteName_result.class, metaDataMap);
    }

    public AutoCompleteName_result() {
    }

    public AutoCompleteName_result(
      java.util.List<TAutoCompleteResponse> success,
      TAccountSearchException e1,
      TSizeExceededException e2,
      Error e3)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AutoCompleteName_result(AutoCompleteName_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TAutoCompleteResponse> __this__success = new java.util.ArrayList<TAutoCompleteResponse>(other.success.size());
        for (TAutoCompleteResponse other_element : other.success) {
          __this__success.add(new TAutoCompleteResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE1()) {
        this.e1 = new TAccountSearchException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TSizeExceededException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new Error(other.e3);
      }
    }

    public AutoCompleteName_result deepCopy() {
      return new AutoCompleteName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TAutoCompleteResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TAutoCompleteResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TAutoCompleteResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TAutoCompleteResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TAutoCompleteResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TAccountSearchException getE1() {
      return this.e1;
    }

    public void setE1(TAccountSearchException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TSizeExceededException getE2() {
      return this.e2;
    }

    public void setE2(TSizeExceededException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public Error getE3() {
      return this.e3;
    }

    public void setE3(Error e3) {
      this.e3 = e3;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TAutoCompleteResponse>)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TAccountSearchException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TSizeExceededException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((Error)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AutoCompleteName_result)
        return this.equals((AutoCompleteName_result)that);
      return false;
    }

    public boolean equals(AutoCompleteName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AutoCompleteName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE3()).compareTo(other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AutoCompleteName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AutoCompleteName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AutoCompleteName_resultStandardScheme getScheme() {
        return new AutoCompleteName_resultStandardScheme();
      }
    }

    private static class AutoCompleteName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AutoCompleteName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AutoCompleteName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TAutoCompleteResponse>(_list160.size);
                  TAutoCompleteResponse _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new TAutoCompleteResponse();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TAccountSearchException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TSizeExceededException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new Error();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AutoCompleteName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TAutoCompleteResponse _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AutoCompleteName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AutoCompleteName_resultTupleScheme getScheme() {
        return new AutoCompleteName_resultTupleScheme();
      }
    }

    private static class AutoCompleteName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AutoCompleteName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AutoCompleteName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TAutoCompleteResponse _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AutoCompleteName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TAutoCompleteResponse>(_list165.size);
            TAutoCompleteResponse _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new TAutoCompleteResponse();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TAccountSearchException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TSizeExceededException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new Error();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccountHistory_args implements org.apache.thrift.TBase<getAccountHistory_args, getAccountHistory_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountHistory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountHistory_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccountHistory_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccountHistory_argsTupleSchemeFactory();

    private java.lang.String accountCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_CODE((short)1, "accountCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_CODE
            return ACCOUNT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountHistory_args.class, metaDataMap);
    }

    public getAccountHistory_args() {
    }

    public getAccountHistory_args(
      java.lang.String accountCode)
    {
      this();
      this.accountCode = accountCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountHistory_args(getAccountHistory_args other) {
      if (other.isSetAccountCode()) {
        this.accountCode = other.accountCode;
      }
    }

    public getAccountHistory_args deepCopy() {
      return new getAccountHistory_args(this);
    }

    @Override
    public void clear() {
      this.accountCode = null;
    }

    public java.lang.String getAccountCode() {
      return this.accountCode;
    }

    public void setAccountCode(java.lang.String accountCode) {
      this.accountCode = accountCode;
    }

    public void unsetAccountCode() {
      this.accountCode = null;
    }

    /** Returns true if field accountCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCode() {
      return this.accountCode != null;
    }

    public void setAccountCodeIsSet(boolean value) {
      if (!value) {
        this.accountCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ACCOUNT_CODE:
        if (value == null) {
          unsetAccountCode();
        } else {
          setAccountCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_CODE:
        return getAccountCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_CODE:
        return isSetAccountCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountHistory_args)
        return this.equals((getAccountHistory_args)that);
      return false;
    }

    public boolean equals(getAccountHistory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountCode = true && this.isSetAccountCode();
      boolean that_present_accountCode = true && that.isSetAccountCode();
      if (this_present_accountCode || that_present_accountCode) {
        if (!(this_present_accountCode && that_present_accountCode))
          return false;
        if (!this.accountCode.equals(that.accountCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountCode()) ? 131071 : 524287);
      if (isSetAccountCode())
        hashCode = hashCode * 8191 + accountCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAccountHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAccountCode()).compareTo(other.isSetAccountCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCode, other.accountCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccountHistory_args(");
      boolean first = true;

      sb.append("accountCode:");
      if (this.accountCode == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountHistory_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountHistory_argsStandardScheme getScheme() {
        return new getAccountHistory_argsStandardScheme();
      }
    }

    private static class getAccountHistory_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccountHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountCode = iprot.readString();
                struct.setAccountCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountCode != null) {
          oprot.writeFieldBegin(ACCOUNT_CODE_FIELD_DESC);
          oprot.writeString(struct.accountCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountHistory_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountHistory_argsTupleScheme getScheme() {
        return new getAccountHistory_argsTupleScheme();
      }
    }

    private static class getAccountHistory_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccountHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAccountCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccountCode()) {
          oprot.writeString(struct.accountCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.accountCode = iprot.readString();
          struct.setAccountCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAccountHistory_result implements org.apache.thrift.TBase<getAccountHistory_result, getAccountHistory_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountHistory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountHistory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAccountHistory_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAccountHistory_resultTupleSchemeFactory();

    private java.util.List<TAccountVersionResponse> success; // required
    private TAccountHistoryException e1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountVersionResponse.class))));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountHistoryException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountHistory_result.class, metaDataMap);
    }

    public getAccountHistory_result() {
    }

    public getAccountHistory_result(
      java.util.List<TAccountVersionResponse> success,
      TAccountHistoryException e1)
    {
      this();
      this.success = success;
      this.e1 = e1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountHistory_result(getAccountHistory_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TAccountVersionResponse> __this__success = new java.util.ArrayList<TAccountVersionResponse>(other.success.size());
        for (TAccountVersionResponse other_element : other.success) {
          __this__success.add(new TAccountVersionResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE1()) {
        this.e1 = new TAccountHistoryException(other.e1);
      }
    }

    public getAccountHistory_result deepCopy() {
      return new getAccountHistory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TAccountVersionResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TAccountVersionResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TAccountVersionResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TAccountVersionResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TAccountVersionResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TAccountHistoryException getE1() {
      return this.e1;
    }

    public void setE1(TAccountHistoryException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TAccountVersionResponse>)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TAccountHistoryException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountHistory_result)
        return this.equals((getAccountHistory_result)that);
      return false;
    }

    public boolean equals(getAccountHistory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAccountHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAccountHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAccountHistory_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountHistory_resultStandardScheme getScheme() {
        return new getAccountHistory_resultStandardScheme();
      }
    }

    private static class getAccountHistory_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAccountHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TAccountVersionResponse>(_list168.size);
                  TAccountVersionResponse _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new TAccountVersionResponse();
                    _elem169.read(iprot);
                    struct.success.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TAccountHistoryException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountHistory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TAccountVersionResponse _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAccountHistory_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAccountHistory_resultTupleScheme getScheme() {
        return new getAccountHistory_resultTupleScheme();
      }
    }

    private static class getAccountHistory_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAccountHistory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAccountHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TAccountVersionResponse _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAccountHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TAccountVersionResponse>(_list173.size);
            TAccountVersionResponse _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new TAccountVersionResponse();
              _elem174.read(iprot);
              struct.success.add(_elem174);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TAccountHistoryException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkIsD2t_args implements org.apache.thrift.TBase<checkIsD2t_args, checkIsD2t_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkIsD2t_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkIsD2t_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkIsD2t_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkIsD2t_argsTupleSchemeFactory();

    private java.lang.String accountCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_CODE((short)1, "accountCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_CODE
            return ACCOUNT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkIsD2t_args.class, metaDataMap);
    }

    public checkIsD2t_args() {
    }

    public checkIsD2t_args(
      java.lang.String accountCode)
    {
      this();
      this.accountCode = accountCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkIsD2t_args(checkIsD2t_args other) {
      if (other.isSetAccountCode()) {
        this.accountCode = other.accountCode;
      }
    }

    public checkIsD2t_args deepCopy() {
      return new checkIsD2t_args(this);
    }

    @Override
    public void clear() {
      this.accountCode = null;
    }

    public java.lang.String getAccountCode() {
      return this.accountCode;
    }

    public void setAccountCode(java.lang.String accountCode) {
      this.accountCode = accountCode;
    }

    public void unsetAccountCode() {
      this.accountCode = null;
    }

    /** Returns true if field accountCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCode() {
      return this.accountCode != null;
    }

    public void setAccountCodeIsSet(boolean value) {
      if (!value) {
        this.accountCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ACCOUNT_CODE:
        if (value == null) {
          unsetAccountCode();
        } else {
          setAccountCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_CODE:
        return getAccountCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_CODE:
        return isSetAccountCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkIsD2t_args)
        return this.equals((checkIsD2t_args)that);
      return false;
    }

    public boolean equals(checkIsD2t_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountCode = true && this.isSetAccountCode();
      boolean that_present_accountCode = true && that.isSetAccountCode();
      if (this_present_accountCode || that_present_accountCode) {
        if (!(this_present_accountCode && that_present_accountCode))
          return false;
        if (!this.accountCode.equals(that.accountCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountCode()) ? 131071 : 524287);
      if (isSetAccountCode())
        hashCode = hashCode * 8191 + accountCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkIsD2t_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAccountCode()).compareTo(other.isSetAccountCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCode, other.accountCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkIsD2t_args(");
      boolean first = true;

      sb.append("accountCode:");
      if (this.accountCode == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkIsD2t_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkIsD2t_argsStandardScheme getScheme() {
        return new checkIsD2t_argsStandardScheme();
      }
    }

    private static class checkIsD2t_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkIsD2t_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkIsD2t_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountCode = iprot.readString();
                struct.setAccountCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkIsD2t_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountCode != null) {
          oprot.writeFieldBegin(ACCOUNT_CODE_FIELD_DESC);
          oprot.writeString(struct.accountCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkIsD2t_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkIsD2t_argsTupleScheme getScheme() {
        return new checkIsD2t_argsTupleScheme();
      }
    }

    private static class checkIsD2t_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkIsD2t_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkIsD2t_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAccountCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccountCode()) {
          oprot.writeString(struct.accountCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkIsD2t_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.accountCode = iprot.readString();
          struct.setAccountCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkIsD2t_result implements org.apache.thrift.TBase<checkIsD2t_result, checkIsD2t_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkIsD2t_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkIsD2t_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkIsD2t_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkIsD2t_resultTupleSchemeFactory();

    private boolean success; // required
    private TNoAccountException e1; // required
    private TAccountSearchException e2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAccountSearchException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkIsD2t_result.class, metaDataMap);
    }

    public checkIsD2t_result() {
    }

    public checkIsD2t_result(
      boolean success,
      TNoAccountException e1,
      TAccountSearchException e2)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e1 = e1;
      this.e2 = e2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkIsD2t_result(checkIsD2t_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE1()) {
        this.e1 = new TNoAccountException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TAccountSearchException(other.e2);
      }
    }

    public checkIsD2t_result deepCopy() {
      return new checkIsD2t_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e1 = null;
      this.e2 = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TNoAccountException getE1() {
      return this.e1;
    }

    public void setE1(TNoAccountException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TAccountSearchException getE2() {
      return this.e2;
    }

    public void setE2(TAccountSearchException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TNoAccountException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TAccountSearchException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkIsD2t_result)
        return this.equals((checkIsD2t_result)that);
      return false;
    }

    public boolean equals(checkIsD2t_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkIsD2t_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkIsD2t_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkIsD2t_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkIsD2t_resultStandardScheme getScheme() {
        return new checkIsD2t_resultStandardScheme();
      }
    }

    private static class checkIsD2t_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkIsD2t_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkIsD2t_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TNoAccountException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TAccountSearchException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkIsD2t_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkIsD2t_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkIsD2t_resultTupleScheme getScheme() {
        return new checkIsD2t_resultTupleScheme();
      }
    }

    private static class checkIsD2t_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkIsD2t_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkIsD2t_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkIsD2t_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TNoAccountException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TAccountSearchException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
