/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.mm.channel.accountmanagement;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-27")
public class BillingAddressManagement {

  public interface Iface {

    public TGetBillingAddressesResponse getBillingAddressesOfAccount(java.lang.String accountCode, int page, int perPage) throws TNoBillingAddressException, TBillingAddressSearchException, TNoAccountException, org.apache.thrift.TException;

    public TBillingAddressResponse addBillingAddressesToAccount(java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests, java.lang.String accountCode) throws TBillingAddressCreationException, TBillingAddressDataValidationException, TJsonParseException, org.apache.thrift.TException;

    public TBillingAddressResponse deleteBillingAddressesOfAccount(java.util.List<java.lang.String> billingIds, java.lang.String accountCode) throws TBillingAddressResponseDeleteException, TNoBillingAddressException, TAlreadyDeletedException, org.apache.thrift.TException;

    public TBillingAddressResponse updateBillingAddress(TUpdateBillingAddressRequest updateBillingAddressRequest) throws TBillingAddressUpdateException, TAlreadyDeletedException, TNoBillingAddressException, TBillingAddressDataValidationException, TJsonParseException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getBillingAddressesOfAccount(java.lang.String accountCode, int page, int perPage, org.apache.thrift.async.AsyncMethodCallback<TGetBillingAddressesResponse> resultHandler) throws org.apache.thrift.TException;

    public void addBillingAddressesToAccount(java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests, java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler) throws org.apache.thrift.TException;

    public void deleteBillingAddressesOfAccount(java.util.List<java.lang.String> billingIds, java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler) throws org.apache.thrift.TException;

    public void updateBillingAddress(TUpdateBillingAddressRequest updateBillingAddressRequest, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TGetBillingAddressesResponse getBillingAddressesOfAccount(java.lang.String accountCode, int page, int perPage) throws TNoBillingAddressException, TBillingAddressSearchException, TNoAccountException, org.apache.thrift.TException
    {
      send_getBillingAddressesOfAccount(accountCode, page, perPage);
      return recv_getBillingAddressesOfAccount();
    }

    public void send_getBillingAddressesOfAccount(java.lang.String accountCode, int page, int perPage) throws org.apache.thrift.TException
    {
      getBillingAddressesOfAccount_args args = new getBillingAddressesOfAccount_args();
      args.setAccountCode(accountCode);
      args.setPage(page);
      args.setPerPage(perPage);
      sendBase("getBillingAddressesOfAccount", args);
    }

    public TGetBillingAddressesResponse recv_getBillingAddressesOfAccount() throws TNoBillingAddressException, TBillingAddressSearchException, TNoAccountException, org.apache.thrift.TException
    {
      getBillingAddressesOfAccount_result result = new getBillingAddressesOfAccount_result();
      receiveBase(result, "getBillingAddressesOfAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBillingAddressesOfAccount failed: unknown result");
    }

    public TBillingAddressResponse addBillingAddressesToAccount(java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests, java.lang.String accountCode) throws TBillingAddressCreationException, TBillingAddressDataValidationException, TJsonParseException, org.apache.thrift.TException
    {
      send_addBillingAddressesToAccount(createBillingAddressRequests, accountCode);
      return recv_addBillingAddressesToAccount();
    }

    public void send_addBillingAddressesToAccount(java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests, java.lang.String accountCode) throws org.apache.thrift.TException
    {
      addBillingAddressesToAccount_args args = new addBillingAddressesToAccount_args();
      args.setCreateBillingAddressRequests(createBillingAddressRequests);
      args.setAccountCode(accountCode);
      sendBase("addBillingAddressesToAccount", args);
    }

    public TBillingAddressResponse recv_addBillingAddressesToAccount() throws TBillingAddressCreationException, TBillingAddressDataValidationException, TJsonParseException, org.apache.thrift.TException
    {
      addBillingAddressesToAccount_result result = new addBillingAddressesToAccount_result();
      receiveBase(result, "addBillingAddressesToAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBillingAddressesToAccount failed: unknown result");
    }

    public TBillingAddressResponse deleteBillingAddressesOfAccount(java.util.List<java.lang.String> billingIds, java.lang.String accountCode) throws TBillingAddressResponseDeleteException, TNoBillingAddressException, TAlreadyDeletedException, org.apache.thrift.TException
    {
      send_deleteBillingAddressesOfAccount(billingIds, accountCode);
      return recv_deleteBillingAddressesOfAccount();
    }

    public void send_deleteBillingAddressesOfAccount(java.util.List<java.lang.String> billingIds, java.lang.String accountCode) throws org.apache.thrift.TException
    {
      deleteBillingAddressesOfAccount_args args = new deleteBillingAddressesOfAccount_args();
      args.setBillingIds(billingIds);
      args.setAccountCode(accountCode);
      sendBase("deleteBillingAddressesOfAccount", args);
    }

    public TBillingAddressResponse recv_deleteBillingAddressesOfAccount() throws TBillingAddressResponseDeleteException, TNoBillingAddressException, TAlreadyDeletedException, org.apache.thrift.TException
    {
      deleteBillingAddressesOfAccount_result result = new deleteBillingAddressesOfAccount_result();
      receiveBase(result, "deleteBillingAddressesOfAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBillingAddressesOfAccount failed: unknown result");
    }

    public TBillingAddressResponse updateBillingAddress(TUpdateBillingAddressRequest updateBillingAddressRequest) throws TBillingAddressUpdateException, TAlreadyDeletedException, TNoBillingAddressException, TBillingAddressDataValidationException, TJsonParseException, org.apache.thrift.TException
    {
      send_updateBillingAddress(updateBillingAddressRequest);
      return recv_updateBillingAddress();
    }

    public void send_updateBillingAddress(TUpdateBillingAddressRequest updateBillingAddressRequest) throws org.apache.thrift.TException
    {
      updateBillingAddress_args args = new updateBillingAddress_args();
      args.setUpdateBillingAddressRequest(updateBillingAddressRequest);
      sendBase("updateBillingAddress", args);
    }

    public TBillingAddressResponse recv_updateBillingAddress() throws TBillingAddressUpdateException, TAlreadyDeletedException, TNoBillingAddressException, TBillingAddressDataValidationException, TJsonParseException, org.apache.thrift.TException
    {
      updateBillingAddress_result result = new updateBillingAddress_result();
      receiveBase(result, "updateBillingAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      if (result.e4 != null) {
        throw result.e4;
      }
      if (result.e5 != null) {
        throw result.e5;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBillingAddress failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getBillingAddressesOfAccount(java.lang.String accountCode, int page, int perPage, org.apache.thrift.async.AsyncMethodCallback<TGetBillingAddressesResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBillingAddressesOfAccount_call method_call = new getBillingAddressesOfAccount_call(accountCode, page, perPage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBillingAddressesOfAccount_call extends org.apache.thrift.async.TAsyncMethodCall<TGetBillingAddressesResponse> {
      private java.lang.String accountCode;
      private int page;
      private int perPage;
      public getBillingAddressesOfAccount_call(java.lang.String accountCode, int page, int perPage, org.apache.thrift.async.AsyncMethodCallback<TGetBillingAddressesResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accountCode = accountCode;
        this.page = page;
        this.perPage = perPage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBillingAddressesOfAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBillingAddressesOfAccount_args args = new getBillingAddressesOfAccount_args();
        args.setAccountCode(accountCode);
        args.setPage(page);
        args.setPerPage(perPage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGetBillingAddressesResponse getResult() throws TNoBillingAddressException, TBillingAddressSearchException, TNoAccountException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBillingAddressesOfAccount();
      }
    }

    public void addBillingAddressesToAccount(java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests, java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBillingAddressesToAccount_call method_call = new addBillingAddressesToAccount_call(createBillingAddressRequests, accountCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBillingAddressesToAccount_call extends org.apache.thrift.async.TAsyncMethodCall<TBillingAddressResponse> {
      private java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests;
      private java.lang.String accountCode;
      public addBillingAddressesToAccount_call(java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests, java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.createBillingAddressRequests = createBillingAddressRequests;
        this.accountCode = accountCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBillingAddressesToAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBillingAddressesToAccount_args args = new addBillingAddressesToAccount_args();
        args.setCreateBillingAddressRequests(createBillingAddressRequests);
        args.setAccountCode(accountCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TBillingAddressResponse getResult() throws TBillingAddressCreationException, TBillingAddressDataValidationException, TJsonParseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBillingAddressesToAccount();
      }
    }

    public void deleteBillingAddressesOfAccount(java.util.List<java.lang.String> billingIds, java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBillingAddressesOfAccount_call method_call = new deleteBillingAddressesOfAccount_call(billingIds, accountCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBillingAddressesOfAccount_call extends org.apache.thrift.async.TAsyncMethodCall<TBillingAddressResponse> {
      private java.util.List<java.lang.String> billingIds;
      private java.lang.String accountCode;
      public deleteBillingAddressesOfAccount_call(java.util.List<java.lang.String> billingIds, java.lang.String accountCode, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.billingIds = billingIds;
        this.accountCode = accountCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBillingAddressesOfAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBillingAddressesOfAccount_args args = new deleteBillingAddressesOfAccount_args();
        args.setBillingIds(billingIds);
        args.setAccountCode(accountCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TBillingAddressResponse getResult() throws TBillingAddressResponseDeleteException, TNoBillingAddressException, TAlreadyDeletedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBillingAddressesOfAccount();
      }
    }

    public void updateBillingAddress(TUpdateBillingAddressRequest updateBillingAddressRequest, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBillingAddress_call method_call = new updateBillingAddress_call(updateBillingAddressRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBillingAddress_call extends org.apache.thrift.async.TAsyncMethodCall<TBillingAddressResponse> {
      private TUpdateBillingAddressRequest updateBillingAddressRequest;
      public updateBillingAddress_call(TUpdateBillingAddressRequest updateBillingAddressRequest, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.updateBillingAddressRequest = updateBillingAddressRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBillingAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBillingAddress_args args = new updateBillingAddress_args();
        args.setUpdateBillingAddressRequest(updateBillingAddressRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TBillingAddressResponse getResult() throws TBillingAddressUpdateException, TAlreadyDeletedException, TNoBillingAddressException, TBillingAddressDataValidationException, TJsonParseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBillingAddress();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getBillingAddressesOfAccount", new getBillingAddressesOfAccount());
      processMap.put("addBillingAddressesToAccount", new addBillingAddressesToAccount());
      processMap.put("deleteBillingAddressesOfAccount", new deleteBillingAddressesOfAccount());
      processMap.put("updateBillingAddress", new updateBillingAddress());
      return processMap;
    }

    public static class getBillingAddressesOfAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBillingAddressesOfAccount_args> {
      public getBillingAddressesOfAccount() {
        super("getBillingAddressesOfAccount");
      }

      public getBillingAddressesOfAccount_args getEmptyArgsInstance() {
        return new getBillingAddressesOfAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBillingAddressesOfAccount_result getResult(I iface, getBillingAddressesOfAccount_args args) throws org.apache.thrift.TException {
        getBillingAddressesOfAccount_result result = new getBillingAddressesOfAccount_result();
        try {
          result.success = iface.getBillingAddressesOfAccount(args.accountCode, args.page, args.perPage);
        } catch (TNoBillingAddressException e1) {
          result.e1 = e1;
        } catch (TBillingAddressSearchException e2) {
          result.e2 = e2;
        } catch (TNoAccountException e3) {
          result.e3 = e3;
        }
        return result;
      }
    }

    public static class addBillingAddressesToAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBillingAddressesToAccount_args> {
      public addBillingAddressesToAccount() {
        super("addBillingAddressesToAccount");
      }

      public addBillingAddressesToAccount_args getEmptyArgsInstance() {
        return new addBillingAddressesToAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBillingAddressesToAccount_result getResult(I iface, addBillingAddressesToAccount_args args) throws org.apache.thrift.TException {
        addBillingAddressesToAccount_result result = new addBillingAddressesToAccount_result();
        try {
          result.success = iface.addBillingAddressesToAccount(args.createBillingAddressRequests, args.accountCode);
        } catch (TBillingAddressCreationException e1) {
          result.e1 = e1;
        } catch (TBillingAddressDataValidationException e2) {
          result.e2 = e2;
        } catch (TJsonParseException e3) {
          result.e3 = e3;
        }
        return result;
      }
    }

    public static class deleteBillingAddressesOfAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBillingAddressesOfAccount_args> {
      public deleteBillingAddressesOfAccount() {
        super("deleteBillingAddressesOfAccount");
      }

      public deleteBillingAddressesOfAccount_args getEmptyArgsInstance() {
        return new deleteBillingAddressesOfAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBillingAddressesOfAccount_result getResult(I iface, deleteBillingAddressesOfAccount_args args) throws org.apache.thrift.TException {
        deleteBillingAddressesOfAccount_result result = new deleteBillingAddressesOfAccount_result();
        try {
          result.success = iface.deleteBillingAddressesOfAccount(args.billingIds, args.accountCode);
        } catch (TBillingAddressResponseDeleteException e1) {
          result.e1 = e1;
        } catch (TNoBillingAddressException e2) {
          result.e2 = e2;
        } catch (TAlreadyDeletedException e3) {
          result.e3 = e3;
        }
        return result;
      }
    }

    public static class updateBillingAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBillingAddress_args> {
      public updateBillingAddress() {
        super("updateBillingAddress");
      }

      public updateBillingAddress_args getEmptyArgsInstance() {
        return new updateBillingAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBillingAddress_result getResult(I iface, updateBillingAddress_args args) throws org.apache.thrift.TException {
        updateBillingAddress_result result = new updateBillingAddress_result();
        try {
          result.success = iface.updateBillingAddress(args.updateBillingAddressRequest);
        } catch (TBillingAddressUpdateException e1) {
          result.e1 = e1;
        } catch (TAlreadyDeletedException e2) {
          result.e2 = e2;
        } catch (TNoBillingAddressException e3) {
          result.e3 = e3;
        } catch (TBillingAddressDataValidationException e4) {
          result.e4 = e4;
        } catch (TJsonParseException e5) {
          result.e5 = e5;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getBillingAddressesOfAccount", new getBillingAddressesOfAccount());
      processMap.put("addBillingAddressesToAccount", new addBillingAddressesToAccount());
      processMap.put("deleteBillingAddressesOfAccount", new deleteBillingAddressesOfAccount());
      processMap.put("updateBillingAddress", new updateBillingAddress());
      return processMap;
    }

    public static class getBillingAddressesOfAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBillingAddressesOfAccount_args, TGetBillingAddressesResponse> {
      public getBillingAddressesOfAccount() {
        super("getBillingAddressesOfAccount");
      }

      public getBillingAddressesOfAccount_args getEmptyArgsInstance() {
        return new getBillingAddressesOfAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TGetBillingAddressesResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TGetBillingAddressesResponse>() { 
          public void onComplete(TGetBillingAddressesResponse o) {
            getBillingAddressesOfAccount_result result = new getBillingAddressesOfAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getBillingAddressesOfAccount_result result = new getBillingAddressesOfAccount_result();
            if (e instanceof TNoBillingAddressException) {
              result.e1 = (TNoBillingAddressException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TBillingAddressSearchException) {
              result.e2 = (TBillingAddressSearchException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof TNoAccountException) {
              result.e3 = (TNoAccountException) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBillingAddressesOfAccount_args args, org.apache.thrift.async.AsyncMethodCallback<TGetBillingAddressesResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getBillingAddressesOfAccount(args.accountCode, args.page, args.perPage,resultHandler);
      }
    }

    public static class addBillingAddressesToAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBillingAddressesToAccount_args, TBillingAddressResponse> {
      public addBillingAddressesToAccount() {
        super("addBillingAddressesToAccount");
      }

      public addBillingAddressesToAccount_args getEmptyArgsInstance() {
        return new addBillingAddressesToAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse>() { 
          public void onComplete(TBillingAddressResponse o) {
            addBillingAddressesToAccount_result result = new addBillingAddressesToAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addBillingAddressesToAccount_result result = new addBillingAddressesToAccount_result();
            if (e instanceof TBillingAddressCreationException) {
              result.e1 = (TBillingAddressCreationException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TBillingAddressDataValidationException) {
              result.e2 = (TBillingAddressDataValidationException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof TJsonParseException) {
              result.e3 = (TJsonParseException) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBillingAddressesToAccount_args args, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler) throws org.apache.thrift.TException {
        iface.addBillingAddressesToAccount(args.createBillingAddressRequests, args.accountCode,resultHandler);
      }
    }

    public static class deleteBillingAddressesOfAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBillingAddressesOfAccount_args, TBillingAddressResponse> {
      public deleteBillingAddressesOfAccount() {
        super("deleteBillingAddressesOfAccount");
      }

      public deleteBillingAddressesOfAccount_args getEmptyArgsInstance() {
        return new deleteBillingAddressesOfAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse>() { 
          public void onComplete(TBillingAddressResponse o) {
            deleteBillingAddressesOfAccount_result result = new deleteBillingAddressesOfAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteBillingAddressesOfAccount_result result = new deleteBillingAddressesOfAccount_result();
            if (e instanceof TBillingAddressResponseDeleteException) {
              result.e1 = (TBillingAddressResponseDeleteException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TNoBillingAddressException) {
              result.e2 = (TNoBillingAddressException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof TAlreadyDeletedException) {
              result.e3 = (TAlreadyDeletedException) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBillingAddressesOfAccount_args args, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler) throws org.apache.thrift.TException {
        iface.deleteBillingAddressesOfAccount(args.billingIds, args.accountCode,resultHandler);
      }
    }

    public static class updateBillingAddress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBillingAddress_args, TBillingAddressResponse> {
      public updateBillingAddress() {
        super("updateBillingAddress");
      }

      public updateBillingAddress_args getEmptyArgsInstance() {
        return new updateBillingAddress_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse>() { 
          public void onComplete(TBillingAddressResponse o) {
            updateBillingAddress_result result = new updateBillingAddress_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateBillingAddress_result result = new updateBillingAddress_result();
            if (e instanceof TBillingAddressUpdateException) {
              result.e1 = (TBillingAddressUpdateException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof TAlreadyDeletedException) {
              result.e2 = (TAlreadyDeletedException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof TNoBillingAddressException) {
              result.e3 = (TNoBillingAddressException) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof TBillingAddressDataValidationException) {
              result.e4 = (TBillingAddressDataValidationException) e;
              result.setE4IsSet(true);
              msg = result;
            } else if (e instanceof TJsonParseException) {
              result.e5 = (TJsonParseException) e;
              result.setE5IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBillingAddress_args args, org.apache.thrift.async.AsyncMethodCallback<TBillingAddressResponse> resultHandler) throws org.apache.thrift.TException {
        iface.updateBillingAddress(args.updateBillingAddressRequest,resultHandler);
      }
    }

  }

  public static class getBillingAddressesOfAccount_args implements org.apache.thrift.TBase<getBillingAddressesOfAccount_args, getBillingAddressesOfAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBillingAddressesOfAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBillingAddressesOfAccount_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("perPage", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBillingAddressesOfAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBillingAddressesOfAccount_argsTupleSchemeFactory();

    private java.lang.String accountCode; // required
    private int page; // required
    private int perPage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT_CODE((short)1, "accountCode"),
      PAGE((short)2, "page"),
      PER_PAGE((short)3, "perPage");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT_CODE
            return ACCOUNT_CODE;
          case 2: // PAGE
            return PAGE;
          case 3: // PER_PAGE
            return PER_PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PERPAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("perPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBillingAddressesOfAccount_args.class, metaDataMap);
    }

    public getBillingAddressesOfAccount_args() {
    }

    public getBillingAddressesOfAccount_args(
      java.lang.String accountCode,
      int page,
      int perPage)
    {
      this();
      this.accountCode = accountCode;
      this.page = page;
      setPageIsSet(true);
      this.perPage = perPage;
      setPerPageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBillingAddressesOfAccount_args(getBillingAddressesOfAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccountCode()) {
        this.accountCode = other.accountCode;
      }
      this.page = other.page;
      this.perPage = other.perPage;
    }

    public getBillingAddressesOfAccount_args deepCopy() {
      return new getBillingAddressesOfAccount_args(this);
    }

    @Override
    public void clear() {
      this.accountCode = null;
      setPageIsSet(false);
      this.page = 0;
      setPerPageIsSet(false);
      this.perPage = 0;
    }

    public java.lang.String getAccountCode() {
      return this.accountCode;
    }

    public void setAccountCode(java.lang.String accountCode) {
      this.accountCode = accountCode;
    }

    public void unsetAccountCode() {
      this.accountCode = null;
    }

    /** Returns true if field accountCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCode() {
      return this.accountCode != null;
    }

    public void setAccountCodeIsSet(boolean value) {
      if (!value) {
        this.accountCode = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public void setPage(int page) {
      this.page = page;
      setPageIsSet(true);
    }

    public void unsetPage() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPerPage() {
      return this.perPage;
    }

    public void setPerPage(int perPage) {
      this.perPage = perPage;
      setPerPageIsSet(true);
    }

    public void unsetPerPage() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PERPAGE_ISSET_ID);
    }

    /** Returns true if field perPage is set (has been assigned a value) and false otherwise */
    public boolean isSetPerPage() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PERPAGE_ISSET_ID);
    }

    public void setPerPageIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PERPAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ACCOUNT_CODE:
        if (value == null) {
          unsetAccountCode();
        } else {
          setAccountCode((java.lang.String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((java.lang.Integer)value);
        }
        break;

      case PER_PAGE:
        if (value == null) {
          unsetPerPage();
        } else {
          setPerPage((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT_CODE:
        return getAccountCode();

      case PAGE:
        return getPage();

      case PER_PAGE:
        return getPerPage();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT_CODE:
        return isSetAccountCode();
      case PAGE:
        return isSetPage();
      case PER_PAGE:
        return isSetPerPage();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBillingAddressesOfAccount_args)
        return this.equals((getBillingAddressesOfAccount_args)that);
      return false;
    }

    public boolean equals(getBillingAddressesOfAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_accountCode = true && this.isSetAccountCode();
      boolean that_present_accountCode = true && that.isSetAccountCode();
      if (this_present_accountCode || that_present_accountCode) {
        if (!(this_present_accountCode && that_present_accountCode))
          return false;
        if (!this.accountCode.equals(that.accountCode))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_perPage = true;
      boolean that_present_perPage = true;
      if (this_present_perPage || that_present_perPage) {
        if (!(this_present_perPage && that_present_perPage))
          return false;
        if (this.perPage != that.perPage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAccountCode()) ? 131071 : 524287);
      if (isSetAccountCode())
        hashCode = hashCode * 8191 + accountCode.hashCode();

      hashCode = hashCode * 8191 + page;

      hashCode = hashCode * 8191 + perPage;

      return hashCode;
    }

    @Override
    public int compareTo(getBillingAddressesOfAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAccountCode()).compareTo(other.isSetAccountCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCode, other.accountCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPerPage()).compareTo(other.isSetPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perPage, other.perPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBillingAddressesOfAccount_args(");
      boolean first = true;

      sb.append("accountCode:");
      if (this.accountCode == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("perPage:");
      sb.append(this.perPage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBillingAddressesOfAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBillingAddressesOfAccount_argsStandardScheme getScheme() {
        return new getBillingAddressesOfAccount_argsStandardScheme();
      }
    }

    private static class getBillingAddressesOfAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBillingAddressesOfAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBillingAddressesOfAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountCode = iprot.readString();
                struct.setAccountCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.perPage = iprot.readI32();
                struct.setPerPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBillingAddressesOfAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accountCode != null) {
          oprot.writeFieldBegin(ACCOUNT_CODE_FIELD_DESC);
          oprot.writeString(struct.accountCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.perPage);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBillingAddressesOfAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBillingAddressesOfAccount_argsTupleScheme getScheme() {
        return new getBillingAddressesOfAccount_argsTupleScheme();
      }
    }

    private static class getBillingAddressesOfAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBillingAddressesOfAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBillingAddressesOfAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAccountCode()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetPerPage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccountCode()) {
          oprot.writeString(struct.accountCode);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPerPage()) {
          oprot.writeI32(struct.perPage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBillingAddressesOfAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accountCode = iprot.readString();
          struct.setAccountCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.perPage = iprot.readI32();
          struct.setPerPageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBillingAddressesOfAccount_result implements org.apache.thrift.TBase<getBillingAddressesOfAccount_result, getBillingAddressesOfAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBillingAddressesOfAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBillingAddressesOfAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBillingAddressesOfAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBillingAddressesOfAccount_resultTupleSchemeFactory();

    private TGetBillingAddressesResponse success; // required
    private TNoBillingAddressException e1; // required
    private TBillingAddressSearchException e2; // required
    private TNoAccountException e3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetBillingAddressesResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoBillingAddressException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBillingAddressSearchException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoAccountException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBillingAddressesOfAccount_result.class, metaDataMap);
    }

    public getBillingAddressesOfAccount_result() {
    }

    public getBillingAddressesOfAccount_result(
      TGetBillingAddressesResponse success,
      TNoBillingAddressException e1,
      TBillingAddressSearchException e2,
      TNoAccountException e3)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBillingAddressesOfAccount_result(getBillingAddressesOfAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGetBillingAddressesResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TNoBillingAddressException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TBillingAddressSearchException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new TNoAccountException(other.e3);
      }
    }

    public getBillingAddressesOfAccount_result deepCopy() {
      return new getBillingAddressesOfAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
    }

    public TGetBillingAddressesResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TGetBillingAddressesResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TNoBillingAddressException getE1() {
      return this.e1;
    }

    public void setE1(TNoBillingAddressException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TBillingAddressSearchException getE2() {
      return this.e2;
    }

    public void setE2(TBillingAddressSearchException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public TNoAccountException getE3() {
      return this.e3;
    }

    public void setE3(TNoAccountException e3) {
      this.e3 = e3;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGetBillingAddressesResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TNoBillingAddressException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TBillingAddressSearchException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((TNoAccountException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBillingAddressesOfAccount_result)
        return this.equals((getBillingAddressesOfAccount_result)that);
      return false;
    }

    public boolean equals(getBillingAddressesOfAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBillingAddressesOfAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE3()).compareTo(other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBillingAddressesOfAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBillingAddressesOfAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBillingAddressesOfAccount_resultStandardScheme getScheme() {
        return new getBillingAddressesOfAccount_resultStandardScheme();
      }
    }

    private static class getBillingAddressesOfAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBillingAddressesOfAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBillingAddressesOfAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGetBillingAddressesResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TNoBillingAddressException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TBillingAddressSearchException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new TNoAccountException();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBillingAddressesOfAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBillingAddressesOfAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBillingAddressesOfAccount_resultTupleScheme getScheme() {
        return new getBillingAddressesOfAccount_resultTupleScheme();
      }
    }

    private static class getBillingAddressesOfAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBillingAddressesOfAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBillingAddressesOfAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBillingAddressesOfAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TGetBillingAddressesResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TNoBillingAddressException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TBillingAddressSearchException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new TNoAccountException();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addBillingAddressesToAccount_args implements org.apache.thrift.TBase<addBillingAddressesToAccount_args, addBillingAddressesToAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBillingAddressesToAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBillingAddressesToAccount_args");

    private static final org.apache.thrift.protocol.TField CREATE_BILLING_ADDRESS_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("createBillingAddressRequests", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addBillingAddressesToAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addBillingAddressesToAccount_argsTupleSchemeFactory();

    private java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests; // required
    private java.lang.String accountCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREATE_BILLING_ADDRESS_REQUESTS((short)1, "createBillingAddressRequests"),
      ACCOUNT_CODE((short)2, "accountCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREATE_BILLING_ADDRESS_REQUESTS
            return CREATE_BILLING_ADDRESS_REQUESTS;
          case 2: // ACCOUNT_CODE
            return ACCOUNT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREATE_BILLING_ADDRESS_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("createBillingAddressRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateBillingAddressRequest.class))));
      tmpMap.put(_Fields.ACCOUNT_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBillingAddressesToAccount_args.class, metaDataMap);
    }

    public addBillingAddressesToAccount_args() {
    }

    public addBillingAddressesToAccount_args(
      java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests,
      java.lang.String accountCode)
    {
      this();
      this.createBillingAddressRequests = createBillingAddressRequests;
      this.accountCode = accountCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBillingAddressesToAccount_args(addBillingAddressesToAccount_args other) {
      if (other.isSetCreateBillingAddressRequests()) {
        java.util.List<TCreateBillingAddressRequest> __this__createBillingAddressRequests = new java.util.ArrayList<TCreateBillingAddressRequest>(other.createBillingAddressRequests.size());
        for (TCreateBillingAddressRequest other_element : other.createBillingAddressRequests) {
          __this__createBillingAddressRequests.add(new TCreateBillingAddressRequest(other_element));
        }
        this.createBillingAddressRequests = __this__createBillingAddressRequests;
      }
      if (other.isSetAccountCode()) {
        this.accountCode = other.accountCode;
      }
    }

    public addBillingAddressesToAccount_args deepCopy() {
      return new addBillingAddressesToAccount_args(this);
    }

    @Override
    public void clear() {
      this.createBillingAddressRequests = null;
      this.accountCode = null;
    }

    public int getCreateBillingAddressRequestsSize() {
      return (this.createBillingAddressRequests == null) ? 0 : this.createBillingAddressRequests.size();
    }

    public java.util.Iterator<TCreateBillingAddressRequest> getCreateBillingAddressRequestsIterator() {
      return (this.createBillingAddressRequests == null) ? null : this.createBillingAddressRequests.iterator();
    }

    public void addToCreateBillingAddressRequests(TCreateBillingAddressRequest elem) {
      if (this.createBillingAddressRequests == null) {
        this.createBillingAddressRequests = new java.util.ArrayList<TCreateBillingAddressRequest>();
      }
      this.createBillingAddressRequests.add(elem);
    }

    public java.util.List<TCreateBillingAddressRequest> getCreateBillingAddressRequests() {
      return this.createBillingAddressRequests;
    }

    public void setCreateBillingAddressRequests(java.util.List<TCreateBillingAddressRequest> createBillingAddressRequests) {
      this.createBillingAddressRequests = createBillingAddressRequests;
    }

    public void unsetCreateBillingAddressRequests() {
      this.createBillingAddressRequests = null;
    }

    /** Returns true if field createBillingAddressRequests is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateBillingAddressRequests() {
      return this.createBillingAddressRequests != null;
    }

    public void setCreateBillingAddressRequestsIsSet(boolean value) {
      if (!value) {
        this.createBillingAddressRequests = null;
      }
    }

    public java.lang.String getAccountCode() {
      return this.accountCode;
    }

    public void setAccountCode(java.lang.String accountCode) {
      this.accountCode = accountCode;
    }

    public void unsetAccountCode() {
      this.accountCode = null;
    }

    /** Returns true if field accountCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCode() {
      return this.accountCode != null;
    }

    public void setAccountCodeIsSet(boolean value) {
      if (!value) {
        this.accountCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CREATE_BILLING_ADDRESS_REQUESTS:
        if (value == null) {
          unsetCreateBillingAddressRequests();
        } else {
          setCreateBillingAddressRequests((java.util.List<TCreateBillingAddressRequest>)value);
        }
        break;

      case ACCOUNT_CODE:
        if (value == null) {
          unsetAccountCode();
        } else {
          setAccountCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CREATE_BILLING_ADDRESS_REQUESTS:
        return getCreateBillingAddressRequests();

      case ACCOUNT_CODE:
        return getAccountCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CREATE_BILLING_ADDRESS_REQUESTS:
        return isSetCreateBillingAddressRequests();
      case ACCOUNT_CODE:
        return isSetAccountCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addBillingAddressesToAccount_args)
        return this.equals((addBillingAddressesToAccount_args)that);
      return false;
    }

    public boolean equals(addBillingAddressesToAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_createBillingAddressRequests = true && this.isSetCreateBillingAddressRequests();
      boolean that_present_createBillingAddressRequests = true && that.isSetCreateBillingAddressRequests();
      if (this_present_createBillingAddressRequests || that_present_createBillingAddressRequests) {
        if (!(this_present_createBillingAddressRequests && that_present_createBillingAddressRequests))
          return false;
        if (!this.createBillingAddressRequests.equals(that.createBillingAddressRequests))
          return false;
      }

      boolean this_present_accountCode = true && this.isSetAccountCode();
      boolean that_present_accountCode = true && that.isSetAccountCode();
      if (this_present_accountCode || that_present_accountCode) {
        if (!(this_present_accountCode && that_present_accountCode))
          return false;
        if (!this.accountCode.equals(that.accountCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCreateBillingAddressRequests()) ? 131071 : 524287);
      if (isSetCreateBillingAddressRequests())
        hashCode = hashCode * 8191 + createBillingAddressRequests.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccountCode()) ? 131071 : 524287);
      if (isSetAccountCode())
        hashCode = hashCode * 8191 + accountCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addBillingAddressesToAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCreateBillingAddressRequests()).compareTo(other.isSetCreateBillingAddressRequests());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateBillingAddressRequests()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createBillingAddressRequests, other.createBillingAddressRequests);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccountCode()).compareTo(other.isSetAccountCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCode, other.accountCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addBillingAddressesToAccount_args(");
      boolean first = true;

      sb.append("createBillingAddressRequests:");
      if (this.createBillingAddressRequests == null) {
        sb.append("null");
      } else {
        sb.append(this.createBillingAddressRequests);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountCode:");
      if (this.accountCode == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBillingAddressesToAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBillingAddressesToAccount_argsStandardScheme getScheme() {
        return new addBillingAddressesToAccount_argsStandardScheme();
      }
    }

    private static class addBillingAddressesToAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addBillingAddressesToAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBillingAddressesToAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREATE_BILLING_ADDRESS_REQUESTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.createBillingAddressRequests = new java.util.ArrayList<TCreateBillingAddressRequest>(_list176.size);
                  TCreateBillingAddressRequest _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = new TCreateBillingAddressRequest();
                    _elem177.read(iprot);
                    struct.createBillingAddressRequests.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setCreateBillingAddressRequestsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountCode = iprot.readString();
                struct.setAccountCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBillingAddressesToAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.createBillingAddressRequests != null) {
          oprot.writeFieldBegin(CREATE_BILLING_ADDRESS_REQUESTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.createBillingAddressRequests.size()));
            for (TCreateBillingAddressRequest _iter179 : struct.createBillingAddressRequests)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.accountCode != null) {
          oprot.writeFieldBegin(ACCOUNT_CODE_FIELD_DESC);
          oprot.writeString(struct.accountCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBillingAddressesToAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBillingAddressesToAccount_argsTupleScheme getScheme() {
        return new addBillingAddressesToAccount_argsTupleScheme();
      }
    }

    private static class addBillingAddressesToAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addBillingAddressesToAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBillingAddressesToAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCreateBillingAddressRequests()) {
          optionals.set(0);
        }
        if (struct.isSetAccountCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCreateBillingAddressRequests()) {
          {
            oprot.writeI32(struct.createBillingAddressRequests.size());
            for (TCreateBillingAddressRequest _iter180 : struct.createBillingAddressRequests)
            {
              _iter180.write(oprot);
            }
          }
        }
        if (struct.isSetAccountCode()) {
          oprot.writeString(struct.accountCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBillingAddressesToAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.createBillingAddressRequests = new java.util.ArrayList<TCreateBillingAddressRequest>(_list181.size);
            TCreateBillingAddressRequest _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new TCreateBillingAddressRequest();
              _elem182.read(iprot);
              struct.createBillingAddressRequests.add(_elem182);
            }
          }
          struct.setCreateBillingAddressRequestsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.accountCode = iprot.readString();
          struct.setAccountCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addBillingAddressesToAccount_result implements org.apache.thrift.TBase<addBillingAddressesToAccount_result, addBillingAddressesToAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBillingAddressesToAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBillingAddressesToAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addBillingAddressesToAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addBillingAddressesToAccount_resultTupleSchemeFactory();

    private TBillingAddressResponse success; // required
    private TBillingAddressCreationException e1; // required
    private TBillingAddressDataValidationException e2; // required
    private TJsonParseException e3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBillingAddressResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBillingAddressCreationException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBillingAddressDataValidationException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJsonParseException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBillingAddressesToAccount_result.class, metaDataMap);
    }

    public addBillingAddressesToAccount_result() {
    }

    public addBillingAddressesToAccount_result(
      TBillingAddressResponse success,
      TBillingAddressCreationException e1,
      TBillingAddressDataValidationException e2,
      TJsonParseException e3)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBillingAddressesToAccount_result(addBillingAddressesToAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new TBillingAddressResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TBillingAddressCreationException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TBillingAddressDataValidationException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new TJsonParseException(other.e3);
      }
    }

    public addBillingAddressesToAccount_result deepCopy() {
      return new addBillingAddressesToAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
    }

    public TBillingAddressResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TBillingAddressResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TBillingAddressCreationException getE1() {
      return this.e1;
    }

    public void setE1(TBillingAddressCreationException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TBillingAddressDataValidationException getE2() {
      return this.e2;
    }

    public void setE2(TBillingAddressDataValidationException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public TJsonParseException getE3() {
      return this.e3;
    }

    public void setE3(TJsonParseException e3) {
      this.e3 = e3;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TBillingAddressResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TBillingAddressCreationException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TBillingAddressDataValidationException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((TJsonParseException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addBillingAddressesToAccount_result)
        return this.equals((addBillingAddressesToAccount_result)that);
      return false;
    }

    public boolean equals(addBillingAddressesToAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addBillingAddressesToAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE3()).compareTo(other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addBillingAddressesToAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBillingAddressesToAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBillingAddressesToAccount_resultStandardScheme getScheme() {
        return new addBillingAddressesToAccount_resultStandardScheme();
      }
    }

    private static class addBillingAddressesToAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addBillingAddressesToAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBillingAddressesToAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TBillingAddressResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TBillingAddressCreationException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TBillingAddressDataValidationException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new TJsonParseException();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBillingAddressesToAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBillingAddressesToAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBillingAddressesToAccount_resultTupleScheme getScheme() {
        return new addBillingAddressesToAccount_resultTupleScheme();
      }
    }

    private static class addBillingAddressesToAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addBillingAddressesToAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBillingAddressesToAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBillingAddressesToAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TBillingAddressResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TBillingAddressCreationException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TBillingAddressDataValidationException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new TJsonParseException();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteBillingAddressesOfAccount_args implements org.apache.thrift.TBase<deleteBillingAddressesOfAccount_args, deleteBillingAddressesOfAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBillingAddressesOfAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBillingAddressesOfAccount_args");

    private static final org.apache.thrift.protocol.TField BILLING_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("billingIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteBillingAddressesOfAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteBillingAddressesOfAccount_argsTupleSchemeFactory();

    private java.util.List<java.lang.String> billingIds; // required
    private java.lang.String accountCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BILLING_IDS((short)1, "billingIds"),
      ACCOUNT_CODE((short)2, "accountCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BILLING_IDS
            return BILLING_IDS;
          case 2: // ACCOUNT_CODE
            return ACCOUNT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BILLING_IDS, new org.apache.thrift.meta_data.FieldMetaData("billingIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ACCOUNT_CODE, new org.apache.thrift.meta_data.FieldMetaData("accountCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBillingAddressesOfAccount_args.class, metaDataMap);
    }

    public deleteBillingAddressesOfAccount_args() {
    }

    public deleteBillingAddressesOfAccount_args(
      java.util.List<java.lang.String> billingIds,
      java.lang.String accountCode)
    {
      this();
      this.billingIds = billingIds;
      this.accountCode = accountCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBillingAddressesOfAccount_args(deleteBillingAddressesOfAccount_args other) {
      if (other.isSetBillingIds()) {
        java.util.List<java.lang.String> __this__billingIds = new java.util.ArrayList<java.lang.String>(other.billingIds);
        this.billingIds = __this__billingIds;
      }
      if (other.isSetAccountCode()) {
        this.accountCode = other.accountCode;
      }
    }

    public deleteBillingAddressesOfAccount_args deepCopy() {
      return new deleteBillingAddressesOfAccount_args(this);
    }

    @Override
    public void clear() {
      this.billingIds = null;
      this.accountCode = null;
    }

    public int getBillingIdsSize() {
      return (this.billingIds == null) ? 0 : this.billingIds.size();
    }

    public java.util.Iterator<java.lang.String> getBillingIdsIterator() {
      return (this.billingIds == null) ? null : this.billingIds.iterator();
    }

    public void addToBillingIds(java.lang.String elem) {
      if (this.billingIds == null) {
        this.billingIds = new java.util.ArrayList<java.lang.String>();
      }
      this.billingIds.add(elem);
    }

    public java.util.List<java.lang.String> getBillingIds() {
      return this.billingIds;
    }

    public void setBillingIds(java.util.List<java.lang.String> billingIds) {
      this.billingIds = billingIds;
    }

    public void unsetBillingIds() {
      this.billingIds = null;
    }

    /** Returns true if field billingIds is set (has been assigned a value) and false otherwise */
    public boolean isSetBillingIds() {
      return this.billingIds != null;
    }

    public void setBillingIdsIsSet(boolean value) {
      if (!value) {
        this.billingIds = null;
      }
    }

    public java.lang.String getAccountCode() {
      return this.accountCode;
    }

    public void setAccountCode(java.lang.String accountCode) {
      this.accountCode = accountCode;
    }

    public void unsetAccountCode() {
      this.accountCode = null;
    }

    /** Returns true if field accountCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountCode() {
      return this.accountCode != null;
    }

    public void setAccountCodeIsSet(boolean value) {
      if (!value) {
        this.accountCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BILLING_IDS:
        if (value == null) {
          unsetBillingIds();
        } else {
          setBillingIds((java.util.List<java.lang.String>)value);
        }
        break;

      case ACCOUNT_CODE:
        if (value == null) {
          unsetAccountCode();
        } else {
          setAccountCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BILLING_IDS:
        return getBillingIds();

      case ACCOUNT_CODE:
        return getAccountCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BILLING_IDS:
        return isSetBillingIds();
      case ACCOUNT_CODE:
        return isSetAccountCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBillingAddressesOfAccount_args)
        return this.equals((deleteBillingAddressesOfAccount_args)that);
      return false;
    }

    public boolean equals(deleteBillingAddressesOfAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_billingIds = true && this.isSetBillingIds();
      boolean that_present_billingIds = true && that.isSetBillingIds();
      if (this_present_billingIds || that_present_billingIds) {
        if (!(this_present_billingIds && that_present_billingIds))
          return false;
        if (!this.billingIds.equals(that.billingIds))
          return false;
      }

      boolean this_present_accountCode = true && this.isSetAccountCode();
      boolean that_present_accountCode = true && that.isSetAccountCode();
      if (this_present_accountCode || that_present_accountCode) {
        if (!(this_present_accountCode && that_present_accountCode))
          return false;
        if (!this.accountCode.equals(that.accountCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBillingIds()) ? 131071 : 524287);
      if (isSetBillingIds())
        hashCode = hashCode * 8191 + billingIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccountCode()) ? 131071 : 524287);
      if (isSetAccountCode())
        hashCode = hashCode * 8191 + accountCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteBillingAddressesOfAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBillingIds()).compareTo(other.isSetBillingIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBillingIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.billingIds, other.billingIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccountCode()).compareTo(other.isSetAccountCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountCode, other.accountCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteBillingAddressesOfAccount_args(");
      boolean first = true;

      sb.append("billingIds:");
      if (this.billingIds == null) {
        sb.append("null");
      } else {
        sb.append(this.billingIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountCode:");
      if (this.accountCode == null) {
        sb.append("null");
      } else {
        sb.append(this.accountCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBillingAddressesOfAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteBillingAddressesOfAccount_argsStandardScheme getScheme() {
        return new deleteBillingAddressesOfAccount_argsStandardScheme();
      }
    }

    private static class deleteBillingAddressesOfAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteBillingAddressesOfAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBillingAddressesOfAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BILLING_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.billingIds = new java.util.ArrayList<java.lang.String>(_list184.size);
                  java.lang.String _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = iprot.readString();
                    struct.billingIds.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setBillingIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountCode = iprot.readString();
                struct.setAccountCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBillingAddressesOfAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.billingIds != null) {
          oprot.writeFieldBegin(BILLING_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.billingIds.size()));
            for (java.lang.String _iter187 : struct.billingIds)
            {
              oprot.writeString(_iter187);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.accountCode != null) {
          oprot.writeFieldBegin(ACCOUNT_CODE_FIELD_DESC);
          oprot.writeString(struct.accountCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBillingAddressesOfAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteBillingAddressesOfAccount_argsTupleScheme getScheme() {
        return new deleteBillingAddressesOfAccount_argsTupleScheme();
      }
    }

    private static class deleteBillingAddressesOfAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteBillingAddressesOfAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBillingAddressesOfAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBillingIds()) {
          optionals.set(0);
        }
        if (struct.isSetAccountCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBillingIds()) {
          {
            oprot.writeI32(struct.billingIds.size());
            for (java.lang.String _iter188 : struct.billingIds)
            {
              oprot.writeString(_iter188);
            }
          }
        }
        if (struct.isSetAccountCode()) {
          oprot.writeString(struct.accountCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBillingAddressesOfAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.billingIds = new java.util.ArrayList<java.lang.String>(_list189.size);
            java.lang.String _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = iprot.readString();
              struct.billingIds.add(_elem190);
            }
          }
          struct.setBillingIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.accountCode = iprot.readString();
          struct.setAccountCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteBillingAddressesOfAccount_result implements org.apache.thrift.TBase<deleteBillingAddressesOfAccount_result, deleteBillingAddressesOfAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBillingAddressesOfAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBillingAddressesOfAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteBillingAddressesOfAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteBillingAddressesOfAccount_resultTupleSchemeFactory();

    private TBillingAddressResponse success; // required
    private TBillingAddressResponseDeleteException e1; // required
    private TNoBillingAddressException e2; // required
    private TAlreadyDeletedException e3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBillingAddressResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBillingAddressResponseDeleteException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoBillingAddressException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlreadyDeletedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBillingAddressesOfAccount_result.class, metaDataMap);
    }

    public deleteBillingAddressesOfAccount_result() {
    }

    public deleteBillingAddressesOfAccount_result(
      TBillingAddressResponse success,
      TBillingAddressResponseDeleteException e1,
      TNoBillingAddressException e2,
      TAlreadyDeletedException e3)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBillingAddressesOfAccount_result(deleteBillingAddressesOfAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new TBillingAddressResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TBillingAddressResponseDeleteException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TNoBillingAddressException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new TAlreadyDeletedException(other.e3);
      }
    }

    public deleteBillingAddressesOfAccount_result deepCopy() {
      return new deleteBillingAddressesOfAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
    }

    public TBillingAddressResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TBillingAddressResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TBillingAddressResponseDeleteException getE1() {
      return this.e1;
    }

    public void setE1(TBillingAddressResponseDeleteException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TNoBillingAddressException getE2() {
      return this.e2;
    }

    public void setE2(TNoBillingAddressException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public TAlreadyDeletedException getE3() {
      return this.e3;
    }

    public void setE3(TAlreadyDeletedException e3) {
      this.e3 = e3;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TBillingAddressResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TBillingAddressResponseDeleteException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TNoBillingAddressException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((TAlreadyDeletedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBillingAddressesOfAccount_result)
        return this.equals((deleteBillingAddressesOfAccount_result)that);
      return false;
    }

    public boolean equals(deleteBillingAddressesOfAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteBillingAddressesOfAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE3()).compareTo(other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteBillingAddressesOfAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBillingAddressesOfAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteBillingAddressesOfAccount_resultStandardScheme getScheme() {
        return new deleteBillingAddressesOfAccount_resultStandardScheme();
      }
    }

    private static class deleteBillingAddressesOfAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteBillingAddressesOfAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBillingAddressesOfAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TBillingAddressResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TBillingAddressResponseDeleteException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TNoBillingAddressException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new TAlreadyDeletedException();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBillingAddressesOfAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBillingAddressesOfAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteBillingAddressesOfAccount_resultTupleScheme getScheme() {
        return new deleteBillingAddressesOfAccount_resultTupleScheme();
      }
    }

    private static class deleteBillingAddressesOfAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteBillingAddressesOfAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBillingAddressesOfAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBillingAddressesOfAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TBillingAddressResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TBillingAddressResponseDeleteException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TNoBillingAddressException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new TAlreadyDeletedException();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateBillingAddress_args implements org.apache.thrift.TBase<updateBillingAddress_args, updateBillingAddress_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBillingAddress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBillingAddress_args");

    private static final org.apache.thrift.protocol.TField UPDATE_BILLING_ADDRESS_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("updateBillingAddressRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateBillingAddress_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateBillingAddress_argsTupleSchemeFactory();

    private TUpdateBillingAddressRequest updateBillingAddressRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATE_BILLING_ADDRESS_REQUEST((short)1, "updateBillingAddressRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPDATE_BILLING_ADDRESS_REQUEST
            return UPDATE_BILLING_ADDRESS_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATE_BILLING_ADDRESS_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("updateBillingAddressRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUpdateBillingAddressRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBillingAddress_args.class, metaDataMap);
    }

    public updateBillingAddress_args() {
    }

    public updateBillingAddress_args(
      TUpdateBillingAddressRequest updateBillingAddressRequest)
    {
      this();
      this.updateBillingAddressRequest = updateBillingAddressRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBillingAddress_args(updateBillingAddress_args other) {
      if (other.isSetUpdateBillingAddressRequest()) {
        this.updateBillingAddressRequest = new TUpdateBillingAddressRequest(other.updateBillingAddressRequest);
      }
    }

    public updateBillingAddress_args deepCopy() {
      return new updateBillingAddress_args(this);
    }

    @Override
    public void clear() {
      this.updateBillingAddressRequest = null;
    }

    public TUpdateBillingAddressRequest getUpdateBillingAddressRequest() {
      return this.updateBillingAddressRequest;
    }

    public void setUpdateBillingAddressRequest(TUpdateBillingAddressRequest updateBillingAddressRequest) {
      this.updateBillingAddressRequest = updateBillingAddressRequest;
    }

    public void unsetUpdateBillingAddressRequest() {
      this.updateBillingAddressRequest = null;
    }

    /** Returns true if field updateBillingAddressRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateBillingAddressRequest() {
      return this.updateBillingAddressRequest != null;
    }

    public void setUpdateBillingAddressRequestIsSet(boolean value) {
      if (!value) {
        this.updateBillingAddressRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UPDATE_BILLING_ADDRESS_REQUEST:
        if (value == null) {
          unsetUpdateBillingAddressRequest();
        } else {
          setUpdateBillingAddressRequest((TUpdateBillingAddressRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UPDATE_BILLING_ADDRESS_REQUEST:
        return getUpdateBillingAddressRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UPDATE_BILLING_ADDRESS_REQUEST:
        return isSetUpdateBillingAddressRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBillingAddress_args)
        return this.equals((updateBillingAddress_args)that);
      return false;
    }

    public boolean equals(updateBillingAddress_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_updateBillingAddressRequest = true && this.isSetUpdateBillingAddressRequest();
      boolean that_present_updateBillingAddressRequest = true && that.isSetUpdateBillingAddressRequest();
      if (this_present_updateBillingAddressRequest || that_present_updateBillingAddressRequest) {
        if (!(this_present_updateBillingAddressRequest && that_present_updateBillingAddressRequest))
          return false;
        if (!this.updateBillingAddressRequest.equals(that.updateBillingAddressRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUpdateBillingAddressRequest()) ? 131071 : 524287);
      if (isSetUpdateBillingAddressRequest())
        hashCode = hashCode * 8191 + updateBillingAddressRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateBillingAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUpdateBillingAddressRequest()).compareTo(other.isSetUpdateBillingAddressRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateBillingAddressRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateBillingAddressRequest, other.updateBillingAddressRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateBillingAddress_args(");
      boolean first = true;

      sb.append("updateBillingAddressRequest:");
      if (this.updateBillingAddressRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.updateBillingAddressRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (updateBillingAddressRequest != null) {
        updateBillingAddressRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBillingAddress_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateBillingAddress_argsStandardScheme getScheme() {
        return new updateBillingAddress_argsStandardScheme();
      }
    }

    private static class updateBillingAddress_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateBillingAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBillingAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATE_BILLING_ADDRESS_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.updateBillingAddressRequest = new TUpdateBillingAddressRequest();
                struct.updateBillingAddressRequest.read(iprot);
                struct.setUpdateBillingAddressRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBillingAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.updateBillingAddressRequest != null) {
          oprot.writeFieldBegin(UPDATE_BILLING_ADDRESS_REQUEST_FIELD_DESC);
          struct.updateBillingAddressRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBillingAddress_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateBillingAddress_argsTupleScheme getScheme() {
        return new updateBillingAddress_argsTupleScheme();
      }
    }

    private static class updateBillingAddress_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateBillingAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBillingAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUpdateBillingAddressRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUpdateBillingAddressRequest()) {
          struct.updateBillingAddressRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBillingAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.updateBillingAddressRequest = new TUpdateBillingAddressRequest();
          struct.updateBillingAddressRequest.read(iprot);
          struct.setUpdateBillingAddressRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateBillingAddress_result implements org.apache.thrift.TBase<updateBillingAddress_result, updateBillingAddress_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBillingAddress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBillingAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E4_FIELD_DESC = new org.apache.thrift.protocol.TField("e4", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E5_FIELD_DESC = new org.apache.thrift.protocol.TField("e5", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateBillingAddress_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateBillingAddress_resultTupleSchemeFactory();

    private TBillingAddressResponse success; // required
    private TBillingAddressUpdateException e1; // required
    private TAlreadyDeletedException e2; // required
    private TNoBillingAddressException e3; // required
    private TBillingAddressDataValidationException e4; // required
    private TJsonParseException e5; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3"),
      E4((short)4, "e4"),
      E5((short)5, "e5");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          case 4: // E4
            return E4;
          case 5: // E5
            return E5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBillingAddressResponse.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBillingAddressUpdateException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlreadyDeletedException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNoBillingAddressException.class)));
      tmpMap.put(_Fields.E4, new org.apache.thrift.meta_data.FieldMetaData("e4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBillingAddressDataValidationException.class)));
      tmpMap.put(_Fields.E5, new org.apache.thrift.meta_data.FieldMetaData("e5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJsonParseException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBillingAddress_result.class, metaDataMap);
    }

    public updateBillingAddress_result() {
    }

    public updateBillingAddress_result(
      TBillingAddressResponse success,
      TBillingAddressUpdateException e1,
      TAlreadyDeletedException e2,
      TNoBillingAddressException e3,
      TBillingAddressDataValidationException e4,
      TJsonParseException e5)
    {
      this();
      this.success = success;
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
      this.e4 = e4;
      this.e5 = e5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBillingAddress_result(updateBillingAddress_result other) {
      if (other.isSetSuccess()) {
        this.success = new TBillingAddressResponse(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new TBillingAddressUpdateException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new TAlreadyDeletedException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new TNoBillingAddressException(other.e3);
      }
      if (other.isSetE4()) {
        this.e4 = new TBillingAddressDataValidationException(other.e4);
      }
      if (other.isSetE5()) {
        this.e5 = new TJsonParseException(other.e5);
      }
    }

    public updateBillingAddress_result deepCopy() {
      return new updateBillingAddress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
      this.e4 = null;
      this.e5 = null;
    }

    public TBillingAddressResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TBillingAddressResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TBillingAddressUpdateException getE1() {
      return this.e1;
    }

    public void setE1(TBillingAddressUpdateException e1) {
      this.e1 = e1;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    public TAlreadyDeletedException getE2() {
      return this.e2;
    }

    public void setE2(TAlreadyDeletedException e2) {
      this.e2 = e2;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    public TNoBillingAddressException getE3() {
      return this.e3;
    }

    public void setE3(TNoBillingAddressException e3) {
      this.e3 = e3;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    public TBillingAddressDataValidationException getE4() {
      return this.e4;
    }

    public void setE4(TBillingAddressDataValidationException e4) {
      this.e4 = e4;
    }

    public void unsetE4() {
      this.e4 = null;
    }

    /** Returns true if field e4 is set (has been assigned a value) and false otherwise */
    public boolean isSetE4() {
      return this.e4 != null;
    }

    public void setE4IsSet(boolean value) {
      if (!value) {
        this.e4 = null;
      }
    }

    public TJsonParseException getE5() {
      return this.e5;
    }

    public void setE5(TJsonParseException e5) {
      this.e5 = e5;
    }

    public void unsetE5() {
      this.e5 = null;
    }

    /** Returns true if field e5 is set (has been assigned a value) and false otherwise */
    public boolean isSetE5() {
      return this.e5 != null;
    }

    public void setE5IsSet(boolean value) {
      if (!value) {
        this.e5 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TBillingAddressResponse)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((TBillingAddressUpdateException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((TAlreadyDeletedException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((TNoBillingAddressException)value);
        }
        break;

      case E4:
        if (value == null) {
          unsetE4();
        } else {
          setE4((TBillingAddressDataValidationException)value);
        }
        break;

      case E5:
        if (value == null) {
          unsetE5();
        } else {
          setE5((TJsonParseException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      case E4:
        return getE4();

      case E5:
        return getE5();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      case E4:
        return isSetE4();
      case E5:
        return isSetE5();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBillingAddress_result)
        return this.equals((updateBillingAddress_result)that);
      return false;
    }

    public boolean equals(updateBillingAddress_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      boolean this_present_e4 = true && this.isSetE4();
      boolean that_present_e4 = true && that.isSetE4();
      if (this_present_e4 || that_present_e4) {
        if (!(this_present_e4 && that_present_e4))
          return false;
        if (!this.e4.equals(that.e4))
          return false;
      }

      boolean this_present_e5 = true && this.isSetE5();
      boolean that_present_e5 = true && that.isSetE5();
      if (this_present_e5 || that_present_e5) {
        if (!(this_present_e5 && that_present_e5))
          return false;
        if (!this.e5.equals(that.e5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      hashCode = hashCode * 8191 + ((isSetE4()) ? 131071 : 524287);
      if (isSetE4())
        hashCode = hashCode * 8191 + e4.hashCode();

      hashCode = hashCode * 8191 + ((isSetE5()) ? 131071 : 524287);
      if (isSetE5())
        hashCode = hashCode * 8191 + e5.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateBillingAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE1()).compareTo(other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE2()).compareTo(other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE3()).compareTo(other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE4()).compareTo(other.isSetE4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e4, other.e4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE5()).compareTo(other.isSetE5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e5, other.e5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateBillingAddress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e4:");
      if (this.e4 == null) {
        sb.append("null");
      } else {
        sb.append(this.e4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e5:");
      if (this.e5 == null) {
        sb.append("null");
      } else {
        sb.append(this.e5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBillingAddress_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateBillingAddress_resultStandardScheme getScheme() {
        return new updateBillingAddress_resultStandardScheme();
      }
    }

    private static class updateBillingAddress_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateBillingAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBillingAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TBillingAddressResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new TBillingAddressUpdateException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new TAlreadyDeletedException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new TNoBillingAddressException();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // E4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e4 = new TBillingAddressDataValidationException();
                struct.e4.read(iprot);
                struct.setE4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // E5
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e5 = new TJsonParseException();
                struct.e5.read(iprot);
                struct.setE5IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBillingAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e4 != null) {
          oprot.writeFieldBegin(E4_FIELD_DESC);
          struct.e4.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e5 != null) {
          oprot.writeFieldBegin(E5_FIELD_DESC);
          struct.e5.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBillingAddress_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateBillingAddress_resultTupleScheme getScheme() {
        return new updateBillingAddress_resultTupleScheme();
      }
    }

    private static class updateBillingAddress_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateBillingAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBillingAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        if (struct.isSetE4()) {
          optionals.set(4);
        }
        if (struct.isSetE5()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
        if (struct.isSetE4()) {
          struct.e4.write(oprot);
        }
        if (struct.isSetE5()) {
          struct.e5.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBillingAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = new TBillingAddressResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new TBillingAddressUpdateException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new TAlreadyDeletedException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new TNoBillingAddressException();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
        if (incoming.get(4)) {
          struct.e4 = new TBillingAddressDataValidationException();
          struct.e4.read(iprot);
          struct.setE4IsSet(true);
        }
        if (incoming.get(5)) {
          struct.e5 = new TJsonParseException();
          struct.e5.read(iprot);
          struct.setE5IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
