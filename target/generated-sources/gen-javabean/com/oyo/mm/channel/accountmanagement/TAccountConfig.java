/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.mm.channel.accountmanagement;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-27")
public class TAccountConfig implements org.apache.thrift.TBase<TAccountConfig, TAccountConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TAccountConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAccountConfig");

  private static final org.apache.thrift.protocol.TField FIXED_PRICING_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedPricing", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ENABLE_BAR_RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("enableBarRates", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField IS_FOC_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isFocValid", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_SMART_TA_FIELD_DESC = new org.apache.thrift.protocol.TField("isSmartTa", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField TA_SELLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("taSellable", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField SHOULD_MARK_UP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldMarkUpPrice", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField MARKUP_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("markupFactor", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField HIDE_COMISSION_TA_FIELD_DESC = new org.apache.thrift.protocol.TField("hideComissionTa", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField HIDE_PRICE_RANGE_TA_PORTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("hidePriceRangeTaPortal", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField WAIVE_CANCELLATION_CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("waiveCancellationCharge", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField SMART_TA_ACTIVATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("smartTaActivationDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LIMITS_FIELD_DESC = new org.apache.thrift.protocol.TField("limits", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField SMART_TA_INCENTIVE_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("smartTaIncentiveValid", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField SMART_TA_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("smartTaCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField BOOKING_APPROVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingApproval", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField BOOKING_APPROVAL_DEFAULT_APPROVED_FIELD_DESC = new org.apache.thrift.protocol.TField("bookingApprovalDefaultApproved", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField TAT_FOR_APPROVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("tatForApproval", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MULTI_TIER_FIELD_DESC = new org.apache.thrift.protocol.TField("multiTier", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField PACKAGE_VENDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("packageVendor", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField APPROVAL_SUB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalSubType", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField NOT_USE_WALLET_APPROVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("notUseWalletApproval", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField COUPON_ALLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("couponAllowed", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField SKIP_PREPAID_FIELD_DESC = new org.apache.thrift.protocol.TField("skipPrepaid", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField EXPECTED_ROOM_NIGHTS_PER_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedRoomNightsPerMonth", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_EMPLOYEES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfEmployees", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField REQUIRE_INVOICES_FIELD_DESC = new org.apache.thrift.protocol.TField("requireInvoices", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField DISCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("discountType", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField BILLING_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("billingCycle", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField IS_D2T_FIELD_DESC = new org.apache.thrift.protocol.TField("isD2t", org.apache.thrift.protocol.TType.BOOL, (short)30);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAccountConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAccountConfigTupleSchemeFactory();

  private boolean fixedPricing; // optional
  private boolean enableBarRates; // optional
  private boolean isFocValid; // optional
  private boolean isSmartTa; // optional
  private boolean taSellable; // optional
  private boolean shouldMarkUpPrice; // optional
  private double markupFactor; // optional
  private boolean hideComissionTa; // optional
  private boolean hidePriceRangeTaPortal; // optional
  private boolean waiveCancellationCharge; // optional
  private java.lang.String smartTaActivationDate; // optional
  private boolean limits; // optional
  private boolean smartTaIncentiveValid; // optional
  private double smartTaCommission; // optional
  private boolean bookingApproval; // optional
  private boolean bookingApprovalDefaultApproved; // optional
  private int tatForApproval; // optional
  private boolean multiTier; // optional
  private boolean packageVendor; // optional
  private java.lang.String approvalSubType; // optional
  private boolean notUseWalletApproval; // optional
  private boolean couponAllowed; // optional
  private boolean skipPrepaid; // optional
  private int expectedRoomNightsPerMonth; // optional
  private int numberOfEmployees; // optional
  private boolean requireInvoices; // optional
  private int discount; // optional
  private TDiscountType discountType; // optional
  private TBillingCycle billingCycle; // optional
  private boolean isD2t; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIXED_PRICING((short)1, "fixedPricing"),
    ENABLE_BAR_RATES((short)2, "enableBarRates"),
    IS_FOC_VALID((short)3, "isFocValid"),
    IS_SMART_TA((short)4, "isSmartTa"),
    TA_SELLABLE((short)5, "taSellable"),
    SHOULD_MARK_UP_PRICE((short)6, "shouldMarkUpPrice"),
    MARKUP_FACTOR((short)7, "markupFactor"),
    HIDE_COMISSION_TA((short)8, "hideComissionTa"),
    HIDE_PRICE_RANGE_TA_PORTAL((short)9, "hidePriceRangeTaPortal"),
    WAIVE_CANCELLATION_CHARGE((short)10, "waiveCancellationCharge"),
    SMART_TA_ACTIVATION_DATE((short)11, "smartTaActivationDate"),
    LIMITS((short)12, "limits"),
    SMART_TA_INCENTIVE_VALID((short)13, "smartTaIncentiveValid"),
    SMART_TA_COMMISSION((short)14, "smartTaCommission"),
    BOOKING_APPROVAL((short)15, "bookingApproval"),
    BOOKING_APPROVAL_DEFAULT_APPROVED((short)16, "bookingApprovalDefaultApproved"),
    TAT_FOR_APPROVAL((short)17, "tatForApproval"),
    MULTI_TIER((short)18, "multiTier"),
    PACKAGE_VENDOR((short)19, "packageVendor"),
    APPROVAL_SUB_TYPE((short)20, "approvalSubType"),
    NOT_USE_WALLET_APPROVAL((short)21, "notUseWalletApproval"),
    COUPON_ALLOWED((short)22, "couponAllowed"),
    SKIP_PREPAID((short)23, "skipPrepaid"),
    EXPECTED_ROOM_NIGHTS_PER_MONTH((short)24, "expectedRoomNightsPerMonth"),
    NUMBER_OF_EMPLOYEES((short)25, "numberOfEmployees"),
    REQUIRE_INVOICES((short)26, "requireInvoices"),
    DISCOUNT((short)27, "discount"),
    /**
     * 
     * @see TDiscountType
     */
    DISCOUNT_TYPE((short)28, "discountType"),
    /**
     * 
     * @see TBillingCycle
     */
    BILLING_CYCLE((short)29, "billingCycle"),
    IS_D2T((short)30, "isD2t");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIXED_PRICING
          return FIXED_PRICING;
        case 2: // ENABLE_BAR_RATES
          return ENABLE_BAR_RATES;
        case 3: // IS_FOC_VALID
          return IS_FOC_VALID;
        case 4: // IS_SMART_TA
          return IS_SMART_TA;
        case 5: // TA_SELLABLE
          return TA_SELLABLE;
        case 6: // SHOULD_MARK_UP_PRICE
          return SHOULD_MARK_UP_PRICE;
        case 7: // MARKUP_FACTOR
          return MARKUP_FACTOR;
        case 8: // HIDE_COMISSION_TA
          return HIDE_COMISSION_TA;
        case 9: // HIDE_PRICE_RANGE_TA_PORTAL
          return HIDE_PRICE_RANGE_TA_PORTAL;
        case 10: // WAIVE_CANCELLATION_CHARGE
          return WAIVE_CANCELLATION_CHARGE;
        case 11: // SMART_TA_ACTIVATION_DATE
          return SMART_TA_ACTIVATION_DATE;
        case 12: // LIMITS
          return LIMITS;
        case 13: // SMART_TA_INCENTIVE_VALID
          return SMART_TA_INCENTIVE_VALID;
        case 14: // SMART_TA_COMMISSION
          return SMART_TA_COMMISSION;
        case 15: // BOOKING_APPROVAL
          return BOOKING_APPROVAL;
        case 16: // BOOKING_APPROVAL_DEFAULT_APPROVED
          return BOOKING_APPROVAL_DEFAULT_APPROVED;
        case 17: // TAT_FOR_APPROVAL
          return TAT_FOR_APPROVAL;
        case 18: // MULTI_TIER
          return MULTI_TIER;
        case 19: // PACKAGE_VENDOR
          return PACKAGE_VENDOR;
        case 20: // APPROVAL_SUB_TYPE
          return APPROVAL_SUB_TYPE;
        case 21: // NOT_USE_WALLET_APPROVAL
          return NOT_USE_WALLET_APPROVAL;
        case 22: // COUPON_ALLOWED
          return COUPON_ALLOWED;
        case 23: // SKIP_PREPAID
          return SKIP_PREPAID;
        case 24: // EXPECTED_ROOM_NIGHTS_PER_MONTH
          return EXPECTED_ROOM_NIGHTS_PER_MONTH;
        case 25: // NUMBER_OF_EMPLOYEES
          return NUMBER_OF_EMPLOYEES;
        case 26: // REQUIRE_INVOICES
          return REQUIRE_INVOICES;
        case 27: // DISCOUNT
          return DISCOUNT;
        case 28: // DISCOUNT_TYPE
          return DISCOUNT_TYPE;
        case 29: // BILLING_CYCLE
          return BILLING_CYCLE;
        case 30: // IS_D2T
          return IS_D2T;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIXEDPRICING_ISSET_ID = 0;
  private static final int __ENABLEBARRATES_ISSET_ID = 1;
  private static final int __ISFOCVALID_ISSET_ID = 2;
  private static final int __ISSMARTTA_ISSET_ID = 3;
  private static final int __TASELLABLE_ISSET_ID = 4;
  private static final int __SHOULDMARKUPPRICE_ISSET_ID = 5;
  private static final int __MARKUPFACTOR_ISSET_ID = 6;
  private static final int __HIDECOMISSIONTA_ISSET_ID = 7;
  private static final int __HIDEPRICERANGETAPORTAL_ISSET_ID = 8;
  private static final int __WAIVECANCELLATIONCHARGE_ISSET_ID = 9;
  private static final int __LIMITS_ISSET_ID = 10;
  private static final int __SMARTTAINCENTIVEVALID_ISSET_ID = 11;
  private static final int __SMARTTACOMMISSION_ISSET_ID = 12;
  private static final int __BOOKINGAPPROVAL_ISSET_ID = 13;
  private static final int __BOOKINGAPPROVALDEFAULTAPPROVED_ISSET_ID = 14;
  private static final int __TATFORAPPROVAL_ISSET_ID = 15;
  private static final int __MULTITIER_ISSET_ID = 16;
  private static final int __PACKAGEVENDOR_ISSET_ID = 17;
  private static final int __NOTUSEWALLETAPPROVAL_ISSET_ID = 18;
  private static final int __COUPONALLOWED_ISSET_ID = 19;
  private static final int __SKIPPREPAID_ISSET_ID = 20;
  private static final int __EXPECTEDROOMNIGHTSPERMONTH_ISSET_ID = 21;
  private static final int __NUMBEROFEMPLOYEES_ISSET_ID = 22;
  private static final int __REQUIREINVOICES_ISSET_ID = 23;
  private static final int __DISCOUNT_ISSET_ID = 24;
  private static final int __ISD2T_ISSET_ID = 25;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FIXED_PRICING,_Fields.ENABLE_BAR_RATES,_Fields.IS_FOC_VALID,_Fields.IS_SMART_TA,_Fields.TA_SELLABLE,_Fields.SHOULD_MARK_UP_PRICE,_Fields.MARKUP_FACTOR,_Fields.HIDE_COMISSION_TA,_Fields.HIDE_PRICE_RANGE_TA_PORTAL,_Fields.WAIVE_CANCELLATION_CHARGE,_Fields.SMART_TA_ACTIVATION_DATE,_Fields.LIMITS,_Fields.SMART_TA_INCENTIVE_VALID,_Fields.SMART_TA_COMMISSION,_Fields.BOOKING_APPROVAL,_Fields.BOOKING_APPROVAL_DEFAULT_APPROVED,_Fields.TAT_FOR_APPROVAL,_Fields.MULTI_TIER,_Fields.PACKAGE_VENDOR,_Fields.APPROVAL_SUB_TYPE,_Fields.NOT_USE_WALLET_APPROVAL,_Fields.COUPON_ALLOWED,_Fields.SKIP_PREPAID,_Fields.EXPECTED_ROOM_NIGHTS_PER_MONTH,_Fields.NUMBER_OF_EMPLOYEES,_Fields.REQUIRE_INVOICES,_Fields.DISCOUNT,_Fields.DISCOUNT_TYPE,_Fields.BILLING_CYCLE,_Fields.IS_D2T};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIXED_PRICING, new org.apache.thrift.meta_data.FieldMetaData("fixedPricing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_BAR_RATES, new org.apache.thrift.meta_data.FieldMetaData("enableBarRates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FOC_VALID, new org.apache.thrift.meta_data.FieldMetaData("isFocValid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SMART_TA, new org.apache.thrift.meta_data.FieldMetaData("isSmartTa", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TA_SELLABLE, new org.apache.thrift.meta_data.FieldMetaData("taSellable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHOULD_MARK_UP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("shouldMarkUpPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MARKUP_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("markupFactor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HIDE_COMISSION_TA, new org.apache.thrift.meta_data.FieldMetaData("hideComissionTa", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HIDE_PRICE_RANGE_TA_PORTAL, new org.apache.thrift.meta_data.FieldMetaData("hidePriceRangeTaPortal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WAIVE_CANCELLATION_CHARGE, new org.apache.thrift.meta_data.FieldMetaData("waiveCancellationCharge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SMART_TA_ACTIVATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("smartTaActivationDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMITS, new org.apache.thrift.meta_data.FieldMetaData("limits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SMART_TA_INCENTIVE_VALID, new org.apache.thrift.meta_data.FieldMetaData("smartTaIncentiveValid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SMART_TA_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("smartTaCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOOKING_APPROVAL, new org.apache.thrift.meta_data.FieldMetaData("bookingApproval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOOKING_APPROVAL_DEFAULT_APPROVED, new org.apache.thrift.meta_data.FieldMetaData("bookingApprovalDefaultApproved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TAT_FOR_APPROVAL, new org.apache.thrift.meta_data.FieldMetaData("tatForApproval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MULTI_TIER, new org.apache.thrift.meta_data.FieldMetaData("multiTier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PACKAGE_VENDOR, new org.apache.thrift.meta_data.FieldMetaData("packageVendor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.APPROVAL_SUB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("approvalSubType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOT_USE_WALLET_APPROVAL, new org.apache.thrift.meta_data.FieldMetaData("notUseWalletApproval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COUPON_ALLOWED, new org.apache.thrift.meta_data.FieldMetaData("couponAllowed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SKIP_PREPAID, new org.apache.thrift.meta_data.FieldMetaData("skipPrepaid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXPECTED_ROOM_NIGHTS_PER_MONTH, new org.apache.thrift.meta_data.FieldMetaData("expectedRoomNightsPerMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER_OF_EMPLOYEES, new org.apache.thrift.meta_data.FieldMetaData("numberOfEmployees", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUIRE_INVOICES, new org.apache.thrift.meta_data.FieldMetaData("requireInvoices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("discountType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDiscountType.class)));
    tmpMap.put(_Fields.BILLING_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("billingCycle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TBillingCycle.class)));
    tmpMap.put(_Fields.IS_D2T, new org.apache.thrift.meta_data.FieldMetaData("isD2t", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAccountConfig.class, metaDataMap);
  }

  public TAccountConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAccountConfig(TAccountConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fixedPricing = other.fixedPricing;
    this.enableBarRates = other.enableBarRates;
    this.isFocValid = other.isFocValid;
    this.isSmartTa = other.isSmartTa;
    this.taSellable = other.taSellable;
    this.shouldMarkUpPrice = other.shouldMarkUpPrice;
    this.markupFactor = other.markupFactor;
    this.hideComissionTa = other.hideComissionTa;
    this.hidePriceRangeTaPortal = other.hidePriceRangeTaPortal;
    this.waiveCancellationCharge = other.waiveCancellationCharge;
    if (other.isSetSmartTaActivationDate()) {
      this.smartTaActivationDate = other.smartTaActivationDate;
    }
    this.limits = other.limits;
    this.smartTaIncentiveValid = other.smartTaIncentiveValid;
    this.smartTaCommission = other.smartTaCommission;
    this.bookingApproval = other.bookingApproval;
    this.bookingApprovalDefaultApproved = other.bookingApprovalDefaultApproved;
    this.tatForApproval = other.tatForApproval;
    this.multiTier = other.multiTier;
    this.packageVendor = other.packageVendor;
    if (other.isSetApprovalSubType()) {
      this.approvalSubType = other.approvalSubType;
    }
    this.notUseWalletApproval = other.notUseWalletApproval;
    this.couponAllowed = other.couponAllowed;
    this.skipPrepaid = other.skipPrepaid;
    this.expectedRoomNightsPerMonth = other.expectedRoomNightsPerMonth;
    this.numberOfEmployees = other.numberOfEmployees;
    this.requireInvoices = other.requireInvoices;
    this.discount = other.discount;
    if (other.isSetDiscountType()) {
      this.discountType = other.discountType;
    }
    if (other.isSetBillingCycle()) {
      this.billingCycle = other.billingCycle;
    }
    this.isD2t = other.isD2t;
  }

  public TAccountConfig deepCopy() {
    return new TAccountConfig(this);
  }

  @Override
  public void clear() {
    setFixedPricingIsSet(false);
    this.fixedPricing = false;
    setEnableBarRatesIsSet(false);
    this.enableBarRates = false;
    setIsFocValidIsSet(false);
    this.isFocValid = false;
    setIsSmartTaIsSet(false);
    this.isSmartTa = false;
    setTaSellableIsSet(false);
    this.taSellable = false;
    setShouldMarkUpPriceIsSet(false);
    this.shouldMarkUpPrice = false;
    setMarkupFactorIsSet(false);
    this.markupFactor = 0.0;
    setHideComissionTaIsSet(false);
    this.hideComissionTa = false;
    setHidePriceRangeTaPortalIsSet(false);
    this.hidePriceRangeTaPortal = false;
    setWaiveCancellationChargeIsSet(false);
    this.waiveCancellationCharge = false;
    this.smartTaActivationDate = null;
    setLimitsIsSet(false);
    this.limits = false;
    setSmartTaIncentiveValidIsSet(false);
    this.smartTaIncentiveValid = false;
    setSmartTaCommissionIsSet(false);
    this.smartTaCommission = 0.0;
    setBookingApprovalIsSet(false);
    this.bookingApproval = false;
    setBookingApprovalDefaultApprovedIsSet(false);
    this.bookingApprovalDefaultApproved = false;
    setTatForApprovalIsSet(false);
    this.tatForApproval = 0;
    setMultiTierIsSet(false);
    this.multiTier = false;
    setPackageVendorIsSet(false);
    this.packageVendor = false;
    this.approvalSubType = null;
    setNotUseWalletApprovalIsSet(false);
    this.notUseWalletApproval = false;
    setCouponAllowedIsSet(false);
    this.couponAllowed = false;
    setSkipPrepaidIsSet(false);
    this.skipPrepaid = false;
    setExpectedRoomNightsPerMonthIsSet(false);
    this.expectedRoomNightsPerMonth = 0;
    setNumberOfEmployeesIsSet(false);
    this.numberOfEmployees = 0;
    setRequireInvoicesIsSet(false);
    this.requireInvoices = false;
    setDiscountIsSet(false);
    this.discount = 0;
    this.discountType = null;
    this.billingCycle = null;
    setIsD2tIsSet(false);
    this.isD2t = false;
  }

  public boolean isFixedPricing() {
    return this.fixedPricing;
  }

  public void setFixedPricing(boolean fixedPricing) {
    this.fixedPricing = fixedPricing;
    setFixedPricingIsSet(true);
  }

  public void unsetFixedPricing() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIXEDPRICING_ISSET_ID);
  }

  /** Returns true if field fixedPricing is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedPricing() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIXEDPRICING_ISSET_ID);
  }

  public void setFixedPricingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIXEDPRICING_ISSET_ID, value);
  }

  public boolean isEnableBarRates() {
    return this.enableBarRates;
  }

  public void setEnableBarRates(boolean enableBarRates) {
    this.enableBarRates = enableBarRates;
    setEnableBarRatesIsSet(true);
  }

  public void unsetEnableBarRates() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLEBARRATES_ISSET_ID);
  }

  /** Returns true if field enableBarRates is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableBarRates() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLEBARRATES_ISSET_ID);
  }

  public void setEnableBarRatesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLEBARRATES_ISSET_ID, value);
  }

  public boolean isIsFocValid() {
    return this.isFocValid;
  }

  public void setIsFocValid(boolean isFocValid) {
    this.isFocValid = isFocValid;
    setIsFocValidIsSet(true);
  }

  public void unsetIsFocValid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFOCVALID_ISSET_ID);
  }

  /** Returns true if field isFocValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFocValid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFOCVALID_ISSET_ID);
  }

  public void setIsFocValidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFOCVALID_ISSET_ID, value);
  }

  public boolean isIsSmartTa() {
    return this.isSmartTa;
  }

  public void setIsSmartTa(boolean isSmartTa) {
    this.isSmartTa = isSmartTa;
    setIsSmartTaIsSet(true);
  }

  public void unsetIsSmartTa() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSMARTTA_ISSET_ID);
  }

  /** Returns true if field isSmartTa is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSmartTa() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSMARTTA_ISSET_ID);
  }

  public void setIsSmartTaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSMARTTA_ISSET_ID, value);
  }

  public boolean isTaSellable() {
    return this.taSellable;
  }

  public void setTaSellable(boolean taSellable) {
    this.taSellable = taSellable;
    setTaSellableIsSet(true);
  }

  public void unsetTaSellable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASELLABLE_ISSET_ID);
  }

  /** Returns true if field taSellable is set (has been assigned a value) and false otherwise */
  public boolean isSetTaSellable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASELLABLE_ISSET_ID);
  }

  public void setTaSellableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASELLABLE_ISSET_ID, value);
  }

  public boolean isShouldMarkUpPrice() {
    return this.shouldMarkUpPrice;
  }

  public void setShouldMarkUpPrice(boolean shouldMarkUpPrice) {
    this.shouldMarkUpPrice = shouldMarkUpPrice;
    setShouldMarkUpPriceIsSet(true);
  }

  public void unsetShouldMarkUpPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOULDMARKUPPRICE_ISSET_ID);
  }

  /** Returns true if field shouldMarkUpPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldMarkUpPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOULDMARKUPPRICE_ISSET_ID);
  }

  public void setShouldMarkUpPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOULDMARKUPPRICE_ISSET_ID, value);
  }

  public double getMarkupFactor() {
    return this.markupFactor;
  }

  public void setMarkupFactor(double markupFactor) {
    this.markupFactor = markupFactor;
    setMarkupFactorIsSet(true);
  }

  public void unsetMarkupFactor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MARKUPFACTOR_ISSET_ID);
  }

  /** Returns true if field markupFactor is set (has been assigned a value) and false otherwise */
  public boolean isSetMarkupFactor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MARKUPFACTOR_ISSET_ID);
  }

  public void setMarkupFactorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MARKUPFACTOR_ISSET_ID, value);
  }

  public boolean isHideComissionTa() {
    return this.hideComissionTa;
  }

  public void setHideComissionTa(boolean hideComissionTa) {
    this.hideComissionTa = hideComissionTa;
    setHideComissionTaIsSet(true);
  }

  public void unsetHideComissionTa() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HIDECOMISSIONTA_ISSET_ID);
  }

  /** Returns true if field hideComissionTa is set (has been assigned a value) and false otherwise */
  public boolean isSetHideComissionTa() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HIDECOMISSIONTA_ISSET_ID);
  }

  public void setHideComissionTaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HIDECOMISSIONTA_ISSET_ID, value);
  }

  public boolean isHidePriceRangeTaPortal() {
    return this.hidePriceRangeTaPortal;
  }

  public void setHidePriceRangeTaPortal(boolean hidePriceRangeTaPortal) {
    this.hidePriceRangeTaPortal = hidePriceRangeTaPortal;
    setHidePriceRangeTaPortalIsSet(true);
  }

  public void unsetHidePriceRangeTaPortal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HIDEPRICERANGETAPORTAL_ISSET_ID);
  }

  /** Returns true if field hidePriceRangeTaPortal is set (has been assigned a value) and false otherwise */
  public boolean isSetHidePriceRangeTaPortal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HIDEPRICERANGETAPORTAL_ISSET_ID);
  }

  public void setHidePriceRangeTaPortalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HIDEPRICERANGETAPORTAL_ISSET_ID, value);
  }

  public boolean isWaiveCancellationCharge() {
    return this.waiveCancellationCharge;
  }

  public void setWaiveCancellationCharge(boolean waiveCancellationCharge) {
    this.waiveCancellationCharge = waiveCancellationCharge;
    setWaiveCancellationChargeIsSet(true);
  }

  public void unsetWaiveCancellationCharge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WAIVECANCELLATIONCHARGE_ISSET_ID);
  }

  /** Returns true if field waiveCancellationCharge is set (has been assigned a value) and false otherwise */
  public boolean isSetWaiveCancellationCharge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WAIVECANCELLATIONCHARGE_ISSET_ID);
  }

  public void setWaiveCancellationChargeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WAIVECANCELLATIONCHARGE_ISSET_ID, value);
  }

  public java.lang.String getSmartTaActivationDate() {
    return this.smartTaActivationDate;
  }

  public void setSmartTaActivationDate(java.lang.String smartTaActivationDate) {
    this.smartTaActivationDate = smartTaActivationDate;
  }

  public void unsetSmartTaActivationDate() {
    this.smartTaActivationDate = null;
  }

  /** Returns true if field smartTaActivationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSmartTaActivationDate() {
    return this.smartTaActivationDate != null;
  }

  public void setSmartTaActivationDateIsSet(boolean value) {
    if (!value) {
      this.smartTaActivationDate = null;
    }
  }

  public boolean isLimits() {
    return this.limits;
  }

  public void setLimits(boolean limits) {
    this.limits = limits;
    setLimitsIsSet(true);
  }

  public void unsetLimits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMITS_ISSET_ID);
  }

  /** Returns true if field limits is set (has been assigned a value) and false otherwise */
  public boolean isSetLimits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMITS_ISSET_ID);
  }

  public void setLimitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMITS_ISSET_ID, value);
  }

  public boolean isSmartTaIncentiveValid() {
    return this.smartTaIncentiveValid;
  }

  public void setSmartTaIncentiveValid(boolean smartTaIncentiveValid) {
    this.smartTaIncentiveValid = smartTaIncentiveValid;
    setSmartTaIncentiveValidIsSet(true);
  }

  public void unsetSmartTaIncentiveValid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SMARTTAINCENTIVEVALID_ISSET_ID);
  }

  /** Returns true if field smartTaIncentiveValid is set (has been assigned a value) and false otherwise */
  public boolean isSetSmartTaIncentiveValid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SMARTTAINCENTIVEVALID_ISSET_ID);
  }

  public void setSmartTaIncentiveValidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SMARTTAINCENTIVEVALID_ISSET_ID, value);
  }

  public double getSmartTaCommission() {
    return this.smartTaCommission;
  }

  public void setSmartTaCommission(double smartTaCommission) {
    this.smartTaCommission = smartTaCommission;
    setSmartTaCommissionIsSet(true);
  }

  public void unsetSmartTaCommission() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SMARTTACOMMISSION_ISSET_ID);
  }

  /** Returns true if field smartTaCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetSmartTaCommission() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SMARTTACOMMISSION_ISSET_ID);
  }

  public void setSmartTaCommissionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SMARTTACOMMISSION_ISSET_ID, value);
  }

  public boolean isBookingApproval() {
    return this.bookingApproval;
  }

  public void setBookingApproval(boolean bookingApproval) {
    this.bookingApproval = bookingApproval;
    setBookingApprovalIsSet(true);
  }

  public void unsetBookingApproval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOKINGAPPROVAL_ISSET_ID);
  }

  /** Returns true if field bookingApproval is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingApproval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOKINGAPPROVAL_ISSET_ID);
  }

  public void setBookingApprovalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOKINGAPPROVAL_ISSET_ID, value);
  }

  public boolean isBookingApprovalDefaultApproved() {
    return this.bookingApprovalDefaultApproved;
  }

  public void setBookingApprovalDefaultApproved(boolean bookingApprovalDefaultApproved) {
    this.bookingApprovalDefaultApproved = bookingApprovalDefaultApproved;
    setBookingApprovalDefaultApprovedIsSet(true);
  }

  public void unsetBookingApprovalDefaultApproved() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOKINGAPPROVALDEFAULTAPPROVED_ISSET_ID);
  }

  /** Returns true if field bookingApprovalDefaultApproved is set (has been assigned a value) and false otherwise */
  public boolean isSetBookingApprovalDefaultApproved() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOKINGAPPROVALDEFAULTAPPROVED_ISSET_ID);
  }

  public void setBookingApprovalDefaultApprovedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOKINGAPPROVALDEFAULTAPPROVED_ISSET_ID, value);
  }

  public int getTatForApproval() {
    return this.tatForApproval;
  }

  public void setTatForApproval(int tatForApproval) {
    this.tatForApproval = tatForApproval;
    setTatForApprovalIsSet(true);
  }

  public void unsetTatForApproval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TATFORAPPROVAL_ISSET_ID);
  }

  /** Returns true if field tatForApproval is set (has been assigned a value) and false otherwise */
  public boolean isSetTatForApproval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TATFORAPPROVAL_ISSET_ID);
  }

  public void setTatForApprovalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TATFORAPPROVAL_ISSET_ID, value);
  }

  public boolean isMultiTier() {
    return this.multiTier;
  }

  public void setMultiTier(boolean multiTier) {
    this.multiTier = multiTier;
    setMultiTierIsSet(true);
  }

  public void unsetMultiTier() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MULTITIER_ISSET_ID);
  }

  /** Returns true if field multiTier is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiTier() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MULTITIER_ISSET_ID);
  }

  public void setMultiTierIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MULTITIER_ISSET_ID, value);
  }

  public boolean isPackageVendor() {
    return this.packageVendor;
  }

  public void setPackageVendor(boolean packageVendor) {
    this.packageVendor = packageVendor;
    setPackageVendorIsSet(true);
  }

  public void unsetPackageVendor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PACKAGEVENDOR_ISSET_ID);
  }

  /** Returns true if field packageVendor is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageVendor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PACKAGEVENDOR_ISSET_ID);
  }

  public void setPackageVendorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PACKAGEVENDOR_ISSET_ID, value);
  }

  public java.lang.String getApprovalSubType() {
    return this.approvalSubType;
  }

  public void setApprovalSubType(java.lang.String approvalSubType) {
    this.approvalSubType = approvalSubType;
  }

  public void unsetApprovalSubType() {
    this.approvalSubType = null;
  }

  /** Returns true if field approvalSubType is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalSubType() {
    return this.approvalSubType != null;
  }

  public void setApprovalSubTypeIsSet(boolean value) {
    if (!value) {
      this.approvalSubType = null;
    }
  }

  public boolean isNotUseWalletApproval() {
    return this.notUseWalletApproval;
  }

  public void setNotUseWalletApproval(boolean notUseWalletApproval) {
    this.notUseWalletApproval = notUseWalletApproval;
    setNotUseWalletApprovalIsSet(true);
  }

  public void unsetNotUseWalletApproval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTUSEWALLETAPPROVAL_ISSET_ID);
  }

  /** Returns true if field notUseWalletApproval is set (has been assigned a value) and false otherwise */
  public boolean isSetNotUseWalletApproval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTUSEWALLETAPPROVAL_ISSET_ID);
  }

  public void setNotUseWalletApprovalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTUSEWALLETAPPROVAL_ISSET_ID, value);
  }

  public boolean isCouponAllowed() {
    return this.couponAllowed;
  }

  public void setCouponAllowed(boolean couponAllowed) {
    this.couponAllowed = couponAllowed;
    setCouponAllowedIsSet(true);
  }

  public void unsetCouponAllowed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUPONALLOWED_ISSET_ID);
  }

  /** Returns true if field couponAllowed is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponAllowed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUPONALLOWED_ISSET_ID);
  }

  public void setCouponAllowedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUPONALLOWED_ISSET_ID, value);
  }

  public boolean isSkipPrepaid() {
    return this.skipPrepaid;
  }

  public void setSkipPrepaid(boolean skipPrepaid) {
    this.skipPrepaid = skipPrepaid;
    setSkipPrepaidIsSet(true);
  }

  public void unsetSkipPrepaid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIPPREPAID_ISSET_ID);
  }

  /** Returns true if field skipPrepaid is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipPrepaid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIPPREPAID_ISSET_ID);
  }

  public void setSkipPrepaidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIPPREPAID_ISSET_ID, value);
  }

  public int getExpectedRoomNightsPerMonth() {
    return this.expectedRoomNightsPerMonth;
  }

  public void setExpectedRoomNightsPerMonth(int expectedRoomNightsPerMonth) {
    this.expectedRoomNightsPerMonth = expectedRoomNightsPerMonth;
    setExpectedRoomNightsPerMonthIsSet(true);
  }

  public void unsetExpectedRoomNightsPerMonth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPECTEDROOMNIGHTSPERMONTH_ISSET_ID);
  }

  /** Returns true if field expectedRoomNightsPerMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedRoomNightsPerMonth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPECTEDROOMNIGHTSPERMONTH_ISSET_ID);
  }

  public void setExpectedRoomNightsPerMonthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPECTEDROOMNIGHTSPERMONTH_ISSET_ID, value);
  }

  public int getNumberOfEmployees() {
    return this.numberOfEmployees;
  }

  public void setNumberOfEmployees(int numberOfEmployees) {
    this.numberOfEmployees = numberOfEmployees;
    setNumberOfEmployeesIsSet(true);
  }

  public void unsetNumberOfEmployees() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFEMPLOYEES_ISSET_ID);
  }

  /** Returns true if field numberOfEmployees is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfEmployees() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFEMPLOYEES_ISSET_ID);
  }

  public void setNumberOfEmployeesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFEMPLOYEES_ISSET_ID, value);
  }

  public boolean isRequireInvoices() {
    return this.requireInvoices;
  }

  public void setRequireInvoices(boolean requireInvoices) {
    this.requireInvoices = requireInvoices;
    setRequireInvoicesIsSet(true);
  }

  public void unsetRequireInvoices() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUIREINVOICES_ISSET_ID);
  }

  /** Returns true if field requireInvoices is set (has been assigned a value) and false otherwise */
  public boolean isSetRequireInvoices() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUIREINVOICES_ISSET_ID);
  }

  public void setRequireInvoicesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUIREINVOICES_ISSET_ID, value);
  }

  public int getDiscount() {
    return this.discount;
  }

  public void setDiscount(int discount) {
    this.discount = discount;
    setDiscountIsSet(true);
  }

  public void unsetDiscount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  /** Returns true if field discount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  public void setDiscountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
  }

  /**
   * 
   * @see TDiscountType
   */
  public TDiscountType getDiscountType() {
    return this.discountType;
  }

  /**
   * 
   * @see TDiscountType
   */
  public void setDiscountType(TDiscountType discountType) {
    this.discountType = discountType;
  }

  public void unsetDiscountType() {
    this.discountType = null;
  }

  /** Returns true if field discountType is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountType() {
    return this.discountType != null;
  }

  public void setDiscountTypeIsSet(boolean value) {
    if (!value) {
      this.discountType = null;
    }
  }

  /**
   * 
   * @see TBillingCycle
   */
  public TBillingCycle getBillingCycle() {
    return this.billingCycle;
  }

  /**
   * 
   * @see TBillingCycle
   */
  public void setBillingCycle(TBillingCycle billingCycle) {
    this.billingCycle = billingCycle;
  }

  public void unsetBillingCycle() {
    this.billingCycle = null;
  }

  /** Returns true if field billingCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetBillingCycle() {
    return this.billingCycle != null;
  }

  public void setBillingCycleIsSet(boolean value) {
    if (!value) {
      this.billingCycle = null;
    }
  }

  public boolean isIsD2t() {
    return this.isD2t;
  }

  public void setIsD2t(boolean isD2t) {
    this.isD2t = isD2t;
    setIsD2tIsSet(true);
  }

  public void unsetIsD2t() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISD2T_ISSET_ID);
  }

  /** Returns true if field isD2t is set (has been assigned a value) and false otherwise */
  public boolean isSetIsD2t() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISD2T_ISSET_ID);
  }

  public void setIsD2tIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISD2T_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FIXED_PRICING:
      if (value == null) {
        unsetFixedPricing();
      } else {
        setFixedPricing((java.lang.Boolean)value);
      }
      break;

    case ENABLE_BAR_RATES:
      if (value == null) {
        unsetEnableBarRates();
      } else {
        setEnableBarRates((java.lang.Boolean)value);
      }
      break;

    case IS_FOC_VALID:
      if (value == null) {
        unsetIsFocValid();
      } else {
        setIsFocValid((java.lang.Boolean)value);
      }
      break;

    case IS_SMART_TA:
      if (value == null) {
        unsetIsSmartTa();
      } else {
        setIsSmartTa((java.lang.Boolean)value);
      }
      break;

    case TA_SELLABLE:
      if (value == null) {
        unsetTaSellable();
      } else {
        setTaSellable((java.lang.Boolean)value);
      }
      break;

    case SHOULD_MARK_UP_PRICE:
      if (value == null) {
        unsetShouldMarkUpPrice();
      } else {
        setShouldMarkUpPrice((java.lang.Boolean)value);
      }
      break;

    case MARKUP_FACTOR:
      if (value == null) {
        unsetMarkupFactor();
      } else {
        setMarkupFactor((java.lang.Double)value);
      }
      break;

    case HIDE_COMISSION_TA:
      if (value == null) {
        unsetHideComissionTa();
      } else {
        setHideComissionTa((java.lang.Boolean)value);
      }
      break;

    case HIDE_PRICE_RANGE_TA_PORTAL:
      if (value == null) {
        unsetHidePriceRangeTaPortal();
      } else {
        setHidePriceRangeTaPortal((java.lang.Boolean)value);
      }
      break;

    case WAIVE_CANCELLATION_CHARGE:
      if (value == null) {
        unsetWaiveCancellationCharge();
      } else {
        setWaiveCancellationCharge((java.lang.Boolean)value);
      }
      break;

    case SMART_TA_ACTIVATION_DATE:
      if (value == null) {
        unsetSmartTaActivationDate();
      } else {
        setSmartTaActivationDate((java.lang.String)value);
      }
      break;

    case LIMITS:
      if (value == null) {
        unsetLimits();
      } else {
        setLimits((java.lang.Boolean)value);
      }
      break;

    case SMART_TA_INCENTIVE_VALID:
      if (value == null) {
        unsetSmartTaIncentiveValid();
      } else {
        setSmartTaIncentiveValid((java.lang.Boolean)value);
      }
      break;

    case SMART_TA_COMMISSION:
      if (value == null) {
        unsetSmartTaCommission();
      } else {
        setSmartTaCommission((java.lang.Double)value);
      }
      break;

    case BOOKING_APPROVAL:
      if (value == null) {
        unsetBookingApproval();
      } else {
        setBookingApproval((java.lang.Boolean)value);
      }
      break;

    case BOOKING_APPROVAL_DEFAULT_APPROVED:
      if (value == null) {
        unsetBookingApprovalDefaultApproved();
      } else {
        setBookingApprovalDefaultApproved((java.lang.Boolean)value);
      }
      break;

    case TAT_FOR_APPROVAL:
      if (value == null) {
        unsetTatForApproval();
      } else {
        setTatForApproval((java.lang.Integer)value);
      }
      break;

    case MULTI_TIER:
      if (value == null) {
        unsetMultiTier();
      } else {
        setMultiTier((java.lang.Boolean)value);
      }
      break;

    case PACKAGE_VENDOR:
      if (value == null) {
        unsetPackageVendor();
      } else {
        setPackageVendor((java.lang.Boolean)value);
      }
      break;

    case APPROVAL_SUB_TYPE:
      if (value == null) {
        unsetApprovalSubType();
      } else {
        setApprovalSubType((java.lang.String)value);
      }
      break;

    case NOT_USE_WALLET_APPROVAL:
      if (value == null) {
        unsetNotUseWalletApproval();
      } else {
        setNotUseWalletApproval((java.lang.Boolean)value);
      }
      break;

    case COUPON_ALLOWED:
      if (value == null) {
        unsetCouponAllowed();
      } else {
        setCouponAllowed((java.lang.Boolean)value);
      }
      break;

    case SKIP_PREPAID:
      if (value == null) {
        unsetSkipPrepaid();
      } else {
        setSkipPrepaid((java.lang.Boolean)value);
      }
      break;

    case EXPECTED_ROOM_NIGHTS_PER_MONTH:
      if (value == null) {
        unsetExpectedRoomNightsPerMonth();
      } else {
        setExpectedRoomNightsPerMonth((java.lang.Integer)value);
      }
      break;

    case NUMBER_OF_EMPLOYEES:
      if (value == null) {
        unsetNumberOfEmployees();
      } else {
        setNumberOfEmployees((java.lang.Integer)value);
      }
      break;

    case REQUIRE_INVOICES:
      if (value == null) {
        unsetRequireInvoices();
      } else {
        setRequireInvoices((java.lang.Boolean)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((java.lang.Integer)value);
      }
      break;

    case DISCOUNT_TYPE:
      if (value == null) {
        unsetDiscountType();
      } else {
        setDiscountType((TDiscountType)value);
      }
      break;

    case BILLING_CYCLE:
      if (value == null) {
        unsetBillingCycle();
      } else {
        setBillingCycle((TBillingCycle)value);
      }
      break;

    case IS_D2T:
      if (value == null) {
        unsetIsD2t();
      } else {
        setIsD2t((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIXED_PRICING:
      return isFixedPricing();

    case ENABLE_BAR_RATES:
      return isEnableBarRates();

    case IS_FOC_VALID:
      return isIsFocValid();

    case IS_SMART_TA:
      return isIsSmartTa();

    case TA_SELLABLE:
      return isTaSellable();

    case SHOULD_MARK_UP_PRICE:
      return isShouldMarkUpPrice();

    case MARKUP_FACTOR:
      return getMarkupFactor();

    case HIDE_COMISSION_TA:
      return isHideComissionTa();

    case HIDE_PRICE_RANGE_TA_PORTAL:
      return isHidePriceRangeTaPortal();

    case WAIVE_CANCELLATION_CHARGE:
      return isWaiveCancellationCharge();

    case SMART_TA_ACTIVATION_DATE:
      return getSmartTaActivationDate();

    case LIMITS:
      return isLimits();

    case SMART_TA_INCENTIVE_VALID:
      return isSmartTaIncentiveValid();

    case SMART_TA_COMMISSION:
      return getSmartTaCommission();

    case BOOKING_APPROVAL:
      return isBookingApproval();

    case BOOKING_APPROVAL_DEFAULT_APPROVED:
      return isBookingApprovalDefaultApproved();

    case TAT_FOR_APPROVAL:
      return getTatForApproval();

    case MULTI_TIER:
      return isMultiTier();

    case PACKAGE_VENDOR:
      return isPackageVendor();

    case APPROVAL_SUB_TYPE:
      return getApprovalSubType();

    case NOT_USE_WALLET_APPROVAL:
      return isNotUseWalletApproval();

    case COUPON_ALLOWED:
      return isCouponAllowed();

    case SKIP_PREPAID:
      return isSkipPrepaid();

    case EXPECTED_ROOM_NIGHTS_PER_MONTH:
      return getExpectedRoomNightsPerMonth();

    case NUMBER_OF_EMPLOYEES:
      return getNumberOfEmployees();

    case REQUIRE_INVOICES:
      return isRequireInvoices();

    case DISCOUNT:
      return getDiscount();

    case DISCOUNT_TYPE:
      return getDiscountType();

    case BILLING_CYCLE:
      return getBillingCycle();

    case IS_D2T:
      return isIsD2t();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIXED_PRICING:
      return isSetFixedPricing();
    case ENABLE_BAR_RATES:
      return isSetEnableBarRates();
    case IS_FOC_VALID:
      return isSetIsFocValid();
    case IS_SMART_TA:
      return isSetIsSmartTa();
    case TA_SELLABLE:
      return isSetTaSellable();
    case SHOULD_MARK_UP_PRICE:
      return isSetShouldMarkUpPrice();
    case MARKUP_FACTOR:
      return isSetMarkupFactor();
    case HIDE_COMISSION_TA:
      return isSetHideComissionTa();
    case HIDE_PRICE_RANGE_TA_PORTAL:
      return isSetHidePriceRangeTaPortal();
    case WAIVE_CANCELLATION_CHARGE:
      return isSetWaiveCancellationCharge();
    case SMART_TA_ACTIVATION_DATE:
      return isSetSmartTaActivationDate();
    case LIMITS:
      return isSetLimits();
    case SMART_TA_INCENTIVE_VALID:
      return isSetSmartTaIncentiveValid();
    case SMART_TA_COMMISSION:
      return isSetSmartTaCommission();
    case BOOKING_APPROVAL:
      return isSetBookingApproval();
    case BOOKING_APPROVAL_DEFAULT_APPROVED:
      return isSetBookingApprovalDefaultApproved();
    case TAT_FOR_APPROVAL:
      return isSetTatForApproval();
    case MULTI_TIER:
      return isSetMultiTier();
    case PACKAGE_VENDOR:
      return isSetPackageVendor();
    case APPROVAL_SUB_TYPE:
      return isSetApprovalSubType();
    case NOT_USE_WALLET_APPROVAL:
      return isSetNotUseWalletApproval();
    case COUPON_ALLOWED:
      return isSetCouponAllowed();
    case SKIP_PREPAID:
      return isSetSkipPrepaid();
    case EXPECTED_ROOM_NIGHTS_PER_MONTH:
      return isSetExpectedRoomNightsPerMonth();
    case NUMBER_OF_EMPLOYEES:
      return isSetNumberOfEmployees();
    case REQUIRE_INVOICES:
      return isSetRequireInvoices();
    case DISCOUNT:
      return isSetDiscount();
    case DISCOUNT_TYPE:
      return isSetDiscountType();
    case BILLING_CYCLE:
      return isSetBillingCycle();
    case IS_D2T:
      return isSetIsD2t();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TAccountConfig)
      return this.equals((TAccountConfig)that);
    return false;
  }

  public boolean equals(TAccountConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fixedPricing = true && this.isSetFixedPricing();
    boolean that_present_fixedPricing = true && that.isSetFixedPricing();
    if (this_present_fixedPricing || that_present_fixedPricing) {
      if (!(this_present_fixedPricing && that_present_fixedPricing))
        return false;
      if (this.fixedPricing != that.fixedPricing)
        return false;
    }

    boolean this_present_enableBarRates = true && this.isSetEnableBarRates();
    boolean that_present_enableBarRates = true && that.isSetEnableBarRates();
    if (this_present_enableBarRates || that_present_enableBarRates) {
      if (!(this_present_enableBarRates && that_present_enableBarRates))
        return false;
      if (this.enableBarRates != that.enableBarRates)
        return false;
    }

    boolean this_present_isFocValid = true && this.isSetIsFocValid();
    boolean that_present_isFocValid = true && that.isSetIsFocValid();
    if (this_present_isFocValid || that_present_isFocValid) {
      if (!(this_present_isFocValid && that_present_isFocValid))
        return false;
      if (this.isFocValid != that.isFocValid)
        return false;
    }

    boolean this_present_isSmartTa = true && this.isSetIsSmartTa();
    boolean that_present_isSmartTa = true && that.isSetIsSmartTa();
    if (this_present_isSmartTa || that_present_isSmartTa) {
      if (!(this_present_isSmartTa && that_present_isSmartTa))
        return false;
      if (this.isSmartTa != that.isSmartTa)
        return false;
    }

    boolean this_present_taSellable = true && this.isSetTaSellable();
    boolean that_present_taSellable = true && that.isSetTaSellable();
    if (this_present_taSellable || that_present_taSellable) {
      if (!(this_present_taSellable && that_present_taSellable))
        return false;
      if (this.taSellable != that.taSellable)
        return false;
    }

    boolean this_present_shouldMarkUpPrice = true && this.isSetShouldMarkUpPrice();
    boolean that_present_shouldMarkUpPrice = true && that.isSetShouldMarkUpPrice();
    if (this_present_shouldMarkUpPrice || that_present_shouldMarkUpPrice) {
      if (!(this_present_shouldMarkUpPrice && that_present_shouldMarkUpPrice))
        return false;
      if (this.shouldMarkUpPrice != that.shouldMarkUpPrice)
        return false;
    }

    boolean this_present_markupFactor = true && this.isSetMarkupFactor();
    boolean that_present_markupFactor = true && that.isSetMarkupFactor();
    if (this_present_markupFactor || that_present_markupFactor) {
      if (!(this_present_markupFactor && that_present_markupFactor))
        return false;
      if (this.markupFactor != that.markupFactor)
        return false;
    }

    boolean this_present_hideComissionTa = true && this.isSetHideComissionTa();
    boolean that_present_hideComissionTa = true && that.isSetHideComissionTa();
    if (this_present_hideComissionTa || that_present_hideComissionTa) {
      if (!(this_present_hideComissionTa && that_present_hideComissionTa))
        return false;
      if (this.hideComissionTa != that.hideComissionTa)
        return false;
    }

    boolean this_present_hidePriceRangeTaPortal = true && this.isSetHidePriceRangeTaPortal();
    boolean that_present_hidePriceRangeTaPortal = true && that.isSetHidePriceRangeTaPortal();
    if (this_present_hidePriceRangeTaPortal || that_present_hidePriceRangeTaPortal) {
      if (!(this_present_hidePriceRangeTaPortal && that_present_hidePriceRangeTaPortal))
        return false;
      if (this.hidePriceRangeTaPortal != that.hidePriceRangeTaPortal)
        return false;
    }

    boolean this_present_waiveCancellationCharge = true && this.isSetWaiveCancellationCharge();
    boolean that_present_waiveCancellationCharge = true && that.isSetWaiveCancellationCharge();
    if (this_present_waiveCancellationCharge || that_present_waiveCancellationCharge) {
      if (!(this_present_waiveCancellationCharge && that_present_waiveCancellationCharge))
        return false;
      if (this.waiveCancellationCharge != that.waiveCancellationCharge)
        return false;
    }

    boolean this_present_smartTaActivationDate = true && this.isSetSmartTaActivationDate();
    boolean that_present_smartTaActivationDate = true && that.isSetSmartTaActivationDate();
    if (this_present_smartTaActivationDate || that_present_smartTaActivationDate) {
      if (!(this_present_smartTaActivationDate && that_present_smartTaActivationDate))
        return false;
      if (!this.smartTaActivationDate.equals(that.smartTaActivationDate))
        return false;
    }

    boolean this_present_limits = true && this.isSetLimits();
    boolean that_present_limits = true && that.isSetLimits();
    if (this_present_limits || that_present_limits) {
      if (!(this_present_limits && that_present_limits))
        return false;
      if (this.limits != that.limits)
        return false;
    }

    boolean this_present_smartTaIncentiveValid = true && this.isSetSmartTaIncentiveValid();
    boolean that_present_smartTaIncentiveValid = true && that.isSetSmartTaIncentiveValid();
    if (this_present_smartTaIncentiveValid || that_present_smartTaIncentiveValid) {
      if (!(this_present_smartTaIncentiveValid && that_present_smartTaIncentiveValid))
        return false;
      if (this.smartTaIncentiveValid != that.smartTaIncentiveValid)
        return false;
    }

    boolean this_present_smartTaCommission = true && this.isSetSmartTaCommission();
    boolean that_present_smartTaCommission = true && that.isSetSmartTaCommission();
    if (this_present_smartTaCommission || that_present_smartTaCommission) {
      if (!(this_present_smartTaCommission && that_present_smartTaCommission))
        return false;
      if (this.smartTaCommission != that.smartTaCommission)
        return false;
    }

    boolean this_present_bookingApproval = true && this.isSetBookingApproval();
    boolean that_present_bookingApproval = true && that.isSetBookingApproval();
    if (this_present_bookingApproval || that_present_bookingApproval) {
      if (!(this_present_bookingApproval && that_present_bookingApproval))
        return false;
      if (this.bookingApproval != that.bookingApproval)
        return false;
    }

    boolean this_present_bookingApprovalDefaultApproved = true && this.isSetBookingApprovalDefaultApproved();
    boolean that_present_bookingApprovalDefaultApproved = true && that.isSetBookingApprovalDefaultApproved();
    if (this_present_bookingApprovalDefaultApproved || that_present_bookingApprovalDefaultApproved) {
      if (!(this_present_bookingApprovalDefaultApproved && that_present_bookingApprovalDefaultApproved))
        return false;
      if (this.bookingApprovalDefaultApproved != that.bookingApprovalDefaultApproved)
        return false;
    }

    boolean this_present_tatForApproval = true && this.isSetTatForApproval();
    boolean that_present_tatForApproval = true && that.isSetTatForApproval();
    if (this_present_tatForApproval || that_present_tatForApproval) {
      if (!(this_present_tatForApproval && that_present_tatForApproval))
        return false;
      if (this.tatForApproval != that.tatForApproval)
        return false;
    }

    boolean this_present_multiTier = true && this.isSetMultiTier();
    boolean that_present_multiTier = true && that.isSetMultiTier();
    if (this_present_multiTier || that_present_multiTier) {
      if (!(this_present_multiTier && that_present_multiTier))
        return false;
      if (this.multiTier != that.multiTier)
        return false;
    }

    boolean this_present_packageVendor = true && this.isSetPackageVendor();
    boolean that_present_packageVendor = true && that.isSetPackageVendor();
    if (this_present_packageVendor || that_present_packageVendor) {
      if (!(this_present_packageVendor && that_present_packageVendor))
        return false;
      if (this.packageVendor != that.packageVendor)
        return false;
    }

    boolean this_present_approvalSubType = true && this.isSetApprovalSubType();
    boolean that_present_approvalSubType = true && that.isSetApprovalSubType();
    if (this_present_approvalSubType || that_present_approvalSubType) {
      if (!(this_present_approvalSubType && that_present_approvalSubType))
        return false;
      if (!this.approvalSubType.equals(that.approvalSubType))
        return false;
    }

    boolean this_present_notUseWalletApproval = true && this.isSetNotUseWalletApproval();
    boolean that_present_notUseWalletApproval = true && that.isSetNotUseWalletApproval();
    if (this_present_notUseWalletApproval || that_present_notUseWalletApproval) {
      if (!(this_present_notUseWalletApproval && that_present_notUseWalletApproval))
        return false;
      if (this.notUseWalletApproval != that.notUseWalletApproval)
        return false;
    }

    boolean this_present_couponAllowed = true && this.isSetCouponAllowed();
    boolean that_present_couponAllowed = true && that.isSetCouponAllowed();
    if (this_present_couponAllowed || that_present_couponAllowed) {
      if (!(this_present_couponAllowed && that_present_couponAllowed))
        return false;
      if (this.couponAllowed != that.couponAllowed)
        return false;
    }

    boolean this_present_skipPrepaid = true && this.isSetSkipPrepaid();
    boolean that_present_skipPrepaid = true && that.isSetSkipPrepaid();
    if (this_present_skipPrepaid || that_present_skipPrepaid) {
      if (!(this_present_skipPrepaid && that_present_skipPrepaid))
        return false;
      if (this.skipPrepaid != that.skipPrepaid)
        return false;
    }

    boolean this_present_expectedRoomNightsPerMonth = true && this.isSetExpectedRoomNightsPerMonth();
    boolean that_present_expectedRoomNightsPerMonth = true && that.isSetExpectedRoomNightsPerMonth();
    if (this_present_expectedRoomNightsPerMonth || that_present_expectedRoomNightsPerMonth) {
      if (!(this_present_expectedRoomNightsPerMonth && that_present_expectedRoomNightsPerMonth))
        return false;
      if (this.expectedRoomNightsPerMonth != that.expectedRoomNightsPerMonth)
        return false;
    }

    boolean this_present_numberOfEmployees = true && this.isSetNumberOfEmployees();
    boolean that_present_numberOfEmployees = true && that.isSetNumberOfEmployees();
    if (this_present_numberOfEmployees || that_present_numberOfEmployees) {
      if (!(this_present_numberOfEmployees && that_present_numberOfEmployees))
        return false;
      if (this.numberOfEmployees != that.numberOfEmployees)
        return false;
    }

    boolean this_present_requireInvoices = true && this.isSetRequireInvoices();
    boolean that_present_requireInvoices = true && that.isSetRequireInvoices();
    if (this_present_requireInvoices || that_present_requireInvoices) {
      if (!(this_present_requireInvoices && that_present_requireInvoices))
        return false;
      if (this.requireInvoices != that.requireInvoices)
        return false;
    }

    boolean this_present_discount = true && this.isSetDiscount();
    boolean that_present_discount = true && that.isSetDiscount();
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (this.discount != that.discount)
        return false;
    }

    boolean this_present_discountType = true && this.isSetDiscountType();
    boolean that_present_discountType = true && that.isSetDiscountType();
    if (this_present_discountType || that_present_discountType) {
      if (!(this_present_discountType && that_present_discountType))
        return false;
      if (!this.discountType.equals(that.discountType))
        return false;
    }

    boolean this_present_billingCycle = true && this.isSetBillingCycle();
    boolean that_present_billingCycle = true && that.isSetBillingCycle();
    if (this_present_billingCycle || that_present_billingCycle) {
      if (!(this_present_billingCycle && that_present_billingCycle))
        return false;
      if (!this.billingCycle.equals(that.billingCycle))
        return false;
    }

    boolean this_present_isD2t = true && this.isSetIsD2t();
    boolean that_present_isD2t = true && that.isSetIsD2t();
    if (this_present_isD2t || that_present_isD2t) {
      if (!(this_present_isD2t && that_present_isD2t))
        return false;
      if (this.isD2t != that.isD2t)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFixedPricing()) ? 131071 : 524287);
    if (isSetFixedPricing())
      hashCode = hashCode * 8191 + ((fixedPricing) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableBarRates()) ? 131071 : 524287);
    if (isSetEnableBarRates())
      hashCode = hashCode * 8191 + ((enableBarRates) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIsFocValid()) ? 131071 : 524287);
    if (isSetIsFocValid())
      hashCode = hashCode * 8191 + ((isFocValid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIsSmartTa()) ? 131071 : 524287);
    if (isSetIsSmartTa())
      hashCode = hashCode * 8191 + ((isSmartTa) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTaSellable()) ? 131071 : 524287);
    if (isSetTaSellable())
      hashCode = hashCode * 8191 + ((taSellable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetShouldMarkUpPrice()) ? 131071 : 524287);
    if (isSetShouldMarkUpPrice())
      hashCode = hashCode * 8191 + ((shouldMarkUpPrice) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMarkupFactor()) ? 131071 : 524287);
    if (isSetMarkupFactor())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(markupFactor);

    hashCode = hashCode * 8191 + ((isSetHideComissionTa()) ? 131071 : 524287);
    if (isSetHideComissionTa())
      hashCode = hashCode * 8191 + ((hideComissionTa) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHidePriceRangeTaPortal()) ? 131071 : 524287);
    if (isSetHidePriceRangeTaPortal())
      hashCode = hashCode * 8191 + ((hidePriceRangeTaPortal) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetWaiveCancellationCharge()) ? 131071 : 524287);
    if (isSetWaiveCancellationCharge())
      hashCode = hashCode * 8191 + ((waiveCancellationCharge) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSmartTaActivationDate()) ? 131071 : 524287);
    if (isSetSmartTaActivationDate())
      hashCode = hashCode * 8191 + smartTaActivationDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetLimits()) ? 131071 : 524287);
    if (isSetLimits())
      hashCode = hashCode * 8191 + ((limits) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSmartTaIncentiveValid()) ? 131071 : 524287);
    if (isSetSmartTaIncentiveValid())
      hashCode = hashCode * 8191 + ((smartTaIncentiveValid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSmartTaCommission()) ? 131071 : 524287);
    if (isSetSmartTaCommission())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(smartTaCommission);

    hashCode = hashCode * 8191 + ((isSetBookingApproval()) ? 131071 : 524287);
    if (isSetBookingApproval())
      hashCode = hashCode * 8191 + ((bookingApproval) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBookingApprovalDefaultApproved()) ? 131071 : 524287);
    if (isSetBookingApprovalDefaultApproved())
      hashCode = hashCode * 8191 + ((bookingApprovalDefaultApproved) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTatForApproval()) ? 131071 : 524287);
    if (isSetTatForApproval())
      hashCode = hashCode * 8191 + tatForApproval;

    hashCode = hashCode * 8191 + ((isSetMultiTier()) ? 131071 : 524287);
    if (isSetMultiTier())
      hashCode = hashCode * 8191 + ((multiTier) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPackageVendor()) ? 131071 : 524287);
    if (isSetPackageVendor())
      hashCode = hashCode * 8191 + ((packageVendor) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetApprovalSubType()) ? 131071 : 524287);
    if (isSetApprovalSubType())
      hashCode = hashCode * 8191 + approvalSubType.hashCode();

    hashCode = hashCode * 8191 + ((isSetNotUseWalletApproval()) ? 131071 : 524287);
    if (isSetNotUseWalletApproval())
      hashCode = hashCode * 8191 + ((notUseWalletApproval) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCouponAllowed()) ? 131071 : 524287);
    if (isSetCouponAllowed())
      hashCode = hashCode * 8191 + ((couponAllowed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSkipPrepaid()) ? 131071 : 524287);
    if (isSetSkipPrepaid())
      hashCode = hashCode * 8191 + ((skipPrepaid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetExpectedRoomNightsPerMonth()) ? 131071 : 524287);
    if (isSetExpectedRoomNightsPerMonth())
      hashCode = hashCode * 8191 + expectedRoomNightsPerMonth;

    hashCode = hashCode * 8191 + ((isSetNumberOfEmployees()) ? 131071 : 524287);
    if (isSetNumberOfEmployees())
      hashCode = hashCode * 8191 + numberOfEmployees;

    hashCode = hashCode * 8191 + ((isSetRequireInvoices()) ? 131071 : 524287);
    if (isSetRequireInvoices())
      hashCode = hashCode * 8191 + ((requireInvoices) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDiscount()) ? 131071 : 524287);
    if (isSetDiscount())
      hashCode = hashCode * 8191 + discount;

    hashCode = hashCode * 8191 + ((isSetDiscountType()) ? 131071 : 524287);
    if (isSetDiscountType())
      hashCode = hashCode * 8191 + discountType.getValue();

    hashCode = hashCode * 8191 + ((isSetBillingCycle()) ? 131071 : 524287);
    if (isSetBillingCycle())
      hashCode = hashCode * 8191 + billingCycle.getValue();

    hashCode = hashCode * 8191 + ((isSetIsD2t()) ? 131071 : 524287);
    if (isSetIsD2t())
      hashCode = hashCode * 8191 + ((isD2t) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TAccountConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFixedPricing()).compareTo(other.isSetFixedPricing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedPricing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedPricing, other.fixedPricing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnableBarRates()).compareTo(other.isSetEnableBarRates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableBarRates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableBarRates, other.enableBarRates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsFocValid()).compareTo(other.isSetIsFocValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFocValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFocValid, other.isFocValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsSmartTa()).compareTo(other.isSetIsSmartTa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSmartTa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSmartTa, other.isSmartTa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaSellable()).compareTo(other.isSetTaSellable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaSellable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taSellable, other.taSellable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShouldMarkUpPrice()).compareTo(other.isSetShouldMarkUpPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldMarkUpPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldMarkUpPrice, other.shouldMarkUpPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMarkupFactor()).compareTo(other.isSetMarkupFactor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarkupFactor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.markupFactor, other.markupFactor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHideComissionTa()).compareTo(other.isSetHideComissionTa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHideComissionTa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hideComissionTa, other.hideComissionTa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHidePriceRangeTaPortal()).compareTo(other.isSetHidePriceRangeTaPortal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHidePriceRangeTaPortal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hidePriceRangeTaPortal, other.hidePriceRangeTaPortal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWaiveCancellationCharge()).compareTo(other.isSetWaiveCancellationCharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaiveCancellationCharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waiveCancellationCharge, other.waiveCancellationCharge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSmartTaActivationDate()).compareTo(other.isSetSmartTaActivationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmartTaActivationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smartTaActivationDate, other.smartTaActivationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLimits()).compareTo(other.isSetLimits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limits, other.limits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSmartTaIncentiveValid()).compareTo(other.isSetSmartTaIncentiveValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmartTaIncentiveValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smartTaIncentiveValid, other.smartTaIncentiveValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSmartTaCommission()).compareTo(other.isSetSmartTaCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmartTaCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smartTaCommission, other.smartTaCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBookingApproval()).compareTo(other.isSetBookingApproval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingApproval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingApproval, other.bookingApproval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBookingApprovalDefaultApproved()).compareTo(other.isSetBookingApprovalDefaultApproved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookingApprovalDefaultApproved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookingApprovalDefaultApproved, other.bookingApprovalDefaultApproved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTatForApproval()).compareTo(other.isSetTatForApproval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTatForApproval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tatForApproval, other.tatForApproval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMultiTier()).compareTo(other.isSetMultiTier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiTier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiTier, other.multiTier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPackageVendor()).compareTo(other.isSetPackageVendor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageVendor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageVendor, other.packageVendor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApprovalSubType()).compareTo(other.isSetApprovalSubType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalSubType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalSubType, other.approvalSubType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotUseWalletApproval()).compareTo(other.isSetNotUseWalletApproval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotUseWalletApproval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notUseWalletApproval, other.notUseWalletApproval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCouponAllowed()).compareTo(other.isSetCouponAllowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponAllowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponAllowed, other.couponAllowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSkipPrepaid()).compareTo(other.isSetSkipPrepaid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipPrepaid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skipPrepaid, other.skipPrepaid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpectedRoomNightsPerMonth()).compareTo(other.isSetExpectedRoomNightsPerMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedRoomNightsPerMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedRoomNightsPerMonth, other.expectedRoomNightsPerMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumberOfEmployees()).compareTo(other.isSetNumberOfEmployees());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfEmployees()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfEmployees, other.numberOfEmployees);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequireInvoices()).compareTo(other.isSetRequireInvoices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequireInvoices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requireInvoices, other.requireInvoices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiscount()).compareTo(other.isSetDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, other.discount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiscountType()).compareTo(other.isSetDiscountType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountType, other.discountType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBillingCycle()).compareTo(other.isSetBillingCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBillingCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.billingCycle, other.billingCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsD2t()).compareTo(other.isSetIsD2t());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsD2t()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isD2t, other.isD2t);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAccountConfig(");
    boolean first = true;

    if (isSetFixedPricing()) {
      sb.append("fixedPricing:");
      sb.append(this.fixedPricing);
      first = false;
    }
    if (isSetEnableBarRates()) {
      if (!first) sb.append(", ");
      sb.append("enableBarRates:");
      sb.append(this.enableBarRates);
      first = false;
    }
    if (isSetIsFocValid()) {
      if (!first) sb.append(", ");
      sb.append("isFocValid:");
      sb.append(this.isFocValid);
      first = false;
    }
    if (isSetIsSmartTa()) {
      if (!first) sb.append(", ");
      sb.append("isSmartTa:");
      sb.append(this.isSmartTa);
      first = false;
    }
    if (isSetTaSellable()) {
      if (!first) sb.append(", ");
      sb.append("taSellable:");
      sb.append(this.taSellable);
      first = false;
    }
    if (isSetShouldMarkUpPrice()) {
      if (!first) sb.append(", ");
      sb.append("shouldMarkUpPrice:");
      sb.append(this.shouldMarkUpPrice);
      first = false;
    }
    if (isSetMarkupFactor()) {
      if (!first) sb.append(", ");
      sb.append("markupFactor:");
      sb.append(this.markupFactor);
      first = false;
    }
    if (isSetHideComissionTa()) {
      if (!first) sb.append(", ");
      sb.append("hideComissionTa:");
      sb.append(this.hideComissionTa);
      first = false;
    }
    if (isSetHidePriceRangeTaPortal()) {
      if (!first) sb.append(", ");
      sb.append("hidePriceRangeTaPortal:");
      sb.append(this.hidePriceRangeTaPortal);
      first = false;
    }
    if (isSetWaiveCancellationCharge()) {
      if (!first) sb.append(", ");
      sb.append("waiveCancellationCharge:");
      sb.append(this.waiveCancellationCharge);
      first = false;
    }
    if (isSetSmartTaActivationDate()) {
      if (!first) sb.append(", ");
      sb.append("smartTaActivationDate:");
      if (this.smartTaActivationDate == null) {
        sb.append("null");
      } else {
        sb.append(this.smartTaActivationDate);
      }
      first = false;
    }
    if (isSetLimits()) {
      if (!first) sb.append(", ");
      sb.append("limits:");
      sb.append(this.limits);
      first = false;
    }
    if (isSetSmartTaIncentiveValid()) {
      if (!first) sb.append(", ");
      sb.append("smartTaIncentiveValid:");
      sb.append(this.smartTaIncentiveValid);
      first = false;
    }
    if (isSetSmartTaCommission()) {
      if (!first) sb.append(", ");
      sb.append("smartTaCommission:");
      sb.append(this.smartTaCommission);
      first = false;
    }
    if (isSetBookingApproval()) {
      if (!first) sb.append(", ");
      sb.append("bookingApproval:");
      sb.append(this.bookingApproval);
      first = false;
    }
    if (isSetBookingApprovalDefaultApproved()) {
      if (!first) sb.append(", ");
      sb.append("bookingApprovalDefaultApproved:");
      sb.append(this.bookingApprovalDefaultApproved);
      first = false;
    }
    if (isSetTatForApproval()) {
      if (!first) sb.append(", ");
      sb.append("tatForApproval:");
      sb.append(this.tatForApproval);
      first = false;
    }
    if (isSetMultiTier()) {
      if (!first) sb.append(", ");
      sb.append("multiTier:");
      sb.append(this.multiTier);
      first = false;
    }
    if (isSetPackageVendor()) {
      if (!first) sb.append(", ");
      sb.append("packageVendor:");
      sb.append(this.packageVendor);
      first = false;
    }
    if (isSetApprovalSubType()) {
      if (!first) sb.append(", ");
      sb.append("approvalSubType:");
      if (this.approvalSubType == null) {
        sb.append("null");
      } else {
        sb.append(this.approvalSubType);
      }
      first = false;
    }
    if (isSetNotUseWalletApproval()) {
      if (!first) sb.append(", ");
      sb.append("notUseWalletApproval:");
      sb.append(this.notUseWalletApproval);
      first = false;
    }
    if (isSetCouponAllowed()) {
      if (!first) sb.append(", ");
      sb.append("couponAllowed:");
      sb.append(this.couponAllowed);
      first = false;
    }
    if (isSetSkipPrepaid()) {
      if (!first) sb.append(", ");
      sb.append("skipPrepaid:");
      sb.append(this.skipPrepaid);
      first = false;
    }
    if (isSetExpectedRoomNightsPerMonth()) {
      if (!first) sb.append(", ");
      sb.append("expectedRoomNightsPerMonth:");
      sb.append(this.expectedRoomNightsPerMonth);
      first = false;
    }
    if (isSetNumberOfEmployees()) {
      if (!first) sb.append(", ");
      sb.append("numberOfEmployees:");
      sb.append(this.numberOfEmployees);
      first = false;
    }
    if (isSetRequireInvoices()) {
      if (!first) sb.append(", ");
      sb.append("requireInvoices:");
      sb.append(this.requireInvoices);
      first = false;
    }
    if (isSetDiscount()) {
      if (!first) sb.append(", ");
      sb.append("discount:");
      sb.append(this.discount);
      first = false;
    }
    if (isSetDiscountType()) {
      if (!first) sb.append(", ");
      sb.append("discountType:");
      if (this.discountType == null) {
        sb.append("null");
      } else {
        sb.append(this.discountType);
      }
      first = false;
    }
    if (isSetBillingCycle()) {
      if (!first) sb.append(", ");
      sb.append("billingCycle:");
      if (this.billingCycle == null) {
        sb.append("null");
      } else {
        sb.append(this.billingCycle);
      }
      first = false;
    }
    if (isSetIsD2t()) {
      if (!first) sb.append(", ");
      sb.append("isD2t:");
      sb.append(this.isD2t);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAccountConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAccountConfigStandardScheme getScheme() {
      return new TAccountConfigStandardScheme();
    }
  }

  private static class TAccountConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAccountConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAccountConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIXED_PRICING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fixedPricing = iprot.readBool();
              struct.setFixedPricingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENABLE_BAR_RATES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableBarRates = iprot.readBool();
              struct.setEnableBarRatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_FOC_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFocValid = iprot.readBool();
              struct.setIsFocValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_SMART_TA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSmartTa = iprot.readBool();
              struct.setIsSmartTaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TA_SELLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.taSellable = iprot.readBool();
              struct.setTaSellableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOULD_MARK_UP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.shouldMarkUpPrice = iprot.readBool();
              struct.setShouldMarkUpPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MARKUP_FACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.markupFactor = iprot.readDouble();
              struct.setMarkupFactorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HIDE_COMISSION_TA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hideComissionTa = iprot.readBool();
              struct.setHideComissionTaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HIDE_PRICE_RANGE_TA_PORTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hidePriceRangeTaPortal = iprot.readBool();
              struct.setHidePriceRangeTaPortalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WAIVE_CANCELLATION_CHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.waiveCancellationCharge = iprot.readBool();
              struct.setWaiveCancellationChargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SMART_TA_ACTIVATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smartTaActivationDate = iprot.readString();
              struct.setSmartTaActivationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LIMITS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.limits = iprot.readBool();
              struct.setLimitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SMART_TA_INCENTIVE_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.smartTaIncentiveValid = iprot.readBool();
              struct.setSmartTaIncentiveValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SMART_TA_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.smartTaCommission = iprot.readDouble();
              struct.setSmartTaCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BOOKING_APPROVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bookingApproval = iprot.readBool();
              struct.setBookingApprovalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BOOKING_APPROVAL_DEFAULT_APPROVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bookingApprovalDefaultApproved = iprot.readBool();
              struct.setBookingApprovalDefaultApprovedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TAT_FOR_APPROVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tatForApproval = iprot.readI32();
              struct.setTatForApprovalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MULTI_TIER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.multiTier = iprot.readBool();
              struct.setMultiTierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PACKAGE_VENDOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.packageVendor = iprot.readBool();
              struct.setPackageVendorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // APPROVAL_SUB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalSubType = iprot.readString();
              struct.setApprovalSubTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NOT_USE_WALLET_APPROVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notUseWalletApproval = iprot.readBool();
              struct.setNotUseWalletApprovalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // COUPON_ALLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.couponAllowed = iprot.readBool();
              struct.setCouponAllowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SKIP_PREPAID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skipPrepaid = iprot.readBool();
              struct.setSkipPrepaidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // EXPECTED_ROOM_NIGHTS_PER_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expectedRoomNightsPerMonth = iprot.readI32();
              struct.setExpectedRoomNightsPerMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // NUMBER_OF_EMPLOYEES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfEmployees = iprot.readI32();
              struct.setNumberOfEmployeesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REQUIRE_INVOICES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.requireInvoices = iprot.readBool();
              struct.setRequireInvoicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.discount = iprot.readI32();
              struct.setDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DISCOUNT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.discountType = com.oyo.mm.channel.accountmanagement.TDiscountType.findByValue(iprot.readI32());
              struct.setDiscountTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // BILLING_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.billingCycle = com.oyo.mm.channel.accountmanagement.TBillingCycle.findByValue(iprot.readI32());
              struct.setBillingCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // IS_D2T
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isD2t = iprot.readBool();
              struct.setIsD2tIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAccountConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFixedPricing()) {
        oprot.writeFieldBegin(FIXED_PRICING_FIELD_DESC);
        oprot.writeBool(struct.fixedPricing);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableBarRates()) {
        oprot.writeFieldBegin(ENABLE_BAR_RATES_FIELD_DESC);
        oprot.writeBool(struct.enableBarRates);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsFocValid()) {
        oprot.writeFieldBegin(IS_FOC_VALID_FIELD_DESC);
        oprot.writeBool(struct.isFocValid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsSmartTa()) {
        oprot.writeFieldBegin(IS_SMART_TA_FIELD_DESC);
        oprot.writeBool(struct.isSmartTa);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTaSellable()) {
        oprot.writeFieldBegin(TA_SELLABLE_FIELD_DESC);
        oprot.writeBool(struct.taSellable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShouldMarkUpPrice()) {
        oprot.writeFieldBegin(SHOULD_MARK_UP_PRICE_FIELD_DESC);
        oprot.writeBool(struct.shouldMarkUpPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMarkupFactor()) {
        oprot.writeFieldBegin(MARKUP_FACTOR_FIELD_DESC);
        oprot.writeDouble(struct.markupFactor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHideComissionTa()) {
        oprot.writeFieldBegin(HIDE_COMISSION_TA_FIELD_DESC);
        oprot.writeBool(struct.hideComissionTa);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHidePriceRangeTaPortal()) {
        oprot.writeFieldBegin(HIDE_PRICE_RANGE_TA_PORTAL_FIELD_DESC);
        oprot.writeBool(struct.hidePriceRangeTaPortal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWaiveCancellationCharge()) {
        oprot.writeFieldBegin(WAIVE_CANCELLATION_CHARGE_FIELD_DESC);
        oprot.writeBool(struct.waiveCancellationCharge);
        oprot.writeFieldEnd();
      }
      if (struct.smartTaActivationDate != null) {
        if (struct.isSetSmartTaActivationDate()) {
          oprot.writeFieldBegin(SMART_TA_ACTIVATION_DATE_FIELD_DESC);
          oprot.writeString(struct.smartTaActivationDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimits()) {
        oprot.writeFieldBegin(LIMITS_FIELD_DESC);
        oprot.writeBool(struct.limits);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSmartTaIncentiveValid()) {
        oprot.writeFieldBegin(SMART_TA_INCENTIVE_VALID_FIELD_DESC);
        oprot.writeBool(struct.smartTaIncentiveValid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSmartTaCommission()) {
        oprot.writeFieldBegin(SMART_TA_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.smartTaCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBookingApproval()) {
        oprot.writeFieldBegin(BOOKING_APPROVAL_FIELD_DESC);
        oprot.writeBool(struct.bookingApproval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBookingApprovalDefaultApproved()) {
        oprot.writeFieldBegin(BOOKING_APPROVAL_DEFAULT_APPROVED_FIELD_DESC);
        oprot.writeBool(struct.bookingApprovalDefaultApproved);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTatForApproval()) {
        oprot.writeFieldBegin(TAT_FOR_APPROVAL_FIELD_DESC);
        oprot.writeI32(struct.tatForApproval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMultiTier()) {
        oprot.writeFieldBegin(MULTI_TIER_FIELD_DESC);
        oprot.writeBool(struct.multiTier);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPackageVendor()) {
        oprot.writeFieldBegin(PACKAGE_VENDOR_FIELD_DESC);
        oprot.writeBool(struct.packageVendor);
        oprot.writeFieldEnd();
      }
      if (struct.approvalSubType != null) {
        if (struct.isSetApprovalSubType()) {
          oprot.writeFieldBegin(APPROVAL_SUB_TYPE_FIELD_DESC);
          oprot.writeString(struct.approvalSubType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNotUseWalletApproval()) {
        oprot.writeFieldBegin(NOT_USE_WALLET_APPROVAL_FIELD_DESC);
        oprot.writeBool(struct.notUseWalletApproval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCouponAllowed()) {
        oprot.writeFieldBegin(COUPON_ALLOWED_FIELD_DESC);
        oprot.writeBool(struct.couponAllowed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkipPrepaid()) {
        oprot.writeFieldBegin(SKIP_PREPAID_FIELD_DESC);
        oprot.writeBool(struct.skipPrepaid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpectedRoomNightsPerMonth()) {
        oprot.writeFieldBegin(EXPECTED_ROOM_NIGHTS_PER_MONTH_FIELD_DESC);
        oprot.writeI32(struct.expectedRoomNightsPerMonth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumberOfEmployees()) {
        oprot.writeFieldBegin(NUMBER_OF_EMPLOYEES_FIELD_DESC);
        oprot.writeI32(struct.numberOfEmployees);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequireInvoices()) {
        oprot.writeFieldBegin(REQUIRE_INVOICES_FIELD_DESC);
        oprot.writeBool(struct.requireInvoices);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDiscount()) {
        oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
        oprot.writeI32(struct.discount);
        oprot.writeFieldEnd();
      }
      if (struct.discountType != null) {
        if (struct.isSetDiscountType()) {
          oprot.writeFieldBegin(DISCOUNT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.discountType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.billingCycle != null) {
        if (struct.isSetBillingCycle()) {
          oprot.writeFieldBegin(BILLING_CYCLE_FIELD_DESC);
          oprot.writeI32(struct.billingCycle.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsD2t()) {
        oprot.writeFieldBegin(IS_D2T_FIELD_DESC);
        oprot.writeBool(struct.isD2t);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAccountConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAccountConfigTupleScheme getScheme() {
      return new TAccountConfigTupleScheme();
    }
  }

  private static class TAccountConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAccountConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAccountConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFixedPricing()) {
        optionals.set(0);
      }
      if (struct.isSetEnableBarRates()) {
        optionals.set(1);
      }
      if (struct.isSetIsFocValid()) {
        optionals.set(2);
      }
      if (struct.isSetIsSmartTa()) {
        optionals.set(3);
      }
      if (struct.isSetTaSellable()) {
        optionals.set(4);
      }
      if (struct.isSetShouldMarkUpPrice()) {
        optionals.set(5);
      }
      if (struct.isSetMarkupFactor()) {
        optionals.set(6);
      }
      if (struct.isSetHideComissionTa()) {
        optionals.set(7);
      }
      if (struct.isSetHidePriceRangeTaPortal()) {
        optionals.set(8);
      }
      if (struct.isSetWaiveCancellationCharge()) {
        optionals.set(9);
      }
      if (struct.isSetSmartTaActivationDate()) {
        optionals.set(10);
      }
      if (struct.isSetLimits()) {
        optionals.set(11);
      }
      if (struct.isSetSmartTaIncentiveValid()) {
        optionals.set(12);
      }
      if (struct.isSetSmartTaCommission()) {
        optionals.set(13);
      }
      if (struct.isSetBookingApproval()) {
        optionals.set(14);
      }
      if (struct.isSetBookingApprovalDefaultApproved()) {
        optionals.set(15);
      }
      if (struct.isSetTatForApproval()) {
        optionals.set(16);
      }
      if (struct.isSetMultiTier()) {
        optionals.set(17);
      }
      if (struct.isSetPackageVendor()) {
        optionals.set(18);
      }
      if (struct.isSetApprovalSubType()) {
        optionals.set(19);
      }
      if (struct.isSetNotUseWalletApproval()) {
        optionals.set(20);
      }
      if (struct.isSetCouponAllowed()) {
        optionals.set(21);
      }
      if (struct.isSetSkipPrepaid()) {
        optionals.set(22);
      }
      if (struct.isSetExpectedRoomNightsPerMonth()) {
        optionals.set(23);
      }
      if (struct.isSetNumberOfEmployees()) {
        optionals.set(24);
      }
      if (struct.isSetRequireInvoices()) {
        optionals.set(25);
      }
      if (struct.isSetDiscount()) {
        optionals.set(26);
      }
      if (struct.isSetDiscountType()) {
        optionals.set(27);
      }
      if (struct.isSetBillingCycle()) {
        optionals.set(28);
      }
      if (struct.isSetIsD2t()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetFixedPricing()) {
        oprot.writeBool(struct.fixedPricing);
      }
      if (struct.isSetEnableBarRates()) {
        oprot.writeBool(struct.enableBarRates);
      }
      if (struct.isSetIsFocValid()) {
        oprot.writeBool(struct.isFocValid);
      }
      if (struct.isSetIsSmartTa()) {
        oprot.writeBool(struct.isSmartTa);
      }
      if (struct.isSetTaSellable()) {
        oprot.writeBool(struct.taSellable);
      }
      if (struct.isSetShouldMarkUpPrice()) {
        oprot.writeBool(struct.shouldMarkUpPrice);
      }
      if (struct.isSetMarkupFactor()) {
        oprot.writeDouble(struct.markupFactor);
      }
      if (struct.isSetHideComissionTa()) {
        oprot.writeBool(struct.hideComissionTa);
      }
      if (struct.isSetHidePriceRangeTaPortal()) {
        oprot.writeBool(struct.hidePriceRangeTaPortal);
      }
      if (struct.isSetWaiveCancellationCharge()) {
        oprot.writeBool(struct.waiveCancellationCharge);
      }
      if (struct.isSetSmartTaActivationDate()) {
        oprot.writeString(struct.smartTaActivationDate);
      }
      if (struct.isSetLimits()) {
        oprot.writeBool(struct.limits);
      }
      if (struct.isSetSmartTaIncentiveValid()) {
        oprot.writeBool(struct.smartTaIncentiveValid);
      }
      if (struct.isSetSmartTaCommission()) {
        oprot.writeDouble(struct.smartTaCommission);
      }
      if (struct.isSetBookingApproval()) {
        oprot.writeBool(struct.bookingApproval);
      }
      if (struct.isSetBookingApprovalDefaultApproved()) {
        oprot.writeBool(struct.bookingApprovalDefaultApproved);
      }
      if (struct.isSetTatForApproval()) {
        oprot.writeI32(struct.tatForApproval);
      }
      if (struct.isSetMultiTier()) {
        oprot.writeBool(struct.multiTier);
      }
      if (struct.isSetPackageVendor()) {
        oprot.writeBool(struct.packageVendor);
      }
      if (struct.isSetApprovalSubType()) {
        oprot.writeString(struct.approvalSubType);
      }
      if (struct.isSetNotUseWalletApproval()) {
        oprot.writeBool(struct.notUseWalletApproval);
      }
      if (struct.isSetCouponAllowed()) {
        oprot.writeBool(struct.couponAllowed);
      }
      if (struct.isSetSkipPrepaid()) {
        oprot.writeBool(struct.skipPrepaid);
      }
      if (struct.isSetExpectedRoomNightsPerMonth()) {
        oprot.writeI32(struct.expectedRoomNightsPerMonth);
      }
      if (struct.isSetNumberOfEmployees()) {
        oprot.writeI32(struct.numberOfEmployees);
      }
      if (struct.isSetRequireInvoices()) {
        oprot.writeBool(struct.requireInvoices);
      }
      if (struct.isSetDiscount()) {
        oprot.writeI32(struct.discount);
      }
      if (struct.isSetDiscountType()) {
        oprot.writeI32(struct.discountType.getValue());
      }
      if (struct.isSetBillingCycle()) {
        oprot.writeI32(struct.billingCycle.getValue());
      }
      if (struct.isSetIsD2t()) {
        oprot.writeBool(struct.isD2t);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAccountConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.fixedPricing = iprot.readBool();
        struct.setFixedPricingIsSet(true);
      }
      if (incoming.get(1)) {
        struct.enableBarRates = iprot.readBool();
        struct.setEnableBarRatesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isFocValid = iprot.readBool();
        struct.setIsFocValidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isSmartTa = iprot.readBool();
        struct.setIsSmartTaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.taSellable = iprot.readBool();
        struct.setTaSellableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shouldMarkUpPrice = iprot.readBool();
        struct.setShouldMarkUpPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.markupFactor = iprot.readDouble();
        struct.setMarkupFactorIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hideComissionTa = iprot.readBool();
        struct.setHideComissionTaIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hidePriceRangeTaPortal = iprot.readBool();
        struct.setHidePriceRangeTaPortalIsSet(true);
      }
      if (incoming.get(9)) {
        struct.waiveCancellationCharge = iprot.readBool();
        struct.setWaiveCancellationChargeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.smartTaActivationDate = iprot.readString();
        struct.setSmartTaActivationDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.limits = iprot.readBool();
        struct.setLimitsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.smartTaIncentiveValid = iprot.readBool();
        struct.setSmartTaIncentiveValidIsSet(true);
      }
      if (incoming.get(13)) {
        struct.smartTaCommission = iprot.readDouble();
        struct.setSmartTaCommissionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bookingApproval = iprot.readBool();
        struct.setBookingApprovalIsSet(true);
      }
      if (incoming.get(15)) {
        struct.bookingApprovalDefaultApproved = iprot.readBool();
        struct.setBookingApprovalDefaultApprovedIsSet(true);
      }
      if (incoming.get(16)) {
        struct.tatForApproval = iprot.readI32();
        struct.setTatForApprovalIsSet(true);
      }
      if (incoming.get(17)) {
        struct.multiTier = iprot.readBool();
        struct.setMultiTierIsSet(true);
      }
      if (incoming.get(18)) {
        struct.packageVendor = iprot.readBool();
        struct.setPackageVendorIsSet(true);
      }
      if (incoming.get(19)) {
        struct.approvalSubType = iprot.readString();
        struct.setApprovalSubTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.notUseWalletApproval = iprot.readBool();
        struct.setNotUseWalletApprovalIsSet(true);
      }
      if (incoming.get(21)) {
        struct.couponAllowed = iprot.readBool();
        struct.setCouponAllowedIsSet(true);
      }
      if (incoming.get(22)) {
        struct.skipPrepaid = iprot.readBool();
        struct.setSkipPrepaidIsSet(true);
      }
      if (incoming.get(23)) {
        struct.expectedRoomNightsPerMonth = iprot.readI32();
        struct.setExpectedRoomNightsPerMonthIsSet(true);
      }
      if (incoming.get(24)) {
        struct.numberOfEmployees = iprot.readI32();
        struct.setNumberOfEmployeesIsSet(true);
      }
      if (incoming.get(25)) {
        struct.requireInvoices = iprot.readBool();
        struct.setRequireInvoicesIsSet(true);
      }
      if (incoming.get(26)) {
        struct.discount = iprot.readI32();
        struct.setDiscountIsSet(true);
      }
      if (incoming.get(27)) {
        struct.discountType = com.oyo.mm.channel.accountmanagement.TDiscountType.findByValue(iprot.readI32());
        struct.setDiscountTypeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.billingCycle = com.oyo.mm.channel.accountmanagement.TBillingCycle.findByValue(iprot.readI32());
        struct.setBillingCycleIsSet(true);
      }
      if (incoming.get(29)) {
        struct.isD2t = iprot.readBool();
        struct.setIsD2tIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

