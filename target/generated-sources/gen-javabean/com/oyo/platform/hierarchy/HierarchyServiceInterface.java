/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.platform.hierarchy;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-03-11")
public class HierarchyServiceInterface {

  public interface Iface {

    public boolean registerHierarchy(java.lang.String nameSpace, java.lang.String name) throws ThriftException, org.apache.thrift.TException;

    public boolean createOrUpdateEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String node, java.util.List<java.lang.String> parents, java.util.List<java.lang.String> children) throws ThriftException, org.apache.thrift.TException;

    public boolean removeEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException;

    public boolean addRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child) throws ThriftException, org.apache.thrift.TException;

    public boolean removeRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child) throws ThriftException, org.apache.thrift.TException;

    public boolean doesNodeExist(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getAncestors(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getImmediateParents(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getDescendants(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getImmediateChildren(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getSiblings(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getHierarchy(java.lang.String nameSpace, java.lang.String hierarchyName) throws ThriftException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerHierarchy(java.lang.String nameSpace, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void createOrUpdateEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String node, java.util.List<java.lang.String> parents, java.util.List<java.lang.String> children, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void removeEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void addRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void removeRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void doesNodeExist(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getAncestors(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getImmediateParents(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getDescendants(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getImmediateChildren(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getSiblings(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getHierarchy(java.lang.String nameSpace, java.lang.String hierarchyName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean registerHierarchy(java.lang.String nameSpace, java.lang.String name) throws ThriftException, org.apache.thrift.TException
    {
      send_registerHierarchy(nameSpace, name);
      return recv_registerHierarchy();
    }

    public void send_registerHierarchy(java.lang.String nameSpace, java.lang.String name) throws org.apache.thrift.TException
    {
      registerHierarchy_args args = new registerHierarchy_args();
      args.setNameSpace(nameSpace);
      args.setName(name);
      sendBase("registerHierarchy", args);
    }

    public boolean recv_registerHierarchy() throws ThriftException, org.apache.thrift.TException
    {
      registerHierarchy_result result = new registerHierarchy_result();
      receiveBase(result, "registerHierarchy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerHierarchy failed: unknown result");
    }

    public boolean createOrUpdateEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String node, java.util.List<java.lang.String> parents, java.util.List<java.lang.String> children) throws ThriftException, org.apache.thrift.TException
    {
      send_createOrUpdateEntity(nameSpace, hierarchyName, node, parents, children);
      return recv_createOrUpdateEntity();
    }

    public void send_createOrUpdateEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String node, java.util.List<java.lang.String> parents, java.util.List<java.lang.String> children) throws org.apache.thrift.TException
    {
      createOrUpdateEntity_args args = new createOrUpdateEntity_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setNode(node);
      args.setParents(parents);
      args.setChildren(children);
      sendBase("createOrUpdateEntity", args);
    }

    public boolean recv_createOrUpdateEntity() throws ThriftException, org.apache.thrift.TException
    {
      createOrUpdateEntity_result result = new createOrUpdateEntity_result();
      receiveBase(result, "createOrUpdateEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOrUpdateEntity failed: unknown result");
    }

    public boolean removeEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException
    {
      send_removeEntity(nameSpace, hierarchyName, name);
      return recv_removeEntity();
    }

    public void send_removeEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws org.apache.thrift.TException
    {
      removeEntity_args args = new removeEntity_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setName(name);
      sendBase("removeEntity", args);
    }

    public boolean recv_removeEntity() throws ThriftException, org.apache.thrift.TException
    {
      removeEntity_result result = new removeEntity_result();
      receiveBase(result, "removeEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeEntity failed: unknown result");
    }

    public boolean addRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child) throws ThriftException, org.apache.thrift.TException
    {
      send_addRelation(nameSpace, hierarchyName, parent, child);
      return recv_addRelation();
    }

    public void send_addRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child) throws org.apache.thrift.TException
    {
      addRelation_args args = new addRelation_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setParent(parent);
      args.setChild(child);
      sendBase("addRelation", args);
    }

    public boolean recv_addRelation() throws ThriftException, org.apache.thrift.TException
    {
      addRelation_result result = new addRelation_result();
      receiveBase(result, "addRelation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRelation failed: unknown result");
    }

    public boolean removeRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child) throws ThriftException, org.apache.thrift.TException
    {
      send_removeRelation(nameSpace, hierarchyName, parent, child);
      return recv_removeRelation();
    }

    public void send_removeRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child) throws org.apache.thrift.TException
    {
      removeRelation_args args = new removeRelation_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setParent(parent);
      args.setChild(child);
      sendBase("removeRelation", args);
    }

    public boolean recv_removeRelation() throws ThriftException, org.apache.thrift.TException
    {
      removeRelation_result result = new removeRelation_result();
      receiveBase(result, "removeRelation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeRelation failed: unknown result");
    }

    public boolean doesNodeExist(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException
    {
      send_doesNodeExist(nameSpace, hierarchyName, name);
      return recv_doesNodeExist();
    }

    public void send_doesNodeExist(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws org.apache.thrift.TException
    {
      doesNodeExist_args args = new doesNodeExist_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setName(name);
      sendBase("doesNodeExist", args);
    }

    public boolean recv_doesNodeExist() throws ThriftException, org.apache.thrift.TException
    {
      doesNodeExist_result result = new doesNodeExist_result();
      receiveBase(result, "doesNodeExist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doesNodeExist failed: unknown result");
    }

    public java.util.List<java.lang.String> getAncestors(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException
    {
      send_getAncestors(nameSpace, hierarchyName, name);
      return recv_getAncestors();
    }

    public void send_getAncestors(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws org.apache.thrift.TException
    {
      getAncestors_args args = new getAncestors_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setName(name);
      sendBase("getAncestors", args);
    }

    public java.util.List<java.lang.String> recv_getAncestors() throws ThriftException, org.apache.thrift.TException
    {
      getAncestors_result result = new getAncestors_result();
      receiveBase(result, "getAncestors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAncestors failed: unknown result");
    }

    public java.util.List<java.lang.String> getImmediateParents(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException
    {
      send_getImmediateParents(nameSpace, hierarchyName, name);
      return recv_getImmediateParents();
    }

    public void send_getImmediateParents(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws org.apache.thrift.TException
    {
      getImmediateParents_args args = new getImmediateParents_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setName(name);
      sendBase("getImmediateParents", args);
    }

    public java.util.List<java.lang.String> recv_getImmediateParents() throws ThriftException, org.apache.thrift.TException
    {
      getImmediateParents_result result = new getImmediateParents_result();
      receiveBase(result, "getImmediateParents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getImmediateParents failed: unknown result");
    }

    public java.util.List<java.lang.String> getDescendants(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException
    {
      send_getDescendants(nameSpace, hierarchyName, name);
      return recv_getDescendants();
    }

    public void send_getDescendants(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws org.apache.thrift.TException
    {
      getDescendants_args args = new getDescendants_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setName(name);
      sendBase("getDescendants", args);
    }

    public java.util.List<java.lang.String> recv_getDescendants() throws ThriftException, org.apache.thrift.TException
    {
      getDescendants_result result = new getDescendants_result();
      receiveBase(result, "getDescendants");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDescendants failed: unknown result");
    }

    public java.util.List<java.lang.String> getImmediateChildren(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException
    {
      send_getImmediateChildren(nameSpace, hierarchyName, name);
      return recv_getImmediateChildren();
    }

    public void send_getImmediateChildren(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws org.apache.thrift.TException
    {
      getImmediateChildren_args args = new getImmediateChildren_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setName(name);
      sendBase("getImmediateChildren", args);
    }

    public java.util.List<java.lang.String> recv_getImmediateChildren() throws ThriftException, org.apache.thrift.TException
    {
      getImmediateChildren_result result = new getImmediateChildren_result();
      receiveBase(result, "getImmediateChildren");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getImmediateChildren failed: unknown result");
    }

    public java.util.List<java.lang.String> getSiblings(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws ThriftException, org.apache.thrift.TException
    {
      send_getSiblings(nameSpace, hierarchyName, name);
      return recv_getSiblings();
    }

    public void send_getSiblings(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name) throws org.apache.thrift.TException
    {
      getSiblings_args args = new getSiblings_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      args.setName(name);
      sendBase("getSiblings", args);
    }

    public java.util.List<java.lang.String> recv_getSiblings() throws ThriftException, org.apache.thrift.TException
    {
      getSiblings_result result = new getSiblings_result();
      receiveBase(result, "getSiblings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSiblings failed: unknown result");
    }

    public java.util.List<java.lang.String> getHierarchy(java.lang.String nameSpace, java.lang.String hierarchyName) throws ThriftException, org.apache.thrift.TException
    {
      send_getHierarchy(nameSpace, hierarchyName);
      return recv_getHierarchy();
    }

    public void send_getHierarchy(java.lang.String nameSpace, java.lang.String hierarchyName) throws org.apache.thrift.TException
    {
      getHierarchy_args args = new getHierarchy_args();
      args.setNameSpace(nameSpace);
      args.setHierarchyName(hierarchyName);
      sendBase("getHierarchy", args);
    }

    public java.util.List<java.lang.String> recv_getHierarchy() throws ThriftException, org.apache.thrift.TException
    {
      getHierarchy_result result = new getHierarchy_result();
      receiveBase(result, "getHierarchy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHierarchy failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerHierarchy(java.lang.String nameSpace, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerHierarchy_call method_call = new registerHierarchy_call(nameSpace, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerHierarchy_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String nameSpace;
      private java.lang.String name;
      public registerHierarchy_call(java.lang.String nameSpace, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerHierarchy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerHierarchy_args args = new registerHierarchy_args();
        args.setNameSpace(nameSpace);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerHierarchy();
      }
    }

    public void createOrUpdateEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String node, java.util.List<java.lang.String> parents, java.util.List<java.lang.String> children, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOrUpdateEntity_call method_call = new createOrUpdateEntity_call(nameSpace, hierarchyName, node, parents, children, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOrUpdateEntity_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String node;
      private java.util.List<java.lang.String> parents;
      private java.util.List<java.lang.String> children;
      public createOrUpdateEntity_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String node, java.util.List<java.lang.String> parents, java.util.List<java.lang.String> children, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.node = node;
        this.parents = parents;
        this.children = children;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOrUpdateEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOrUpdateEntity_args args = new createOrUpdateEntity_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setNode(node);
        args.setParents(parents);
        args.setChildren(children);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOrUpdateEntity();
      }
    }

    public void removeEntity(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeEntity_call method_call = new removeEntity_call(nameSpace, hierarchyName, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeEntity_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String name;
      public removeEntity_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeEntity_args args = new removeEntity_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeEntity();
      }
    }

    public void addRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRelation_call method_call = new addRelation_call(nameSpace, hierarchyName, parent, child, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRelation_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String parent;
      private java.lang.String child;
      public addRelation_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.parent = parent;
        this.child = child;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRelation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRelation_args args = new addRelation_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setParent(parent);
        args.setChild(child);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRelation();
      }
    }

    public void removeRelation(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeRelation_call method_call = new removeRelation_call(nameSpace, hierarchyName, parent, child, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeRelation_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String parent;
      private java.lang.String child;
      public removeRelation_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String parent, java.lang.String child, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.parent = parent;
        this.child = child;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeRelation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeRelation_args args = new removeRelation_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setParent(parent);
        args.setChild(child);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeRelation();
      }
    }

    public void doesNodeExist(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doesNodeExist_call method_call = new doesNodeExist_call(nameSpace, hierarchyName, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doesNodeExist_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String name;
      public doesNodeExist_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doesNodeExist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doesNodeExist_args args = new doesNodeExist_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doesNodeExist();
      }
    }

    public void getAncestors(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAncestors_call method_call = new getAncestors_call(nameSpace, hierarchyName, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAncestors_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String name;
      public getAncestors_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAncestors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAncestors_args args = new getAncestors_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAncestors();
      }
    }

    public void getImmediateParents(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getImmediateParents_call method_call = new getImmediateParents_call(nameSpace, hierarchyName, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getImmediateParents_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String name;
      public getImmediateParents_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getImmediateParents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getImmediateParents_args args = new getImmediateParents_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getImmediateParents();
      }
    }

    public void getDescendants(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDescendants_call method_call = new getDescendants_call(nameSpace, hierarchyName, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDescendants_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String name;
      public getDescendants_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDescendants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDescendants_args args = new getDescendants_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDescendants();
      }
    }

    public void getImmediateChildren(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getImmediateChildren_call method_call = new getImmediateChildren_call(nameSpace, hierarchyName, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getImmediateChildren_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String name;
      public getImmediateChildren_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getImmediateChildren", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getImmediateChildren_args args = new getImmediateChildren_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getImmediateChildren();
      }
    }

    public void getSiblings(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSiblings_call method_call = new getSiblings_call(nameSpace, hierarchyName, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSiblings_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      private java.lang.String name;
      public getSiblings_call(java.lang.String nameSpace, java.lang.String hierarchyName, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSiblings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSiblings_args args = new getSiblings_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSiblings();
      }
    }

    public void getHierarchy(java.lang.String nameSpace, java.lang.String hierarchyName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHierarchy_call method_call = new getHierarchy_call(nameSpace, hierarchyName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHierarchy_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String nameSpace;
      private java.lang.String hierarchyName;
      public getHierarchy_call(java.lang.String nameSpace, java.lang.String hierarchyName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nameSpace = nameSpace;
        this.hierarchyName = hierarchyName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHierarchy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHierarchy_args args = new getHierarchy_args();
        args.setNameSpace(nameSpace);
        args.setHierarchyName(hierarchyName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHierarchy();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerHierarchy", new registerHierarchy());
      processMap.put("createOrUpdateEntity", new createOrUpdateEntity());
      processMap.put("removeEntity", new removeEntity());
      processMap.put("addRelation", new addRelation());
      processMap.put("removeRelation", new removeRelation());
      processMap.put("doesNodeExist", new doesNodeExist());
      processMap.put("getAncestors", new getAncestors());
      processMap.put("getImmediateParents", new getImmediateParents());
      processMap.put("getDescendants", new getDescendants());
      processMap.put("getImmediateChildren", new getImmediateChildren());
      processMap.put("getSiblings", new getSiblings());
      processMap.put("getHierarchy", new getHierarchy());
      return processMap;
    }

    public static class registerHierarchy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerHierarchy_args> {
      public registerHierarchy() {
        super("registerHierarchy");
      }

      public registerHierarchy_args getEmptyArgsInstance() {
        return new registerHierarchy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerHierarchy_result getResult(I iface, registerHierarchy_args args) throws org.apache.thrift.TException {
        registerHierarchy_result result = new registerHierarchy_result();
        try {
          result.success = iface.registerHierarchy(args.nameSpace, args.name);
          result.setSuccessIsSet(true);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class createOrUpdateEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOrUpdateEntity_args> {
      public createOrUpdateEntity() {
        super("createOrUpdateEntity");
      }

      public createOrUpdateEntity_args getEmptyArgsInstance() {
        return new createOrUpdateEntity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createOrUpdateEntity_result getResult(I iface, createOrUpdateEntity_args args) throws org.apache.thrift.TException {
        createOrUpdateEntity_result result = new createOrUpdateEntity_result();
        try {
          result.success = iface.createOrUpdateEntity(args.nameSpace, args.hierarchyName, args.node, args.parents, args.children);
          result.setSuccessIsSet(true);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class removeEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeEntity_args> {
      public removeEntity() {
        super("removeEntity");
      }

      public removeEntity_args getEmptyArgsInstance() {
        return new removeEntity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeEntity_result getResult(I iface, removeEntity_args args) throws org.apache.thrift.TException {
        removeEntity_result result = new removeEntity_result();
        try {
          result.success = iface.removeEntity(args.nameSpace, args.hierarchyName, args.name);
          result.setSuccessIsSet(true);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class addRelation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRelation_args> {
      public addRelation() {
        super("addRelation");
      }

      public addRelation_args getEmptyArgsInstance() {
        return new addRelation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRelation_result getResult(I iface, addRelation_args args) throws org.apache.thrift.TException {
        addRelation_result result = new addRelation_result();
        try {
          result.success = iface.addRelation(args.nameSpace, args.hierarchyName, args.parent, args.child);
          result.setSuccessIsSet(true);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class removeRelation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeRelation_args> {
      public removeRelation() {
        super("removeRelation");
      }

      public removeRelation_args getEmptyArgsInstance() {
        return new removeRelation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeRelation_result getResult(I iface, removeRelation_args args) throws org.apache.thrift.TException {
        removeRelation_result result = new removeRelation_result();
        try {
          result.success = iface.removeRelation(args.nameSpace, args.hierarchyName, args.parent, args.child);
          result.setSuccessIsSet(true);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class doesNodeExist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doesNodeExist_args> {
      public doesNodeExist() {
        super("doesNodeExist");
      }

      public doesNodeExist_args getEmptyArgsInstance() {
        return new doesNodeExist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doesNodeExist_result getResult(I iface, doesNodeExist_args args) throws org.apache.thrift.TException {
        doesNodeExist_result result = new doesNodeExist_result();
        try {
          result.success = iface.doesNodeExist(args.nameSpace, args.hierarchyName, args.name);
          result.setSuccessIsSet(true);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class getAncestors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAncestors_args> {
      public getAncestors() {
        super("getAncestors");
      }

      public getAncestors_args getEmptyArgsInstance() {
        return new getAncestors_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAncestors_result getResult(I iface, getAncestors_args args) throws org.apache.thrift.TException {
        getAncestors_result result = new getAncestors_result();
        try {
          result.success = iface.getAncestors(args.nameSpace, args.hierarchyName, args.name);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class getImmediateParents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getImmediateParents_args> {
      public getImmediateParents() {
        super("getImmediateParents");
      }

      public getImmediateParents_args getEmptyArgsInstance() {
        return new getImmediateParents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getImmediateParents_result getResult(I iface, getImmediateParents_args args) throws org.apache.thrift.TException {
        getImmediateParents_result result = new getImmediateParents_result();
        try {
          result.success = iface.getImmediateParents(args.nameSpace, args.hierarchyName, args.name);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class getDescendants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDescendants_args> {
      public getDescendants() {
        super("getDescendants");
      }

      public getDescendants_args getEmptyArgsInstance() {
        return new getDescendants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDescendants_result getResult(I iface, getDescendants_args args) throws org.apache.thrift.TException {
        getDescendants_result result = new getDescendants_result();
        try {
          result.success = iface.getDescendants(args.nameSpace, args.hierarchyName, args.name);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class getImmediateChildren<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getImmediateChildren_args> {
      public getImmediateChildren() {
        super("getImmediateChildren");
      }

      public getImmediateChildren_args getEmptyArgsInstance() {
        return new getImmediateChildren_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getImmediateChildren_result getResult(I iface, getImmediateChildren_args args) throws org.apache.thrift.TException {
        getImmediateChildren_result result = new getImmediateChildren_result();
        try {
          result.success = iface.getImmediateChildren(args.nameSpace, args.hierarchyName, args.name);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class getSiblings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSiblings_args> {
      public getSiblings() {
        super("getSiblings");
      }

      public getSiblings_args getEmptyArgsInstance() {
        return new getSiblings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSiblings_result getResult(I iface, getSiblings_args args) throws org.apache.thrift.TException {
        getSiblings_result result = new getSiblings_result();
        try {
          result.success = iface.getSiblings(args.nameSpace, args.hierarchyName, args.name);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class getHierarchy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHierarchy_args> {
      public getHierarchy() {
        super("getHierarchy");
      }

      public getHierarchy_args getEmptyArgsInstance() {
        return new getHierarchy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHierarchy_result getResult(I iface, getHierarchy_args args) throws org.apache.thrift.TException {
        getHierarchy_result result = new getHierarchy_result();
        try {
          result.success = iface.getHierarchy(args.nameSpace, args.hierarchyName);
        } catch (ThriftException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerHierarchy", new registerHierarchy());
      processMap.put("createOrUpdateEntity", new createOrUpdateEntity());
      processMap.put("removeEntity", new removeEntity());
      processMap.put("addRelation", new addRelation());
      processMap.put("removeRelation", new removeRelation());
      processMap.put("doesNodeExist", new doesNodeExist());
      processMap.put("getAncestors", new getAncestors());
      processMap.put("getImmediateParents", new getImmediateParents());
      processMap.put("getDescendants", new getDescendants());
      processMap.put("getImmediateChildren", new getImmediateChildren());
      processMap.put("getSiblings", new getSiblings());
      processMap.put("getHierarchy", new getHierarchy());
      return processMap;
    }

    public static class registerHierarchy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerHierarchy_args, java.lang.Boolean> {
      public registerHierarchy() {
        super("registerHierarchy");
      }

      public registerHierarchy_args getEmptyArgsInstance() {
        return new registerHierarchy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            registerHierarchy_result result = new registerHierarchy_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registerHierarchy_result result = new registerHierarchy_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerHierarchy_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.registerHierarchy(args.nameSpace, args.name,resultHandler);
      }
    }

    public static class createOrUpdateEntity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOrUpdateEntity_args, java.lang.Boolean> {
      public createOrUpdateEntity() {
        super("createOrUpdateEntity");
      }

      public createOrUpdateEntity_args getEmptyArgsInstance() {
        return new createOrUpdateEntity_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            createOrUpdateEntity_result result = new createOrUpdateEntity_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createOrUpdateEntity_result result = new createOrUpdateEntity_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOrUpdateEntity_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.createOrUpdateEntity(args.nameSpace, args.hierarchyName, args.node, args.parents, args.children,resultHandler);
      }
    }

    public static class removeEntity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeEntity_args, java.lang.Boolean> {
      public removeEntity() {
        super("removeEntity");
      }

      public removeEntity_args getEmptyArgsInstance() {
        return new removeEntity_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            removeEntity_result result = new removeEntity_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeEntity_result result = new removeEntity_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeEntity_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.removeEntity(args.nameSpace, args.hierarchyName, args.name,resultHandler);
      }
    }

    public static class addRelation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRelation_args, java.lang.Boolean> {
      public addRelation() {
        super("addRelation");
      }

      public addRelation_args getEmptyArgsInstance() {
        return new addRelation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            addRelation_result result = new addRelation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addRelation_result result = new addRelation_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRelation_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.addRelation(args.nameSpace, args.hierarchyName, args.parent, args.child,resultHandler);
      }
    }

    public static class removeRelation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeRelation_args, java.lang.Boolean> {
      public removeRelation() {
        super("removeRelation");
      }

      public removeRelation_args getEmptyArgsInstance() {
        return new removeRelation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            removeRelation_result result = new removeRelation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeRelation_result result = new removeRelation_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeRelation_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.removeRelation(args.nameSpace, args.hierarchyName, args.parent, args.child,resultHandler);
      }
    }

    public static class doesNodeExist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doesNodeExist_args, java.lang.Boolean> {
      public doesNodeExist() {
        super("doesNodeExist");
      }

      public doesNodeExist_args getEmptyArgsInstance() {
        return new doesNodeExist_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            doesNodeExist_result result = new doesNodeExist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            doesNodeExist_result result = new doesNodeExist_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doesNodeExist_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.doesNodeExist(args.nameSpace, args.hierarchyName, args.name,resultHandler);
      }
    }

    public static class getAncestors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAncestors_args, java.util.List<java.lang.String>> {
      public getAncestors() {
        super("getAncestors");
      }

      public getAncestors_args getEmptyArgsInstance() {
        return new getAncestors_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getAncestors_result result = new getAncestors_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAncestors_result result = new getAncestors_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAncestors_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getAncestors(args.nameSpace, args.hierarchyName, args.name,resultHandler);
      }
    }

    public static class getImmediateParents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getImmediateParents_args, java.util.List<java.lang.String>> {
      public getImmediateParents() {
        super("getImmediateParents");
      }

      public getImmediateParents_args getEmptyArgsInstance() {
        return new getImmediateParents_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getImmediateParents_result result = new getImmediateParents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getImmediateParents_result result = new getImmediateParents_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getImmediateParents_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getImmediateParents(args.nameSpace, args.hierarchyName, args.name,resultHandler);
      }
    }

    public static class getDescendants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDescendants_args, java.util.List<java.lang.String>> {
      public getDescendants() {
        super("getDescendants");
      }

      public getDescendants_args getEmptyArgsInstance() {
        return new getDescendants_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getDescendants_result result = new getDescendants_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDescendants_result result = new getDescendants_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDescendants_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getDescendants(args.nameSpace, args.hierarchyName, args.name,resultHandler);
      }
    }

    public static class getImmediateChildren<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getImmediateChildren_args, java.util.List<java.lang.String>> {
      public getImmediateChildren() {
        super("getImmediateChildren");
      }

      public getImmediateChildren_args getEmptyArgsInstance() {
        return new getImmediateChildren_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getImmediateChildren_result result = new getImmediateChildren_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getImmediateChildren_result result = new getImmediateChildren_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getImmediateChildren_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getImmediateChildren(args.nameSpace, args.hierarchyName, args.name,resultHandler);
      }
    }

    public static class getSiblings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSiblings_args, java.util.List<java.lang.String>> {
      public getSiblings() {
        super("getSiblings");
      }

      public getSiblings_args getEmptyArgsInstance() {
        return new getSiblings_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getSiblings_result result = new getSiblings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSiblings_result result = new getSiblings_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSiblings_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getSiblings(args.nameSpace, args.hierarchyName, args.name,resultHandler);
      }
    }

    public static class getHierarchy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHierarchy_args, java.util.List<java.lang.String>> {
      public getHierarchy() {
        super("getHierarchy");
      }

      public getHierarchy_args getEmptyArgsInstance() {
        return new getHierarchy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getHierarchy_result result = new getHierarchy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getHierarchy_result result = new getHierarchy_result();
            if (e instanceof ThriftException) {
              result.ise = (ThriftException) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHierarchy_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getHierarchy(args.nameSpace, args.hierarchyName,resultHandler);
      }
    }

  }

  public static class registerHierarchy_args implements org.apache.thrift.TBase<registerHierarchy_args, registerHierarchy_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerHierarchy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerHierarchy_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerHierarchy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerHierarchy_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      NAME((short)2, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerHierarchy_args.class, metaDataMap);
    }

    public registerHierarchy_args() {
    }

    public registerHierarchy_args(
      java.lang.String nameSpace,
      java.lang.String name)
    {
      this();
      this.nameSpace = nameSpace;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerHierarchy_args(registerHierarchy_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public registerHierarchy_args deepCopy() {
      return new registerHierarchy_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.name = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerHierarchy_args)
        return this.equals((registerHierarchy_args)that);
      return false;
    }

    public boolean equals(registerHierarchy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerHierarchy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerHierarchy_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerHierarchy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerHierarchy_argsStandardScheme getScheme() {
        return new registerHierarchy_argsStandardScheme();
      }
    }

    private static class registerHierarchy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerHierarchy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerHierarchy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerHierarchy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerHierarchy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerHierarchy_argsTupleScheme getScheme() {
        return new registerHierarchy_argsTupleScheme();
      }
    }

    private static class registerHierarchy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerHierarchy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerHierarchy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerHierarchy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerHierarchy_result implements org.apache.thrift.TBase<registerHierarchy_result, registerHierarchy_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerHierarchy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerHierarchy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerHierarchy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerHierarchy_resultTupleSchemeFactory();

    private boolean success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerHierarchy_result.class, metaDataMap);
    }

    public registerHierarchy_result() {
    }

    public registerHierarchy_result(
      boolean success,
      ThriftException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerHierarchy_result(registerHierarchy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public registerHierarchy_result deepCopy() {
      return new registerHierarchy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerHierarchy_result)
        return this.equals((registerHierarchy_result)that);
      return false;
    }

    public boolean equals(registerHierarchy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerHierarchy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerHierarchy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerHierarchy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerHierarchy_resultStandardScheme getScheme() {
        return new registerHierarchy_resultStandardScheme();
      }
    }

    private static class registerHierarchy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerHierarchy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerHierarchy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerHierarchy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerHierarchy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerHierarchy_resultTupleScheme getScheme() {
        return new registerHierarchy_resultTupleScheme();
      }
    }

    private static class registerHierarchy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerHierarchy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerHierarchy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerHierarchy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createOrUpdateEntity_args implements org.apache.thrift.TBase<createOrUpdateEntity_args, createOrUpdateEntity_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOrUpdateEntity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrUpdateEntity_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("parents", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("children", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOrUpdateEntity_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOrUpdateEntity_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String node; // required
    private java.util.List<java.lang.String> parents; // required
    private java.util.List<java.lang.String> children; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      NODE((short)3, "node"),
      PARENTS((short)4, "parents"),
      CHILDREN((short)5, "children");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // NODE
            return NODE;
          case 4: // PARENTS
            return PARENTS;
          case 5: // CHILDREN
            return CHILDREN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENTS, new org.apache.thrift.meta_data.FieldMetaData("parents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("children", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrUpdateEntity_args.class, metaDataMap);
    }

    public createOrUpdateEntity_args() {
    }

    public createOrUpdateEntity_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String node,
      java.util.List<java.lang.String> parents,
      java.util.List<java.lang.String> children)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.node = node;
      this.parents = parents;
      this.children = children;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrUpdateEntity_args(createOrUpdateEntity_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetNode()) {
        this.node = other.node;
      }
      if (other.isSetParents()) {
        java.util.List<java.lang.String> __this__parents = new java.util.ArrayList<java.lang.String>(other.parents);
        this.parents = __this__parents;
      }
      if (other.isSetChildren()) {
        java.util.List<java.lang.String> __this__children = new java.util.ArrayList<java.lang.String>(other.children);
        this.children = __this__children;
      }
    }

    public createOrUpdateEntity_args deepCopy() {
      return new createOrUpdateEntity_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.node = null;
      this.parents = null;
      this.children = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getNode() {
      return this.node;
    }

    public void setNode(java.lang.String node) {
      this.node = node;
    }

    public void unsetNode() {
      this.node = null;
    }

    /** Returns true if field node is set (has been assigned a value) and false otherwise */
    public boolean isSetNode() {
      return this.node != null;
    }

    public void setNodeIsSet(boolean value) {
      if (!value) {
        this.node = null;
      }
    }

    public int getParentsSize() {
      return (this.parents == null) ? 0 : this.parents.size();
    }

    public java.util.Iterator<java.lang.String> getParentsIterator() {
      return (this.parents == null) ? null : this.parents.iterator();
    }

    public void addToParents(java.lang.String elem) {
      if (this.parents == null) {
        this.parents = new java.util.ArrayList<java.lang.String>();
      }
      this.parents.add(elem);
    }

    public java.util.List<java.lang.String> getParents() {
      return this.parents;
    }

    public void setParents(java.util.List<java.lang.String> parents) {
      this.parents = parents;
    }

    public void unsetParents() {
      this.parents = null;
    }

    /** Returns true if field parents is set (has been assigned a value) and false otherwise */
    public boolean isSetParents() {
      return this.parents != null;
    }

    public void setParentsIsSet(boolean value) {
      if (!value) {
        this.parents = null;
      }
    }

    public int getChildrenSize() {
      return (this.children == null) ? 0 : this.children.size();
    }

    public java.util.Iterator<java.lang.String> getChildrenIterator() {
      return (this.children == null) ? null : this.children.iterator();
    }

    public void addToChildren(java.lang.String elem) {
      if (this.children == null) {
        this.children = new java.util.ArrayList<java.lang.String>();
      }
      this.children.add(elem);
    }

    public java.util.List<java.lang.String> getChildren() {
      return this.children;
    }

    public void setChildren(java.util.List<java.lang.String> children) {
      this.children = children;
    }

    public void unsetChildren() {
      this.children = null;
    }

    /** Returns true if field children is set (has been assigned a value) and false otherwise */
    public boolean isSetChildren() {
      return this.children != null;
    }

    public void setChildrenIsSet(boolean value) {
      if (!value) {
        this.children = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case NODE:
        if (value == null) {
          unsetNode();
        } else {
          setNode((java.lang.String)value);
        }
        break;

      case PARENTS:
        if (value == null) {
          unsetParents();
        } else {
          setParents((java.util.List<java.lang.String>)value);
        }
        break;

      case CHILDREN:
        if (value == null) {
          unsetChildren();
        } else {
          setChildren((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case NODE:
        return getNode();

      case PARENTS:
        return getParents();

      case CHILDREN:
        return getChildren();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case NODE:
        return isSetNode();
      case PARENTS:
        return isSetParents();
      case CHILDREN:
        return isSetChildren();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrUpdateEntity_args)
        return this.equals((createOrUpdateEntity_args)that);
      return false;
    }

    public boolean equals(createOrUpdateEntity_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_node = true && this.isSetNode();
      boolean that_present_node = true && that.isSetNode();
      if (this_present_node || that_present_node) {
        if (!(this_present_node && that_present_node))
          return false;
        if (!this.node.equals(that.node))
          return false;
      }

      boolean this_present_parents = true && this.isSetParents();
      boolean that_present_parents = true && that.isSetParents();
      if (this_present_parents || that_present_parents) {
        if (!(this_present_parents && that_present_parents))
          return false;
        if (!this.parents.equals(that.parents))
          return false;
      }

      boolean this_present_children = true && this.isSetChildren();
      boolean that_present_children = true && that.isSetChildren();
      if (this_present_children || that_present_children) {
        if (!(this_present_children && that_present_children))
          return false;
        if (!this.children.equals(that.children))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetNode()) ? 131071 : 524287);
      if (isSetNode())
        hashCode = hashCode * 8191 + node.hashCode();

      hashCode = hashCode * 8191 + ((isSetParents()) ? 131071 : 524287);
      if (isSetParents())
        hashCode = hashCode * 8191 + parents.hashCode();

      hashCode = hashCode * 8191 + ((isSetChildren()) ? 131071 : 524287);
      if (isSetChildren())
        hashCode = hashCode * 8191 + children.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOrUpdateEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNode()).compareTo(other.isSetNode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParents()).compareTo(other.isSetParents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parents, other.parents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChildren()).compareTo(other.isSetChildren());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChildren()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.children, other.children);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOrUpdateEntity_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("node:");
      if (this.node == null) {
        sb.append("null");
      } else {
        sb.append(this.node);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parents:");
      if (this.parents == null) {
        sb.append("null");
      } else {
        sb.append(this.parents);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("children:");
      if (this.children == null) {
        sb.append("null");
      } else {
        sb.append(this.children);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrUpdateEntity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOrUpdateEntity_argsStandardScheme getScheme() {
        return new createOrUpdateEntity_argsStandardScheme();
      }
    }

    private static class createOrUpdateEntity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOrUpdateEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrUpdateEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.node = iprot.readString();
                struct.setNodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.parents = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.parents.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setParentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CHILDREN
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.children = new java.util.ArrayList<java.lang.String>(_list3.size);
                  java.lang.String _elem4;
                  for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                  {
                    _elem4 = iprot.readString();
                    struct.children.add(_elem4);
                  }
                  iprot.readListEnd();
                }
                struct.setChildrenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrUpdateEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.node != null) {
          oprot.writeFieldBegin(NODE_FIELD_DESC);
          oprot.writeString(struct.node);
          oprot.writeFieldEnd();
        }
        if (struct.parents != null) {
          oprot.writeFieldBegin(PARENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.parents.size()));
            for (java.lang.String _iter6 : struct.parents)
            {
              oprot.writeString(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.children != null) {
          oprot.writeFieldBegin(CHILDREN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.children.size()));
            for (java.lang.String _iter7 : struct.children)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrUpdateEntity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOrUpdateEntity_argsTupleScheme getScheme() {
        return new createOrUpdateEntity_argsTupleScheme();
      }
    }

    private static class createOrUpdateEntity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOrUpdateEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrUpdateEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetNode()) {
          optionals.set(2);
        }
        if (struct.isSetParents()) {
          optionals.set(3);
        }
        if (struct.isSetChildren()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetNode()) {
          oprot.writeString(struct.node);
        }
        if (struct.isSetParents()) {
          {
            oprot.writeI32(struct.parents.size());
            for (java.lang.String _iter8 : struct.parents)
            {
              oprot.writeString(_iter8);
            }
          }
        }
        if (struct.isSetChildren()) {
          {
            oprot.writeI32(struct.children.size());
            for (java.lang.String _iter9 : struct.children)
            {
              oprot.writeString(_iter9);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrUpdateEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.node = iprot.readString();
          struct.setNodeIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.parents = new java.util.ArrayList<java.lang.String>(_list10.size);
            java.lang.String _elem11;
            for (int _i12 = 0; _i12 < _list10.size; ++_i12)
            {
              _elem11 = iprot.readString();
              struct.parents.add(_elem11);
            }
          }
          struct.setParentsIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.children = new java.util.ArrayList<java.lang.String>(_list13.size);
            java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.children.add(_elem14);
            }
          }
          struct.setChildrenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createOrUpdateEntity_result implements org.apache.thrift.TBase<createOrUpdateEntity_result, createOrUpdateEntity_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOrUpdateEntity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrUpdateEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOrUpdateEntity_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOrUpdateEntity_resultTupleSchemeFactory();

    private boolean success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrUpdateEntity_result.class, metaDataMap);
    }

    public createOrUpdateEntity_result() {
    }

    public createOrUpdateEntity_result(
      boolean success,
      ThriftException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrUpdateEntity_result(createOrUpdateEntity_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public createOrUpdateEntity_result deepCopy() {
      return new createOrUpdateEntity_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrUpdateEntity_result)
        return this.equals((createOrUpdateEntity_result)that);
      return false;
    }

    public boolean equals(createOrUpdateEntity_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOrUpdateEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOrUpdateEntity_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrUpdateEntity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOrUpdateEntity_resultStandardScheme getScheme() {
        return new createOrUpdateEntity_resultStandardScheme();
      }
    }

    private static class createOrUpdateEntity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOrUpdateEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrUpdateEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrUpdateEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrUpdateEntity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOrUpdateEntity_resultTupleScheme getScheme() {
        return new createOrUpdateEntity_resultTupleScheme();
      }
    }

    private static class createOrUpdateEntity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOrUpdateEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrUpdateEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrUpdateEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeEntity_args implements org.apache.thrift.TBase<removeEntity_args, removeEntity_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeEntity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeEntity_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeEntity_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeEntity_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      NAME((short)3, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeEntity_args.class, metaDataMap);
    }

    public removeEntity_args() {
    }

    public removeEntity_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String name)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeEntity_args(removeEntity_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public removeEntity_args deepCopy() {
      return new removeEntity_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.name = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeEntity_args)
        return this.equals((removeEntity_args)that);
      return false;
    }

    public boolean equals(removeEntity_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeEntity_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeEntity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeEntity_argsStandardScheme getScheme() {
        return new removeEntity_argsStandardScheme();
      }
    }

    private static class removeEntity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeEntity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeEntity_argsTupleScheme getScheme() {
        return new removeEntity_argsTupleScheme();
      }
    }

    private static class removeEntity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeEntity_result implements org.apache.thrift.TBase<removeEntity_result, removeEntity_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeEntity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeEntity_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeEntity_resultTupleSchemeFactory();

    private boolean success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeEntity_result.class, metaDataMap);
    }

    public removeEntity_result() {
    }

    public removeEntity_result(
      boolean success,
      ThriftException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeEntity_result(removeEntity_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public removeEntity_result deepCopy() {
      return new removeEntity_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeEntity_result)
        return this.equals((removeEntity_result)that);
      return false;
    }

    public boolean equals(removeEntity_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeEntity_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeEntity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeEntity_resultStandardScheme getScheme() {
        return new removeEntity_resultStandardScheme();
      }
    }

    private static class removeEntity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeEntity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeEntity_resultTupleScheme getScheme() {
        return new removeEntity_resultTupleScheme();
      }
    }

    private static class removeEntity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addRelation_args implements org.apache.thrift.TBase<addRelation_args, addRelation_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRelation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRelation_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("parent", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("child", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addRelation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addRelation_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String parent; // required
    private java.lang.String child; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      PARENT((short)3, "parent"),
      CHILD((short)4, "child");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // PARENT
            return PARENT;
          case 4: // CHILD
            return CHILD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT, new org.apache.thrift.meta_data.FieldMetaData("parent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHILD, new org.apache.thrift.meta_data.FieldMetaData("child", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRelation_args.class, metaDataMap);
    }

    public addRelation_args() {
    }

    public addRelation_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String parent,
      java.lang.String child)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.parent = parent;
      this.child = child;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRelation_args(addRelation_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetParent()) {
        this.parent = other.parent;
      }
      if (other.isSetChild()) {
        this.child = other.child;
      }
    }

    public addRelation_args deepCopy() {
      return new addRelation_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.parent = null;
      this.child = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getParent() {
      return this.parent;
    }

    public void setParent(java.lang.String parent) {
      this.parent = parent;
    }

    public void unsetParent() {
      this.parent = null;
    }

    /** Returns true if field parent is set (has been assigned a value) and false otherwise */
    public boolean isSetParent() {
      return this.parent != null;
    }

    public void setParentIsSet(boolean value) {
      if (!value) {
        this.parent = null;
      }
    }

    public java.lang.String getChild() {
      return this.child;
    }

    public void setChild(java.lang.String child) {
      this.child = child;
    }

    public void unsetChild() {
      this.child = null;
    }

    /** Returns true if field child is set (has been assigned a value) and false otherwise */
    public boolean isSetChild() {
      return this.child != null;
    }

    public void setChildIsSet(boolean value) {
      if (!value) {
        this.child = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case PARENT:
        if (value == null) {
          unsetParent();
        } else {
          setParent((java.lang.String)value);
        }
        break;

      case CHILD:
        if (value == null) {
          unsetChild();
        } else {
          setChild((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case PARENT:
        return getParent();

      case CHILD:
        return getChild();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case PARENT:
        return isSetParent();
      case CHILD:
        return isSetChild();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addRelation_args)
        return this.equals((addRelation_args)that);
      return false;
    }

    public boolean equals(addRelation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_parent = true && this.isSetParent();
      boolean that_present_parent = true && that.isSetParent();
      if (this_present_parent || that_present_parent) {
        if (!(this_present_parent && that_present_parent))
          return false;
        if (!this.parent.equals(that.parent))
          return false;
      }

      boolean this_present_child = true && this.isSetChild();
      boolean that_present_child = true && that.isSetChild();
      if (this_present_child || that_present_child) {
        if (!(this_present_child && that_present_child))
          return false;
        if (!this.child.equals(that.child))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetParent()) ? 131071 : 524287);
      if (isSetParent())
        hashCode = hashCode * 8191 + parent.hashCode();

      hashCode = hashCode * 8191 + ((isSetChild()) ? 131071 : 524287);
      if (isSetChild())
        hashCode = hashCode * 8191 + child.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addRelation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParent()).compareTo(other.isSetParent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent, other.parent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChild()).compareTo(other.isSetChild());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChild()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.child, other.child);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addRelation_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parent:");
      if (this.parent == null) {
        sb.append("null");
      } else {
        sb.append(this.parent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("child:");
      if (this.child == null) {
        sb.append("null");
      } else {
        sb.append(this.child);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRelation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addRelation_argsStandardScheme getScheme() {
        return new addRelation_argsStandardScheme();
      }
    }

    private static class addRelation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addRelation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRelation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parent = iprot.readString();
                struct.setParentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHILD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.child = iprot.readString();
                struct.setChildIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRelation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.parent != null) {
          oprot.writeFieldBegin(PARENT_FIELD_DESC);
          oprot.writeString(struct.parent);
          oprot.writeFieldEnd();
        }
        if (struct.child != null) {
          oprot.writeFieldBegin(CHILD_FIELD_DESC);
          oprot.writeString(struct.child);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRelation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addRelation_argsTupleScheme getScheme() {
        return new addRelation_argsTupleScheme();
      }
    }

    private static class addRelation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addRelation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRelation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetParent()) {
          optionals.set(2);
        }
        if (struct.isSetChild()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetParent()) {
          oprot.writeString(struct.parent);
        }
        if (struct.isSetChild()) {
          oprot.writeString(struct.child);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRelation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parent = iprot.readString();
          struct.setParentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.child = iprot.readString();
          struct.setChildIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addRelation_result implements org.apache.thrift.TBase<addRelation_result, addRelation_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRelation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRelation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addRelation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addRelation_resultTupleSchemeFactory();

    private boolean success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRelation_result.class, metaDataMap);
    }

    public addRelation_result() {
    }

    public addRelation_result(
      boolean success,
      ThriftException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRelation_result(addRelation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public addRelation_result deepCopy() {
      return new addRelation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addRelation_result)
        return this.equals((addRelation_result)that);
      return false;
    }

    public boolean equals(addRelation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addRelation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addRelation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRelation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addRelation_resultStandardScheme getScheme() {
        return new addRelation_resultStandardScheme();
      }
    }

    private static class addRelation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addRelation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRelation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRelation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRelation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addRelation_resultTupleScheme getScheme() {
        return new addRelation_resultTupleScheme();
      }
    }

    private static class addRelation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addRelation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRelation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRelation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeRelation_args implements org.apache.thrift.TBase<removeRelation_args, removeRelation_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeRelation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeRelation_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("parent", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("child", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeRelation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeRelation_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String parent; // required
    private java.lang.String child; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      PARENT((short)3, "parent"),
      CHILD((short)4, "child");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // PARENT
            return PARENT;
          case 4: // CHILD
            return CHILD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT, new org.apache.thrift.meta_data.FieldMetaData("parent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHILD, new org.apache.thrift.meta_data.FieldMetaData("child", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeRelation_args.class, metaDataMap);
    }

    public removeRelation_args() {
    }

    public removeRelation_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String parent,
      java.lang.String child)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.parent = parent;
      this.child = child;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeRelation_args(removeRelation_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetParent()) {
        this.parent = other.parent;
      }
      if (other.isSetChild()) {
        this.child = other.child;
      }
    }

    public removeRelation_args deepCopy() {
      return new removeRelation_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.parent = null;
      this.child = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getParent() {
      return this.parent;
    }

    public void setParent(java.lang.String parent) {
      this.parent = parent;
    }

    public void unsetParent() {
      this.parent = null;
    }

    /** Returns true if field parent is set (has been assigned a value) and false otherwise */
    public boolean isSetParent() {
      return this.parent != null;
    }

    public void setParentIsSet(boolean value) {
      if (!value) {
        this.parent = null;
      }
    }

    public java.lang.String getChild() {
      return this.child;
    }

    public void setChild(java.lang.String child) {
      this.child = child;
    }

    public void unsetChild() {
      this.child = null;
    }

    /** Returns true if field child is set (has been assigned a value) and false otherwise */
    public boolean isSetChild() {
      return this.child != null;
    }

    public void setChildIsSet(boolean value) {
      if (!value) {
        this.child = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case PARENT:
        if (value == null) {
          unsetParent();
        } else {
          setParent((java.lang.String)value);
        }
        break;

      case CHILD:
        if (value == null) {
          unsetChild();
        } else {
          setChild((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case PARENT:
        return getParent();

      case CHILD:
        return getChild();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case PARENT:
        return isSetParent();
      case CHILD:
        return isSetChild();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeRelation_args)
        return this.equals((removeRelation_args)that);
      return false;
    }

    public boolean equals(removeRelation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_parent = true && this.isSetParent();
      boolean that_present_parent = true && that.isSetParent();
      if (this_present_parent || that_present_parent) {
        if (!(this_present_parent && that_present_parent))
          return false;
        if (!this.parent.equals(that.parent))
          return false;
      }

      boolean this_present_child = true && this.isSetChild();
      boolean that_present_child = true && that.isSetChild();
      if (this_present_child || that_present_child) {
        if (!(this_present_child && that_present_child))
          return false;
        if (!this.child.equals(that.child))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetParent()) ? 131071 : 524287);
      if (isSetParent())
        hashCode = hashCode * 8191 + parent.hashCode();

      hashCode = hashCode * 8191 + ((isSetChild()) ? 131071 : 524287);
      if (isSetChild())
        hashCode = hashCode * 8191 + child.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeRelation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParent()).compareTo(other.isSetParent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent, other.parent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChild()).compareTo(other.isSetChild());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChild()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.child, other.child);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeRelation_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parent:");
      if (this.parent == null) {
        sb.append("null");
      } else {
        sb.append(this.parent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("child:");
      if (this.child == null) {
        sb.append("null");
      } else {
        sb.append(this.child);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeRelation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeRelation_argsStandardScheme getScheme() {
        return new removeRelation_argsStandardScheme();
      }
    }

    private static class removeRelation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeRelation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeRelation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parent = iprot.readString();
                struct.setParentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHILD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.child = iprot.readString();
                struct.setChildIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeRelation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.parent != null) {
          oprot.writeFieldBegin(PARENT_FIELD_DESC);
          oprot.writeString(struct.parent);
          oprot.writeFieldEnd();
        }
        if (struct.child != null) {
          oprot.writeFieldBegin(CHILD_FIELD_DESC);
          oprot.writeString(struct.child);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeRelation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeRelation_argsTupleScheme getScheme() {
        return new removeRelation_argsTupleScheme();
      }
    }

    private static class removeRelation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeRelation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeRelation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetParent()) {
          optionals.set(2);
        }
        if (struct.isSetChild()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetParent()) {
          oprot.writeString(struct.parent);
        }
        if (struct.isSetChild()) {
          oprot.writeString(struct.child);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeRelation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parent = iprot.readString();
          struct.setParentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.child = iprot.readString();
          struct.setChildIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeRelation_result implements org.apache.thrift.TBase<removeRelation_result, removeRelation_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeRelation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeRelation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeRelation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeRelation_resultTupleSchemeFactory();

    private boolean success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeRelation_result.class, metaDataMap);
    }

    public removeRelation_result() {
    }

    public removeRelation_result(
      boolean success,
      ThriftException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeRelation_result(removeRelation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public removeRelation_result deepCopy() {
      return new removeRelation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeRelation_result)
        return this.equals((removeRelation_result)that);
      return false;
    }

    public boolean equals(removeRelation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeRelation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeRelation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeRelation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeRelation_resultStandardScheme getScheme() {
        return new removeRelation_resultStandardScheme();
      }
    }

    private static class removeRelation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeRelation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeRelation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeRelation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeRelation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeRelation_resultTupleScheme getScheme() {
        return new removeRelation_resultTupleScheme();
      }
    }

    private static class removeRelation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeRelation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeRelation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeRelation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class doesNodeExist_args implements org.apache.thrift.TBase<doesNodeExist_args, doesNodeExist_args._Fields>, java.io.Serializable, Cloneable, Comparable<doesNodeExist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doesNodeExist_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new doesNodeExist_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new doesNodeExist_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      NAME((short)3, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doesNodeExist_args.class, metaDataMap);
    }

    public doesNodeExist_args() {
    }

    public doesNodeExist_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String name)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doesNodeExist_args(doesNodeExist_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public doesNodeExist_args deepCopy() {
      return new doesNodeExist_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.name = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof doesNodeExist_args)
        return this.equals((doesNodeExist_args)that);
      return false;
    }

    public boolean equals(doesNodeExist_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(doesNodeExist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("doesNodeExist_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doesNodeExist_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public doesNodeExist_argsStandardScheme getScheme() {
        return new doesNodeExist_argsStandardScheme();
      }
    }

    private static class doesNodeExist_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<doesNodeExist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doesNodeExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doesNodeExist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doesNodeExist_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public doesNodeExist_argsTupleScheme getScheme() {
        return new doesNodeExist_argsTupleScheme();
      }
    }

    private static class doesNodeExist_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<doesNodeExist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doesNodeExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doesNodeExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class doesNodeExist_result implements org.apache.thrift.TBase<doesNodeExist_result, doesNodeExist_result._Fields>, java.io.Serializable, Cloneable, Comparable<doesNodeExist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doesNodeExist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new doesNodeExist_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new doesNodeExist_resultTupleSchemeFactory();

    private boolean success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doesNodeExist_result.class, metaDataMap);
    }

    public doesNodeExist_result() {
    }

    public doesNodeExist_result(
      boolean success,
      ThriftException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doesNodeExist_result(doesNodeExist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public doesNodeExist_result deepCopy() {
      return new doesNodeExist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof doesNodeExist_result)
        return this.equals((doesNodeExist_result)that);
      return false;
    }

    public boolean equals(doesNodeExist_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(doesNodeExist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("doesNodeExist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doesNodeExist_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public doesNodeExist_resultStandardScheme getScheme() {
        return new doesNodeExist_resultStandardScheme();
      }
    }

    private static class doesNodeExist_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<doesNodeExist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doesNodeExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doesNodeExist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doesNodeExist_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public doesNodeExist_resultTupleScheme getScheme() {
        return new doesNodeExist_resultTupleScheme();
      }
    }

    private static class doesNodeExist_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<doesNodeExist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doesNodeExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doesNodeExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAncestors_args implements org.apache.thrift.TBase<getAncestors_args, getAncestors_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAncestors_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAncestors_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAncestors_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAncestors_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      NAME((short)3, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAncestors_args.class, metaDataMap);
    }

    public getAncestors_args() {
    }

    public getAncestors_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String name)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAncestors_args(getAncestors_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getAncestors_args deepCopy() {
      return new getAncestors_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.name = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAncestors_args)
        return this.equals((getAncestors_args)that);
      return false;
    }

    public boolean equals(getAncestors_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAncestors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAncestors_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAncestors_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAncestors_argsStandardScheme getScheme() {
        return new getAncestors_argsStandardScheme();
      }
    }

    private static class getAncestors_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAncestors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAncestors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAncestors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAncestors_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAncestors_argsTupleScheme getScheme() {
        return new getAncestors_argsTupleScheme();
      }
    }

    private static class getAncestors_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAncestors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAncestors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAncestors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAncestors_result implements org.apache.thrift.TBase<getAncestors_result, getAncestors_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAncestors_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAncestors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAncestors_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAncestors_resultTupleSchemeFactory();

    private java.util.List<java.lang.String> success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAncestors_result.class, metaDataMap);
    }

    public getAncestors_result() {
    }

    public getAncestors_result(
      java.util.List<java.lang.String> success,
      ThriftException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAncestors_result(getAncestors_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public getAncestors_result deepCopy() {
      return new getAncestors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAncestors_result)
        return this.equals((getAncestors_result)that);
      return false;
    }

    public boolean equals(getAncestors_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAncestors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAncestors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAncestors_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAncestors_resultStandardScheme getScheme() {
        return new getAncestors_resultStandardScheme();
      }
    }

    private static class getAncestors_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAncestors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAncestors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list16.size);
                  java.lang.String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAncestors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAncestors_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAncestors_resultTupleScheme getScheme() {
        return new getAncestors_resultTupleScheme();
      }
    }

    private static class getAncestors_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAncestors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAncestors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAncestors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list21.size);
            java.lang.String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImmediateParents_args implements org.apache.thrift.TBase<getImmediateParents_args, getImmediateParents_args._Fields>, java.io.Serializable, Cloneable, Comparable<getImmediateParents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImmediateParents_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImmediateParents_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImmediateParents_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      NAME((short)3, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImmediateParents_args.class, metaDataMap);
    }

    public getImmediateParents_args() {
    }

    public getImmediateParents_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String name)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImmediateParents_args(getImmediateParents_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getImmediateParents_args deepCopy() {
      return new getImmediateParents_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.name = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImmediateParents_args)
        return this.equals((getImmediateParents_args)that);
      return false;
    }

    public boolean equals(getImmediateParents_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getImmediateParents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImmediateParents_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImmediateParents_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImmediateParents_argsStandardScheme getScheme() {
        return new getImmediateParents_argsStandardScheme();
      }
    }

    private static class getImmediateParents_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImmediateParents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImmediateParents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImmediateParents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImmediateParents_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImmediateParents_argsTupleScheme getScheme() {
        return new getImmediateParents_argsTupleScheme();
      }
    }

    private static class getImmediateParents_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImmediateParents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImmediateParents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImmediateParents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImmediateParents_result implements org.apache.thrift.TBase<getImmediateParents_result, getImmediateParents_result._Fields>, java.io.Serializable, Cloneable, Comparable<getImmediateParents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImmediateParents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImmediateParents_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImmediateParents_resultTupleSchemeFactory();

    private java.util.List<java.lang.String> success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImmediateParents_result.class, metaDataMap);
    }

    public getImmediateParents_result() {
    }

    public getImmediateParents_result(
      java.util.List<java.lang.String> success,
      ThriftException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImmediateParents_result(getImmediateParents_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public getImmediateParents_result deepCopy() {
      return new getImmediateParents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImmediateParents_result)
        return this.equals((getImmediateParents_result)that);
      return false;
    }

    public boolean equals(getImmediateParents_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getImmediateParents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImmediateParents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImmediateParents_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImmediateParents_resultStandardScheme getScheme() {
        return new getImmediateParents_resultStandardScheme();
      }
    }

    private static class getImmediateParents_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImmediateParents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImmediateParents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list24.size);
                  java.lang.String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImmediateParents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter27 : struct.success)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImmediateParents_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImmediateParents_resultTupleScheme getScheme() {
        return new getImmediateParents_resultTupleScheme();
      }
    }

    private static class getImmediateParents_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImmediateParents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImmediateParents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter28 : struct.success)
            {
              oprot.writeString(_iter28);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImmediateParents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list29.size);
            java.lang.String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDescendants_args implements org.apache.thrift.TBase<getDescendants_args, getDescendants_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDescendants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDescendants_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDescendants_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDescendants_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      NAME((short)3, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDescendants_args.class, metaDataMap);
    }

    public getDescendants_args() {
    }

    public getDescendants_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String name)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDescendants_args(getDescendants_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getDescendants_args deepCopy() {
      return new getDescendants_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.name = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDescendants_args)
        return this.equals((getDescendants_args)that);
      return false;
    }

    public boolean equals(getDescendants_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDescendants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDescendants_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDescendants_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDescendants_argsStandardScheme getScheme() {
        return new getDescendants_argsStandardScheme();
      }
    }

    private static class getDescendants_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDescendants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDescendants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDescendants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDescendants_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDescendants_argsTupleScheme getScheme() {
        return new getDescendants_argsTupleScheme();
      }
    }

    private static class getDescendants_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDescendants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDescendants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDescendants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDescendants_result implements org.apache.thrift.TBase<getDescendants_result, getDescendants_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDescendants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDescendants_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDescendants_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDescendants_resultTupleSchemeFactory();

    private java.util.List<java.lang.String> success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDescendants_result.class, metaDataMap);
    }

    public getDescendants_result() {
    }

    public getDescendants_result(
      java.util.List<java.lang.String> success,
      ThriftException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDescendants_result(getDescendants_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public getDescendants_result deepCopy() {
      return new getDescendants_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDescendants_result)
        return this.equals((getDescendants_result)that);
      return false;
    }

    public boolean equals(getDescendants_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDescendants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDescendants_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDescendants_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDescendants_resultStandardScheme getScheme() {
        return new getDescendants_resultStandardScheme();
      }
    }

    private static class getDescendants_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDescendants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDescendants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list32.size);
                  java.lang.String _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readString();
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDescendants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter35 : struct.success)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDescendants_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDescendants_resultTupleScheme getScheme() {
        return new getDescendants_resultTupleScheme();
      }
    }

    private static class getDescendants_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDescendants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDescendants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter36 : struct.success)
            {
              oprot.writeString(_iter36);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDescendants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list37.size);
            java.lang.String _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readString();
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImmediateChildren_args implements org.apache.thrift.TBase<getImmediateChildren_args, getImmediateChildren_args._Fields>, java.io.Serializable, Cloneable, Comparable<getImmediateChildren_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImmediateChildren_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImmediateChildren_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImmediateChildren_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      NAME((short)3, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImmediateChildren_args.class, metaDataMap);
    }

    public getImmediateChildren_args() {
    }

    public getImmediateChildren_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String name)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImmediateChildren_args(getImmediateChildren_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getImmediateChildren_args deepCopy() {
      return new getImmediateChildren_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.name = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImmediateChildren_args)
        return this.equals((getImmediateChildren_args)that);
      return false;
    }

    public boolean equals(getImmediateChildren_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getImmediateChildren_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImmediateChildren_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImmediateChildren_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImmediateChildren_argsStandardScheme getScheme() {
        return new getImmediateChildren_argsStandardScheme();
      }
    }

    private static class getImmediateChildren_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImmediateChildren_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImmediateChildren_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImmediateChildren_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImmediateChildren_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImmediateChildren_argsTupleScheme getScheme() {
        return new getImmediateChildren_argsTupleScheme();
      }
    }

    private static class getImmediateChildren_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImmediateChildren_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImmediateChildren_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImmediateChildren_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImmediateChildren_result implements org.apache.thrift.TBase<getImmediateChildren_result, getImmediateChildren_result._Fields>, java.io.Serializable, Cloneable, Comparable<getImmediateChildren_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImmediateChildren_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImmediateChildren_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImmediateChildren_resultTupleSchemeFactory();

    private java.util.List<java.lang.String> success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImmediateChildren_result.class, metaDataMap);
    }

    public getImmediateChildren_result() {
    }

    public getImmediateChildren_result(
      java.util.List<java.lang.String> success,
      ThriftException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImmediateChildren_result(getImmediateChildren_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public getImmediateChildren_result deepCopy() {
      return new getImmediateChildren_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImmediateChildren_result)
        return this.equals((getImmediateChildren_result)that);
      return false;
    }

    public boolean equals(getImmediateChildren_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getImmediateChildren_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImmediateChildren_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImmediateChildren_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImmediateChildren_resultStandardScheme getScheme() {
        return new getImmediateChildren_resultStandardScheme();
      }
    }

    private static class getImmediateChildren_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImmediateChildren_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImmediateChildren_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list40.size);
                  java.lang.String _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readString();
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImmediateChildren_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter43 : struct.success)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImmediateChildren_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImmediateChildren_resultTupleScheme getScheme() {
        return new getImmediateChildren_resultTupleScheme();
      }
    }

    private static class getImmediateChildren_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImmediateChildren_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImmediateChildren_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter44 : struct.success)
            {
              oprot.writeString(_iter44);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImmediateChildren_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list45.size);
            java.lang.String _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readString();
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSiblings_args implements org.apache.thrift.TBase<getSiblings_args, getSiblings_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSiblings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiblings_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSiblings_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSiblings_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required
    private java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName"),
      NAME((short)3, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiblings_args.class, metaDataMap);
    }

    public getSiblings_args() {
    }

    public getSiblings_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName,
      java.lang.String name)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiblings_args(getSiblings_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getSiblings_args deepCopy() {
      return new getSiblings_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
      this.name = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiblings_args)
        return this.equals((getSiblings_args)that);
      return false;
    }

    public boolean equals(getSiblings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSiblings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSiblings_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiblings_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiblings_argsStandardScheme getScheme() {
        return new getSiblings_argsStandardScheme();
      }
    }

    private static class getSiblings_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSiblings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiblings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiblings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiblings_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiblings_argsTupleScheme getScheme() {
        return new getSiblings_argsTupleScheme();
      }
    }

    private static class getSiblings_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSiblings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiblings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiblings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSiblings_result implements org.apache.thrift.TBase<getSiblings_result, getSiblings_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSiblings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiblings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSiblings_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSiblings_resultTupleSchemeFactory();

    private java.util.List<java.lang.String> success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiblings_result.class, metaDataMap);
    }

    public getSiblings_result() {
    }

    public getSiblings_result(
      java.util.List<java.lang.String> success,
      ThriftException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiblings_result(getSiblings_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public getSiblings_result deepCopy() {
      return new getSiblings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiblings_result)
        return this.equals((getSiblings_result)that);
      return false;
    }

    public boolean equals(getSiblings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSiblings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSiblings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiblings_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiblings_resultStandardScheme getScheme() {
        return new getSiblings_resultStandardScheme();
      }
    }

    private static class getSiblings_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSiblings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiblings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list48.size);
                  java.lang.String _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readString();
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiblings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter51 : struct.success)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiblings_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiblings_resultTupleScheme getScheme() {
        return new getSiblings_resultTupleScheme();
      }
    }

    private static class getSiblings_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSiblings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiblings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter52 : struct.success)
            {
              oprot.writeString(_iter52);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiblings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list53.size);
            java.lang.String _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readString();
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHierarchy_args implements org.apache.thrift.TBase<getHierarchy_args, getHierarchy_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHierarchy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHierarchy_args");

    private static final org.apache.thrift.protocol.TField NAME_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameSpace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HIERARCHY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hierarchyName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHierarchy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHierarchy_argsTupleSchemeFactory();

    private java.lang.String nameSpace; // required
    private java.lang.String hierarchyName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME_SPACE((short)1, "nameSpace"),
      HIERARCHY_NAME((short)2, "hierarchyName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME_SPACE
            return NAME_SPACE;
          case 2: // HIERARCHY_NAME
            return HIERARCHY_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME_SPACE, new org.apache.thrift.meta_data.FieldMetaData("nameSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HIERARCHY_NAME, new org.apache.thrift.meta_data.FieldMetaData("hierarchyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHierarchy_args.class, metaDataMap);
    }

    public getHierarchy_args() {
    }

    public getHierarchy_args(
      java.lang.String nameSpace,
      java.lang.String hierarchyName)
    {
      this();
      this.nameSpace = nameSpace;
      this.hierarchyName = hierarchyName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHierarchy_args(getHierarchy_args other) {
      if (other.isSetNameSpace()) {
        this.nameSpace = other.nameSpace;
      }
      if (other.isSetHierarchyName()) {
        this.hierarchyName = other.hierarchyName;
      }
    }

    public getHierarchy_args deepCopy() {
      return new getHierarchy_args(this);
    }

    @Override
    public void clear() {
      this.nameSpace = null;
      this.hierarchyName = null;
    }

    public java.lang.String getNameSpace() {
      return this.nameSpace;
    }

    public void setNameSpace(java.lang.String nameSpace) {
      this.nameSpace = nameSpace;
    }

    public void unsetNameSpace() {
      this.nameSpace = null;
    }

    /** Returns true if field nameSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetNameSpace() {
      return this.nameSpace != null;
    }

    public void setNameSpaceIsSet(boolean value) {
      if (!value) {
        this.nameSpace = null;
      }
    }

    public java.lang.String getHierarchyName() {
      return this.hierarchyName;
    }

    public void setHierarchyName(java.lang.String hierarchyName) {
      this.hierarchyName = hierarchyName;
    }

    public void unsetHierarchyName() {
      this.hierarchyName = null;
    }

    /** Returns true if field hierarchyName is set (has been assigned a value) and false otherwise */
    public boolean isSetHierarchyName() {
      return this.hierarchyName != null;
    }

    public void setHierarchyNameIsSet(boolean value) {
      if (!value) {
        this.hierarchyName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME_SPACE:
        if (value == null) {
          unsetNameSpace();
        } else {
          setNameSpace((java.lang.String)value);
        }
        break;

      case HIERARCHY_NAME:
        if (value == null) {
          unsetHierarchyName();
        } else {
          setHierarchyName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME_SPACE:
        return getNameSpace();

      case HIERARCHY_NAME:
        return getHierarchyName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME_SPACE:
        return isSetNameSpace();
      case HIERARCHY_NAME:
        return isSetHierarchyName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHierarchy_args)
        return this.equals((getHierarchy_args)that);
      return false;
    }

    public boolean equals(getHierarchy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nameSpace = true && this.isSetNameSpace();
      boolean that_present_nameSpace = true && that.isSetNameSpace();
      if (this_present_nameSpace || that_present_nameSpace) {
        if (!(this_present_nameSpace && that_present_nameSpace))
          return false;
        if (!this.nameSpace.equals(that.nameSpace))
          return false;
      }

      boolean this_present_hierarchyName = true && this.isSetHierarchyName();
      boolean that_present_hierarchyName = true && that.isSetHierarchyName();
      if (this_present_hierarchyName || that_present_hierarchyName) {
        if (!(this_present_hierarchyName && that_present_hierarchyName))
          return false;
        if (!this.hierarchyName.equals(that.hierarchyName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNameSpace()) ? 131071 : 524287);
      if (isSetNameSpace())
        hashCode = hashCode * 8191 + nameSpace.hashCode();

      hashCode = hashCode * 8191 + ((isSetHierarchyName()) ? 131071 : 524287);
      if (isSetHierarchyName())
        hashCode = hashCode * 8191 + hierarchyName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHierarchy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNameSpace()).compareTo(other.isSetNameSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpace, other.nameSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHierarchyName()).compareTo(other.isSetHierarchyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHierarchyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hierarchyName, other.hierarchyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHierarchy_args(");
      boolean first = true;

      sb.append("nameSpace:");
      if (this.nameSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.nameSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hierarchyName:");
      if (this.hierarchyName == null) {
        sb.append("null");
      } else {
        sb.append(this.hierarchyName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHierarchy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHierarchy_argsStandardScheme getScheme() {
        return new getHierarchy_argsStandardScheme();
      }
    }

    private static class getHierarchy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHierarchy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHierarchy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameSpace = iprot.readString();
                struct.setNameSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIERARCHY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hierarchyName = iprot.readString();
                struct.setHierarchyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHierarchy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nameSpace != null) {
          oprot.writeFieldBegin(NAME_SPACE_FIELD_DESC);
          oprot.writeString(struct.nameSpace);
          oprot.writeFieldEnd();
        }
        if (struct.hierarchyName != null) {
          oprot.writeFieldBegin(HIERARCHY_NAME_FIELD_DESC);
          oprot.writeString(struct.hierarchyName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHierarchy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHierarchy_argsTupleScheme getScheme() {
        return new getHierarchy_argsTupleScheme();
      }
    }

    private static class getHierarchy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHierarchy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHierarchy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNameSpace()) {
          optionals.set(0);
        }
        if (struct.isSetHierarchyName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNameSpace()) {
          oprot.writeString(struct.nameSpace);
        }
        if (struct.isSetHierarchyName()) {
          oprot.writeString(struct.hierarchyName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHierarchy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nameSpace = iprot.readString();
          struct.setNameSpaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hierarchyName = iprot.readString();
          struct.setHierarchyNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHierarchy_result implements org.apache.thrift.TBase<getHierarchy_result, getHierarchy_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHierarchy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHierarchy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHierarchy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHierarchy_resultTupleSchemeFactory();

    private java.util.List<java.lang.String> success; // required
    private ThriftException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHierarchy_result.class, metaDataMap);
    }

    public getHierarchy_result() {
    }

    public getHierarchy_result(
      java.util.List<java.lang.String> success,
      ThriftException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHierarchy_result(getHierarchy_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new ThriftException(other.ise);
      }
    }

    public getHierarchy_result deepCopy() {
      return new getHierarchy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getIse() {
      return this.ise;
    }

    public void setIse(ThriftException ise) {
      this.ise = ise;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((ThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHierarchy_result)
        return this.equals((getHierarchy_result)that);
      return false;
    }

    public boolean equals(getHierarchy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHierarchy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHierarchy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHierarchy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHierarchy_resultStandardScheme getScheme() {
        return new getHierarchy_resultStandardScheme();
      }
    }

    private static class getHierarchy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHierarchy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHierarchy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list56.size);
                  java.lang.String _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readString();
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new ThriftException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHierarchy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter59 : struct.success)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHierarchy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHierarchy_resultTupleScheme getScheme() {
        return new getHierarchy_resultTupleScheme();
      }
    }

    private static class getHierarchy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHierarchy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHierarchy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter60 : struct.success)
            {
              oprot.writeString(_iter60);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHierarchy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list61.size);
            java.lang.String _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readString();
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new ThriftException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
