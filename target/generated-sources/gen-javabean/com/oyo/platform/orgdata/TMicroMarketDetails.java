/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.platform.orgdata;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-05-22")
public class TMicroMarketDetails implements org.apache.thrift.TBase<TMicroMarketDetails, TMicroMarketDetails._Fields>, java.io.Serializable, Cloneable, Comparable<TMicroMarketDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMicroMarketDetails");

  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mmId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField WALLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("walletId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EMAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("emails", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField SYB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sybType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField SAP_SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("sapSync", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMicroMarketDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMicroMarketDetailsTupleSchemeFactory();

  private java.lang.String city; // required
  private java.lang.String name; // required
  private java.lang.String mmId; // required
  private long createdAt; // required
  private long updatedAt; // required
  private java.lang.String walletId; // required
  private java.util.List<java.lang.String> emails; // required
  private java.lang.String sybType; // required
  private boolean active; // required
  private boolean sapSync; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CITY((short)1, "city"),
    NAME((short)2, "name"),
    MM_ID((short)3, "mmId"),
    CREATED_AT((short)4, "createdAt"),
    UPDATED_AT((short)5, "updatedAt"),
    WALLET_ID((short)6, "walletId"),
    EMAILS((short)7, "emails"),
    SYB_TYPE((short)8, "sybType"),
    ACTIVE((short)9, "active"),
    SAP_SYNC((short)10, "sapSync");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CITY
          return CITY;
        case 2: // NAME
          return NAME;
        case 3: // MM_ID
          return MM_ID;
        case 4: // CREATED_AT
          return CREATED_AT;
        case 5: // UPDATED_AT
          return UPDATED_AT;
        case 6: // WALLET_ID
          return WALLET_ID;
        case 7: // EMAILS
          return EMAILS;
        case 8: // SYB_TYPE
          return SYB_TYPE;
        case 9: // ACTIVE
          return ACTIVE;
        case 10: // SAP_SYNC
          return SAP_SYNC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDAT_ISSET_ID = 0;
  private static final int __UPDATEDAT_ISSET_ID = 1;
  private static final int __ACTIVE_ISSET_ID = 2;
  private static final int __SAPSYNC_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MM_ID, new org.apache.thrift.meta_data.FieldMetaData("mmId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WALLET_ID, new org.apache.thrift.meta_data.FieldMetaData("walletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAILS, new org.apache.thrift.meta_data.FieldMetaData("emails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SYB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sybType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SAP_SYNC, new org.apache.thrift.meta_data.FieldMetaData("sapSync", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMicroMarketDetails.class, metaDataMap);
  }

  public TMicroMarketDetails() {
  }

  public TMicroMarketDetails(
    java.lang.String city,
    java.lang.String name,
    java.lang.String mmId,
    long createdAt,
    long updatedAt,
    java.lang.String walletId,
    java.util.List<java.lang.String> emails,
    java.lang.String sybType,
    boolean active,
    boolean sapSync)
  {
    this();
    this.city = city;
    this.name = name;
    this.mmId = mmId;
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    this.walletId = walletId;
    this.emails = emails;
    this.sybType = sybType;
    this.active = active;
    setActiveIsSet(true);
    this.sapSync = sapSync;
    setSapSyncIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMicroMarketDetails(TMicroMarketDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMmId()) {
      this.mmId = other.mmId;
    }
    this.createdAt = other.createdAt;
    this.updatedAt = other.updatedAt;
    if (other.isSetWalletId()) {
      this.walletId = other.walletId;
    }
    if (other.isSetEmails()) {
      java.util.List<java.lang.String> __this__emails = new java.util.ArrayList<java.lang.String>(other.emails);
      this.emails = __this__emails;
    }
    if (other.isSetSybType()) {
      this.sybType = other.sybType;
    }
    this.active = other.active;
    this.sapSync = other.sapSync;
  }

  public TMicroMarketDetails deepCopy() {
    return new TMicroMarketDetails(this);
  }

  @Override
  public void clear() {
    this.city = null;
    this.name = null;
    this.mmId = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
    this.walletId = null;
    this.emails = null;
    this.sybType = null;
    setActiveIsSet(false);
    this.active = false;
    setSapSyncIsSet(false);
    this.sapSync = false;
  }

  public java.lang.String getCity() {
    return this.city;
  }

  public void setCity(java.lang.String city) {
    this.city = city;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public void setName(java.lang.String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getMmId() {
    return this.mmId;
  }

  public void setMmId(java.lang.String mmId) {
    this.mmId = mmId;
  }

  public void unsetMmId() {
    this.mmId = null;
  }

  /** Returns true if field mmId is set (has been assigned a value) and false otherwise */
  public boolean isSetMmId() {
    return this.mmId != null;
  }

  public void setMmIdIsSet(boolean value) {
    if (!value) {
      this.mmId = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public void setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
  }

  public void unsetCreatedAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public long getUpdatedAt() {
    return this.updatedAt;
  }

  public void setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  public java.lang.String getWalletId() {
    return this.walletId;
  }

  public void setWalletId(java.lang.String walletId) {
    this.walletId = walletId;
  }

  public void unsetWalletId() {
    this.walletId = null;
  }

  /** Returns true if field walletId is set (has been assigned a value) and false otherwise */
  public boolean isSetWalletId() {
    return this.walletId != null;
  }

  public void setWalletIdIsSet(boolean value) {
    if (!value) {
      this.walletId = null;
    }
  }

  public int getEmailsSize() {
    return (this.emails == null) ? 0 : this.emails.size();
  }

  public java.util.Iterator<java.lang.String> getEmailsIterator() {
    return (this.emails == null) ? null : this.emails.iterator();
  }

  public void addToEmails(java.lang.String elem) {
    if (this.emails == null) {
      this.emails = new java.util.ArrayList<java.lang.String>();
    }
    this.emails.add(elem);
  }

  public java.util.List<java.lang.String> getEmails() {
    return this.emails;
  }

  public void setEmails(java.util.List<java.lang.String> emails) {
    this.emails = emails;
  }

  public void unsetEmails() {
    this.emails = null;
  }

  /** Returns true if field emails is set (has been assigned a value) and false otherwise */
  public boolean isSetEmails() {
    return this.emails != null;
  }

  public void setEmailsIsSet(boolean value) {
    if (!value) {
      this.emails = null;
    }
  }

  public java.lang.String getSybType() {
    return this.sybType;
  }

  public void setSybType(java.lang.String sybType) {
    this.sybType = sybType;
  }

  public void unsetSybType() {
    this.sybType = null;
  }

  /** Returns true if field sybType is set (has been assigned a value) and false otherwise */
  public boolean isSetSybType() {
    return this.sybType != null;
  }

  public void setSybTypeIsSet(boolean value) {
    if (!value) {
      this.sybType = null;
    }
  }

  public boolean isActive() {
    return this.active;
  }

  public void setActive(boolean active) {
    this.active = active;
    setActiveIsSet(true);
  }

  public void unsetActive() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  public boolean isSapSync() {
    return this.sapSync;
  }

  public void setSapSync(boolean sapSync) {
    this.sapSync = sapSync;
    setSapSyncIsSet(true);
  }

  public void unsetSapSync() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAPSYNC_ISSET_ID);
  }

  /** Returns true if field sapSync is set (has been assigned a value) and false otherwise */
  public boolean isSetSapSync() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAPSYNC_ISSET_ID);
  }

  public void setSapSyncIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAPSYNC_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case MM_ID:
      if (value == null) {
        unsetMmId();
      } else {
        setMmId((java.lang.String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((java.lang.Long)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((java.lang.Long)value);
      }
      break;

    case WALLET_ID:
      if (value == null) {
        unsetWalletId();
      } else {
        setWalletId((java.lang.String)value);
      }
      break;

    case EMAILS:
      if (value == null) {
        unsetEmails();
      } else {
        setEmails((java.util.List<java.lang.String>)value);
      }
      break;

    case SYB_TYPE:
      if (value == null) {
        unsetSybType();
      } else {
        setSybType((java.lang.String)value);
      }
      break;

    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((java.lang.Boolean)value);
      }
      break;

    case SAP_SYNC:
      if (value == null) {
        unsetSapSync();
      } else {
        setSapSync((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CITY:
      return getCity();

    case NAME:
      return getName();

    case MM_ID:
      return getMmId();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    case WALLET_ID:
      return getWalletId();

    case EMAILS:
      return getEmails();

    case SYB_TYPE:
      return getSybType();

    case ACTIVE:
      return isActive();

    case SAP_SYNC:
      return isSapSync();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CITY:
      return isSetCity();
    case NAME:
      return isSetName();
    case MM_ID:
      return isSetMmId();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case WALLET_ID:
      return isSetWalletId();
    case EMAILS:
      return isSetEmails();
    case SYB_TYPE:
      return isSetSybType();
    case ACTIVE:
      return isSetActive();
    case SAP_SYNC:
      return isSetSapSync();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TMicroMarketDetails)
      return this.equals((TMicroMarketDetails)that);
    return false;
  }

  public boolean equals(TMicroMarketDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_mmId = true && this.isSetMmId();
    boolean that_present_mmId = true && that.isSetMmId();
    if (this_present_mmId || that_present_mmId) {
      if (!(this_present_mmId && that_present_mmId))
        return false;
      if (!this.mmId.equals(that.mmId))
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_updatedAt = true;
    boolean that_present_updatedAt = true;
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    boolean this_present_walletId = true && this.isSetWalletId();
    boolean that_present_walletId = true && that.isSetWalletId();
    if (this_present_walletId || that_present_walletId) {
      if (!(this_present_walletId && that_present_walletId))
        return false;
      if (!this.walletId.equals(that.walletId))
        return false;
    }

    boolean this_present_emails = true && this.isSetEmails();
    boolean that_present_emails = true && that.isSetEmails();
    if (this_present_emails || that_present_emails) {
      if (!(this_present_emails && that_present_emails))
        return false;
      if (!this.emails.equals(that.emails))
        return false;
    }

    boolean this_present_sybType = true && this.isSetSybType();
    boolean that_present_sybType = true && that.isSetSybType();
    if (this_present_sybType || that_present_sybType) {
      if (!(this_present_sybType && that_present_sybType))
        return false;
      if (!this.sybType.equals(that.sybType))
        return false;
    }

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    boolean this_present_sapSync = true;
    boolean that_present_sapSync = true;
    if (this_present_sapSync || that_present_sapSync) {
      if (!(this_present_sapSync && that_present_sapSync))
        return false;
      if (this.sapSync != that.sapSync)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetMmId()) ? 131071 : 524287);
    if (isSetMmId())
      hashCode = hashCode * 8191 + mmId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createdAt);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updatedAt);

    hashCode = hashCode * 8191 + ((isSetWalletId()) ? 131071 : 524287);
    if (isSetWalletId())
      hashCode = hashCode * 8191 + walletId.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmails()) ? 131071 : 524287);
    if (isSetEmails())
      hashCode = hashCode * 8191 + emails.hashCode();

    hashCode = hashCode * 8191 + ((isSetSybType()) ? 131071 : 524287);
    if (isSetSybType())
      hashCode = hashCode * 8191 + sybType.hashCode();

    hashCode = hashCode * 8191 + ((active) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((sapSync) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TMicroMarketDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMmId()).compareTo(other.isSetMmId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMmId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mmId, other.mmId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWalletId()).compareTo(other.isSetWalletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWalletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletId, other.walletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmails()).compareTo(other.isSetEmails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emails, other.emails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSybType()).compareTo(other.isSetSybType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSybType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sybType, other.sybType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActive()).compareTo(other.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSapSync()).compareTo(other.isSetSapSync());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSapSync()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sapSync, other.sapSync);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMicroMarketDetails(");
    boolean first = true;

    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mmId:");
    if (this.mmId == null) {
      sb.append("null");
    } else {
      sb.append(this.mmId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    sb.append(this.updatedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("walletId:");
    if (this.walletId == null) {
      sb.append("null");
    } else {
      sb.append(this.walletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emails:");
    if (this.emails == null) {
      sb.append("null");
    } else {
      sb.append(this.emails);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sybType:");
    if (this.sybType == null) {
      sb.append("null");
    } else {
      sb.append(this.sybType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("active:");
    sb.append(this.active);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sapSync:");
    sb.append(this.sapSync);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMicroMarketDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TMicroMarketDetailsStandardScheme getScheme() {
      return new TMicroMarketDetailsStandardScheme();
    }
  }

  private static class TMicroMarketDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMicroMarketDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMicroMarketDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mmId = iprot.readString();
              struct.setMmIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WALLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.walletId = iprot.readString();
              struct.setWalletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.emails = new java.util.ArrayList<java.lang.String>(_list0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.emails.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setEmailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SYB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sybType = iprot.readString();
              struct.setSybTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.active = iprot.readBool();
              struct.setActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SAP_SYNC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sapSync = iprot.readBool();
              struct.setSapSyncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMicroMarketDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.mmId != null) {
        oprot.writeFieldBegin(MM_ID_FIELD_DESC);
        oprot.writeString(struct.mmId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
      oprot.writeI64(struct.updatedAt);
      oprot.writeFieldEnd();
      if (struct.walletId != null) {
        oprot.writeFieldBegin(WALLET_ID_FIELD_DESC);
        oprot.writeString(struct.walletId);
        oprot.writeFieldEnd();
      }
      if (struct.emails != null) {
        oprot.writeFieldBegin(EMAILS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.emails.size()));
          for (java.lang.String _iter3 : struct.emails)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sybType != null) {
        oprot.writeFieldBegin(SYB_TYPE_FIELD_DESC);
        oprot.writeString(struct.sybType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.active);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SAP_SYNC_FIELD_DESC);
      oprot.writeBool(struct.sapSync);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMicroMarketDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TMicroMarketDetailsTupleScheme getScheme() {
      return new TMicroMarketDetailsTupleScheme();
    }
  }

  private static class TMicroMarketDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMicroMarketDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMicroMarketDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCity()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMmId()) {
        optionals.set(2);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(3);
      }
      if (struct.isSetUpdatedAt()) {
        optionals.set(4);
      }
      if (struct.isSetWalletId()) {
        optionals.set(5);
      }
      if (struct.isSetEmails()) {
        optionals.set(6);
      }
      if (struct.isSetSybType()) {
        optionals.set(7);
      }
      if (struct.isSetActive()) {
        optionals.set(8);
      }
      if (struct.isSetSapSync()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMmId()) {
        oprot.writeString(struct.mmId);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeI64(struct.createdAt);
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeI64(struct.updatedAt);
      }
      if (struct.isSetWalletId()) {
        oprot.writeString(struct.walletId);
      }
      if (struct.isSetEmails()) {
        {
          oprot.writeI32(struct.emails.size());
          for (java.lang.String _iter4 : struct.emails)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetSybType()) {
        oprot.writeString(struct.sybType);
      }
      if (struct.isSetActive()) {
        oprot.writeBool(struct.active);
      }
      if (struct.isSetSapSync()) {
        oprot.writeBool(struct.sapSync);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMicroMarketDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mmId = iprot.readString();
        struct.setMmIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createdAt = iprot.readI64();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updatedAt = iprot.readI64();
        struct.setUpdatedAtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.walletId = iprot.readString();
        struct.setWalletIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.emails = new java.util.ArrayList<java.lang.String>(_list5.size);
          java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.emails.add(_elem6);
          }
        }
        struct.setEmailsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sybType = iprot.readString();
        struct.setSybTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.active = iprot.readBool();
        struct.setActiveIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sapSync = iprot.readBool();
        struct.setSapSyncIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

