/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.metadata;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-03-03")
public class TCallcenterHierarchyService {

  public interface Iface {

    public TTeamGetResponse getTeam(TTeamGetRequest teamGetRequest) throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException;

    public TLOBGetResponse getLOB(TLOBGetRequest lobGetRequest) throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException;

    public TCenterGetResponse getCenter(TCenterGetRequest centerGetRequest) throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException;

    public TBusinessGetResponse getBusiness(TBusinessGetRequest businessGetRequest) throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException;

    public java.util.List<TTeamGetResponse> listTeams(java.lang.String locale) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException;

    public java.util.List<TLOBGetResponse> listLOBs(java.lang.String locale) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException;

    public java.util.List<TCenterGetResponse> listCenters(java.lang.String locale) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException;

    public java.util.List<TBusinessGetResponse> listBusinesses(java.lang.String locale) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException;

    public java.lang.String createTeam(TTeamCreateRequest teamGetRequest) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException;

    public java.lang.String createLOB(TLOBCreateRequest teamGetRequest) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException;

    public java.lang.String createCenter(TCenterCreateRequest teamGetRequest) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException;

    public java.lang.String createBusiness(TBusinessCreateRequest teamGetRequest) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getTeam(TTeamGetRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<TTeamGetResponse> resultHandler) throws org.apache.thrift.TException;

    public void getLOB(TLOBGetRequest lobGetRequest, org.apache.thrift.async.AsyncMethodCallback<TLOBGetResponse> resultHandler) throws org.apache.thrift.TException;

    public void getCenter(TCenterGetRequest centerGetRequest, org.apache.thrift.async.AsyncMethodCallback<TCenterGetResponse> resultHandler) throws org.apache.thrift.TException;

    public void getBusiness(TBusinessGetRequest businessGetRequest, org.apache.thrift.async.AsyncMethodCallback<TBusinessGetResponse> resultHandler) throws org.apache.thrift.TException;

    public void listTeams(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TTeamGetResponse>> resultHandler) throws org.apache.thrift.TException;

    public void listLOBs(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLOBGetResponse>> resultHandler) throws org.apache.thrift.TException;

    public void listCenters(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCenterGetResponse>> resultHandler) throws org.apache.thrift.TException;

    public void listBusinesses(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBusinessGetResponse>> resultHandler) throws org.apache.thrift.TException;

    public void createTeam(TTeamCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createLOB(TLOBCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createCenter(TCenterCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createBusiness(TBusinessCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TTeamGetResponse getTeam(TTeamGetRequest teamGetRequest) throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException
    {
      send_getTeam(teamGetRequest);
      return recv_getTeam();
    }

    public void send_getTeam(TTeamGetRequest teamGetRequest) throws org.apache.thrift.TException
    {
      getTeam_args args = new getTeam_args();
      args.setTeamGetRequest(teamGetRequest);
      sendBase("getTeam", args);
    }

    public TTeamGetResponse recv_getTeam() throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException
    {
      getTeam_result result = new getTeam_result();
      receiveBase(result, "getTeam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.itemNotFoundException != null) {
        throw result.itemNotFoundException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      if (result.badRequestException != null) {
        throw result.badRequestException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTeam failed: unknown result");
    }

    public TLOBGetResponse getLOB(TLOBGetRequest lobGetRequest) throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException
    {
      send_getLOB(lobGetRequest);
      return recv_getLOB();
    }

    public void send_getLOB(TLOBGetRequest lobGetRequest) throws org.apache.thrift.TException
    {
      getLOB_args args = new getLOB_args();
      args.setLobGetRequest(lobGetRequest);
      sendBase("getLOB", args);
    }

    public TLOBGetResponse recv_getLOB() throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException
    {
      getLOB_result result = new getLOB_result();
      receiveBase(result, "getLOB");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.itemNotFoundException != null) {
        throw result.itemNotFoundException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      if (result.badRequestException != null) {
        throw result.badRequestException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLOB failed: unknown result");
    }

    public TCenterGetResponse getCenter(TCenterGetRequest centerGetRequest) throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException
    {
      send_getCenter(centerGetRequest);
      return recv_getCenter();
    }

    public void send_getCenter(TCenterGetRequest centerGetRequest) throws org.apache.thrift.TException
    {
      getCenter_args args = new getCenter_args();
      args.setCenterGetRequest(centerGetRequest);
      sendBase("getCenter", args);
    }

    public TCenterGetResponse recv_getCenter() throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException
    {
      getCenter_result result = new getCenter_result();
      receiveBase(result, "getCenter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.itemNotFoundException != null) {
        throw result.itemNotFoundException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      if (result.badRequestException != null) {
        throw result.badRequestException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCenter failed: unknown result");
    }

    public TBusinessGetResponse getBusiness(TBusinessGetRequest businessGetRequest) throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException
    {
      send_getBusiness(businessGetRequest);
      return recv_getBusiness();
    }

    public void send_getBusiness(TBusinessGetRequest businessGetRequest) throws org.apache.thrift.TException
    {
      getBusiness_args args = new getBusiness_args();
      args.setBusinessGetRequest(businessGetRequest);
      sendBase("getBusiness", args);
    }

    public TBusinessGetResponse recv_getBusiness() throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException
    {
      getBusiness_result result = new getBusiness_result();
      receiveBase(result, "getBusiness");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.itemNotFoundException != null) {
        throw result.itemNotFoundException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      if (result.badRequestException != null) {
        throw result.badRequestException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBusiness failed: unknown result");
    }

    public java.util.List<TTeamGetResponse> listTeams(java.lang.String locale) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      send_listTeams(locale);
      return recv_listTeams();
    }

    public void send_listTeams(java.lang.String locale) throws org.apache.thrift.TException
    {
      listTeams_args args = new listTeams_args();
      args.setLocale(locale);
      sendBase("listTeams", args);
    }

    public java.util.List<TTeamGetResponse> recv_listTeams() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      listTeams_result result = new listTeams_result();
      receiveBase(result, "listTeams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listTeams failed: unknown result");
    }

    public java.util.List<TLOBGetResponse> listLOBs(java.lang.String locale) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      send_listLOBs(locale);
      return recv_listLOBs();
    }

    public void send_listLOBs(java.lang.String locale) throws org.apache.thrift.TException
    {
      listLOBs_args args = new listLOBs_args();
      args.setLocale(locale);
      sendBase("listLOBs", args);
    }

    public java.util.List<TLOBGetResponse> recv_listLOBs() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      listLOBs_result result = new listLOBs_result();
      receiveBase(result, "listLOBs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listLOBs failed: unknown result");
    }

    public java.util.List<TCenterGetResponse> listCenters(java.lang.String locale) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      send_listCenters(locale);
      return recv_listCenters();
    }

    public void send_listCenters(java.lang.String locale) throws org.apache.thrift.TException
    {
      listCenters_args args = new listCenters_args();
      args.setLocale(locale);
      sendBase("listCenters", args);
    }

    public java.util.List<TCenterGetResponse> recv_listCenters() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      listCenters_result result = new listCenters_result();
      receiveBase(result, "listCenters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCenters failed: unknown result");
    }

    public java.util.List<TBusinessGetResponse> listBusinesses(java.lang.String locale) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      send_listBusinesses(locale);
      return recv_listBusinesses();
    }

    public void send_listBusinesses(java.lang.String locale) throws org.apache.thrift.TException
    {
      listBusinesses_args args = new listBusinesses_args();
      args.setLocale(locale);
      sendBase("listBusinesses", args);
    }

    public java.util.List<TBusinessGetResponse> recv_listBusinesses() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      listBusinesses_result result = new listBusinesses_result();
      receiveBase(result, "listBusinesses");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listBusinesses failed: unknown result");
    }

    public java.lang.String createTeam(TTeamCreateRequest teamGetRequest) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      send_createTeam(teamGetRequest);
      return recv_createTeam();
    }

    public void send_createTeam(TTeamCreateRequest teamGetRequest) throws org.apache.thrift.TException
    {
      createTeam_args args = new createTeam_args();
      args.setTeamGetRequest(teamGetRequest);
      sendBase("createTeam", args);
    }

    public java.lang.String recv_createTeam() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      createTeam_result result = new createTeam_result();
      receiveBase(result, "createTeam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createTeam failed: unknown result");
    }

    public java.lang.String createLOB(TLOBCreateRequest teamGetRequest) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      send_createLOB(teamGetRequest);
      return recv_createLOB();
    }

    public void send_createLOB(TLOBCreateRequest teamGetRequest) throws org.apache.thrift.TException
    {
      createLOB_args args = new createLOB_args();
      args.setTeamGetRequest(teamGetRequest);
      sendBase("createLOB", args);
    }

    public java.lang.String recv_createLOB() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      createLOB_result result = new createLOB_result();
      receiveBase(result, "createLOB");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createLOB failed: unknown result");
    }

    public java.lang.String createCenter(TCenterCreateRequest teamGetRequest) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      send_createCenter(teamGetRequest);
      return recv_createCenter();
    }

    public void send_createCenter(TCenterCreateRequest teamGetRequest) throws org.apache.thrift.TException
    {
      createCenter_args args = new createCenter_args();
      args.setTeamGetRequest(teamGetRequest);
      sendBase("createCenter", args);
    }

    public java.lang.String recv_createCenter() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      createCenter_result result = new createCenter_result();
      receiveBase(result, "createCenter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCenter failed: unknown result");
    }

    public java.lang.String createBusiness(TBusinessCreateRequest teamGetRequest) throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      send_createBusiness(teamGetRequest);
      return recv_createBusiness();
    }

    public void send_createBusiness(TBusinessCreateRequest teamGetRequest) throws org.apache.thrift.TException
    {
      createBusiness_args args = new createBusiness_args();
      args.setTeamGetRequest(teamGetRequest);
      sendBase("createBusiness", args);
    }

    public java.lang.String recv_createBusiness() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException
    {
      createBusiness_result result = new createBusiness_result();
      receiveBase(result, "createBusiness");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.internalServiceException != null) {
        throw result.internalServiceException;
      }
      if (result.dbInternalException != null) {
        throw result.dbInternalException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createBusiness failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTeam(TTeamGetRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<TTeamGetResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTeam_call method_call = new getTeam_call(teamGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTeam_call extends org.apache.thrift.async.TAsyncMethodCall<TTeamGetResponse> {
      private TTeamGetRequest teamGetRequest;
      public getTeam_call(TTeamGetRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<TTeamGetResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teamGetRequest = teamGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTeam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTeam_args args = new getTeam_args();
        args.setTeamGetRequest(teamGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TTeamGetResponse getResult() throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTeam();
      }
    }

    public void getLOB(TLOBGetRequest lobGetRequest, org.apache.thrift.async.AsyncMethodCallback<TLOBGetResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLOB_call method_call = new getLOB_call(lobGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLOB_call extends org.apache.thrift.async.TAsyncMethodCall<TLOBGetResponse> {
      private TLOBGetRequest lobGetRequest;
      public getLOB_call(TLOBGetRequest lobGetRequest, org.apache.thrift.async.AsyncMethodCallback<TLOBGetResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lobGetRequest = lobGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLOB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLOB_args args = new getLOB_args();
        args.setLobGetRequest(lobGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TLOBGetResponse getResult() throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLOB();
      }
    }

    public void getCenter(TCenterGetRequest centerGetRequest, org.apache.thrift.async.AsyncMethodCallback<TCenterGetResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCenter_call method_call = new getCenter_call(centerGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCenter_call extends org.apache.thrift.async.TAsyncMethodCall<TCenterGetResponse> {
      private TCenterGetRequest centerGetRequest;
      public getCenter_call(TCenterGetRequest centerGetRequest, org.apache.thrift.async.AsyncMethodCallback<TCenterGetResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.centerGetRequest = centerGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCenter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCenter_args args = new getCenter_args();
        args.setCenterGetRequest(centerGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TCenterGetResponse getResult() throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCenter();
      }
    }

    public void getBusiness(TBusinessGetRequest businessGetRequest, org.apache.thrift.async.AsyncMethodCallback<TBusinessGetResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBusiness_call method_call = new getBusiness_call(businessGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBusiness_call extends org.apache.thrift.async.TAsyncMethodCall<TBusinessGetResponse> {
      private TBusinessGetRequest businessGetRequest;
      public getBusiness_call(TBusinessGetRequest businessGetRequest, org.apache.thrift.async.AsyncMethodCallback<TBusinessGetResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessGetRequest = businessGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBusiness", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBusiness_args args = new getBusiness_args();
        args.setBusinessGetRequest(businessGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TBusinessGetResponse getResult() throws TInternalServerException, TItemNotFoundException, TDBInternalException, TBadRequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBusiness();
      }
    }

    public void listTeams(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TTeamGetResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listTeams_call method_call = new listTeams_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listTeams_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TTeamGetResponse>> {
      private java.lang.String locale;
      public listTeams_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TTeamGetResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listTeams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listTeams_args args = new listTeams_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TTeamGetResponse> getResult() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listTeams();
      }
    }

    public void listLOBs(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLOBGetResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listLOBs_call method_call = new listLOBs_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listLOBs_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TLOBGetResponse>> {
      private java.lang.String locale;
      public listLOBs_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLOBGetResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listLOBs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listLOBs_args args = new listLOBs_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TLOBGetResponse> getResult() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listLOBs();
      }
    }

    public void listCenters(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCenterGetResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCenters_call method_call = new listCenters_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCenters_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TCenterGetResponse>> {
      private java.lang.String locale;
      public listCenters_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCenterGetResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCenters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCenters_args args = new listCenters_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TCenterGetResponse> getResult() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCenters();
      }
    }

    public void listBusinesses(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBusinessGetResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listBusinesses_call method_call = new listBusinesses_call(locale, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listBusinesses_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TBusinessGetResponse>> {
      private java.lang.String locale;
      public listBusinesses_call(java.lang.String locale, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBusinessGetResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBusinesses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listBusinesses_args args = new listBusinesses_args();
        args.setLocale(locale);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TBusinessGetResponse> getResult() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listBusinesses();
      }
    }

    public void createTeam(TTeamCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createTeam_call method_call = new createTeam_call(teamGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createTeam_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private TTeamCreateRequest teamGetRequest;
      public createTeam_call(TTeamCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teamGetRequest = teamGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createTeam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createTeam_args args = new createTeam_args();
        args.setTeamGetRequest(teamGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createTeam();
      }
    }

    public void createLOB(TLOBCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createLOB_call method_call = new createLOB_call(teamGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createLOB_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private TLOBCreateRequest teamGetRequest;
      public createLOB_call(TLOBCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teamGetRequest = teamGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createLOB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createLOB_args args = new createLOB_args();
        args.setTeamGetRequest(teamGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createLOB();
      }
    }

    public void createCenter(TCenterCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCenter_call method_call = new createCenter_call(teamGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCenter_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private TCenterCreateRequest teamGetRequest;
      public createCenter_call(TCenterCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teamGetRequest = teamGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCenter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCenter_args args = new createCenter_args();
        args.setTeamGetRequest(teamGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCenter();
      }
    }

    public void createBusiness(TBusinessCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createBusiness_call method_call = new createBusiness_call(teamGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createBusiness_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private TBusinessCreateRequest teamGetRequest;
      public createBusiness_call(TBusinessCreateRequest teamGetRequest, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teamGetRequest = teamGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createBusiness", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createBusiness_args args = new createBusiness_args();
        args.setTeamGetRequest(teamGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TInternalServerException, TDBInternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createBusiness();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTeam", new getTeam());
      processMap.put("getLOB", new getLOB());
      processMap.put("getCenter", new getCenter());
      processMap.put("getBusiness", new getBusiness());
      processMap.put("listTeams", new listTeams());
      processMap.put("listLOBs", new listLOBs());
      processMap.put("listCenters", new listCenters());
      processMap.put("listBusinesses", new listBusinesses());
      processMap.put("createTeam", new createTeam());
      processMap.put("createLOB", new createLOB());
      processMap.put("createCenter", new createCenter());
      processMap.put("createBusiness", new createBusiness());
      return processMap;
    }

    public static class getTeam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTeam_args> {
      public getTeam() {
        super("getTeam");
      }

      public getTeam_args getEmptyArgsInstance() {
        return new getTeam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTeam_result getResult(I iface, getTeam_args args) throws org.apache.thrift.TException {
        getTeam_result result = new getTeam_result();
        try {
          result.success = iface.getTeam(args.teamGetRequest);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TItemNotFoundException itemNotFoundException) {
          result.itemNotFoundException = itemNotFoundException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        } catch (TBadRequestException badRequestException) {
          result.badRequestException = badRequestException;
        }
        return result;
      }
    }

    public static class getLOB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLOB_args> {
      public getLOB() {
        super("getLOB");
      }

      public getLOB_args getEmptyArgsInstance() {
        return new getLOB_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLOB_result getResult(I iface, getLOB_args args) throws org.apache.thrift.TException {
        getLOB_result result = new getLOB_result();
        try {
          result.success = iface.getLOB(args.lobGetRequest);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TItemNotFoundException itemNotFoundException) {
          result.itemNotFoundException = itemNotFoundException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        } catch (TBadRequestException badRequestException) {
          result.badRequestException = badRequestException;
        }
        return result;
      }
    }

    public static class getCenter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCenter_args> {
      public getCenter() {
        super("getCenter");
      }

      public getCenter_args getEmptyArgsInstance() {
        return new getCenter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCenter_result getResult(I iface, getCenter_args args) throws org.apache.thrift.TException {
        getCenter_result result = new getCenter_result();
        try {
          result.success = iface.getCenter(args.centerGetRequest);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TItemNotFoundException itemNotFoundException) {
          result.itemNotFoundException = itemNotFoundException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        } catch (TBadRequestException badRequestException) {
          result.badRequestException = badRequestException;
        }
        return result;
      }
    }

    public static class getBusiness<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBusiness_args> {
      public getBusiness() {
        super("getBusiness");
      }

      public getBusiness_args getEmptyArgsInstance() {
        return new getBusiness_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBusiness_result getResult(I iface, getBusiness_args args) throws org.apache.thrift.TException {
        getBusiness_result result = new getBusiness_result();
        try {
          result.success = iface.getBusiness(args.businessGetRequest);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TItemNotFoundException itemNotFoundException) {
          result.itemNotFoundException = itemNotFoundException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        } catch (TBadRequestException badRequestException) {
          result.badRequestException = badRequestException;
        }
        return result;
      }
    }

    public static class listTeams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listTeams_args> {
      public listTeams() {
        super("listTeams");
      }

      public listTeams_args getEmptyArgsInstance() {
        return new listTeams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listTeams_result getResult(I iface, listTeams_args args) throws org.apache.thrift.TException {
        listTeams_result result = new listTeams_result();
        try {
          result.success = iface.listTeams(args.locale);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        }
        return result;
      }
    }

    public static class listLOBs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listLOBs_args> {
      public listLOBs() {
        super("listLOBs");
      }

      public listLOBs_args getEmptyArgsInstance() {
        return new listLOBs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listLOBs_result getResult(I iface, listLOBs_args args) throws org.apache.thrift.TException {
        listLOBs_result result = new listLOBs_result();
        try {
          result.success = iface.listLOBs(args.locale);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        }
        return result;
      }
    }

    public static class listCenters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCenters_args> {
      public listCenters() {
        super("listCenters");
      }

      public listCenters_args getEmptyArgsInstance() {
        return new listCenters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCenters_result getResult(I iface, listCenters_args args) throws org.apache.thrift.TException {
        listCenters_result result = new listCenters_result();
        try {
          result.success = iface.listCenters(args.locale);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        }
        return result;
      }
    }

    public static class listBusinesses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listBusinesses_args> {
      public listBusinesses() {
        super("listBusinesses");
      }

      public listBusinesses_args getEmptyArgsInstance() {
        return new listBusinesses_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listBusinesses_result getResult(I iface, listBusinesses_args args) throws org.apache.thrift.TException {
        listBusinesses_result result = new listBusinesses_result();
        try {
          result.success = iface.listBusinesses(args.locale);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        }
        return result;
      }
    }

    public static class createTeam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createTeam_args> {
      public createTeam() {
        super("createTeam");
      }

      public createTeam_args getEmptyArgsInstance() {
        return new createTeam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createTeam_result getResult(I iface, createTeam_args args) throws org.apache.thrift.TException {
        createTeam_result result = new createTeam_result();
        try {
          result.success = iface.createTeam(args.teamGetRequest);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        }
        return result;
      }
    }

    public static class createLOB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createLOB_args> {
      public createLOB() {
        super("createLOB");
      }

      public createLOB_args getEmptyArgsInstance() {
        return new createLOB_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createLOB_result getResult(I iface, createLOB_args args) throws org.apache.thrift.TException {
        createLOB_result result = new createLOB_result();
        try {
          result.success = iface.createLOB(args.teamGetRequest);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        }
        return result;
      }
    }

    public static class createCenter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCenter_args> {
      public createCenter() {
        super("createCenter");
      }

      public createCenter_args getEmptyArgsInstance() {
        return new createCenter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCenter_result getResult(I iface, createCenter_args args) throws org.apache.thrift.TException {
        createCenter_result result = new createCenter_result();
        try {
          result.success = iface.createCenter(args.teamGetRequest);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        }
        return result;
      }
    }

    public static class createBusiness<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createBusiness_args> {
      public createBusiness() {
        super("createBusiness");
      }

      public createBusiness_args getEmptyArgsInstance() {
        return new createBusiness_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createBusiness_result getResult(I iface, createBusiness_args args) throws org.apache.thrift.TException {
        createBusiness_result result = new createBusiness_result();
        try {
          result.success = iface.createBusiness(args.teamGetRequest);
        } catch (TInternalServerException internalServiceException) {
          result.internalServiceException = internalServiceException;
        } catch (TDBInternalException dbInternalException) {
          result.dbInternalException = dbInternalException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTeam", new getTeam());
      processMap.put("getLOB", new getLOB());
      processMap.put("getCenter", new getCenter());
      processMap.put("getBusiness", new getBusiness());
      processMap.put("listTeams", new listTeams());
      processMap.put("listLOBs", new listLOBs());
      processMap.put("listCenters", new listCenters());
      processMap.put("listBusinesses", new listBusinesses());
      processMap.put("createTeam", new createTeam());
      processMap.put("createLOB", new createLOB());
      processMap.put("createCenter", new createCenter());
      processMap.put("createBusiness", new createBusiness());
      return processMap;
    }

    public static class getTeam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTeam_args, TTeamGetResponse> {
      public getTeam() {
        super("getTeam");
      }

      public getTeam_args getEmptyArgsInstance() {
        return new getTeam_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TTeamGetResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TTeamGetResponse>() { 
          public void onComplete(TTeamGetResponse o) {
            getTeam_result result = new getTeam_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTeam_result result = new getTeam_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TItemNotFoundException) {
              result.itemNotFoundException = (TItemNotFoundException) e;
              result.setItemNotFoundExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TBadRequestException) {
              result.badRequestException = (TBadRequestException) e;
              result.setBadRequestExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTeam_args args, org.apache.thrift.async.AsyncMethodCallback<TTeamGetResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getTeam(args.teamGetRequest,resultHandler);
      }
    }

    public static class getLOB<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLOB_args, TLOBGetResponse> {
      public getLOB() {
        super("getLOB");
      }

      public getLOB_args getEmptyArgsInstance() {
        return new getLOB_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TLOBGetResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TLOBGetResponse>() { 
          public void onComplete(TLOBGetResponse o) {
            getLOB_result result = new getLOB_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLOB_result result = new getLOB_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TItemNotFoundException) {
              result.itemNotFoundException = (TItemNotFoundException) e;
              result.setItemNotFoundExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TBadRequestException) {
              result.badRequestException = (TBadRequestException) e;
              result.setBadRequestExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLOB_args args, org.apache.thrift.async.AsyncMethodCallback<TLOBGetResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getLOB(args.lobGetRequest,resultHandler);
      }
    }

    public static class getCenter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCenter_args, TCenterGetResponse> {
      public getCenter() {
        super("getCenter");
      }

      public getCenter_args getEmptyArgsInstance() {
        return new getCenter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TCenterGetResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TCenterGetResponse>() { 
          public void onComplete(TCenterGetResponse o) {
            getCenter_result result = new getCenter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCenter_result result = new getCenter_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TItemNotFoundException) {
              result.itemNotFoundException = (TItemNotFoundException) e;
              result.setItemNotFoundExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TBadRequestException) {
              result.badRequestException = (TBadRequestException) e;
              result.setBadRequestExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCenter_args args, org.apache.thrift.async.AsyncMethodCallback<TCenterGetResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getCenter(args.centerGetRequest,resultHandler);
      }
    }

    public static class getBusiness<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBusiness_args, TBusinessGetResponse> {
      public getBusiness() {
        super("getBusiness");
      }

      public getBusiness_args getEmptyArgsInstance() {
        return new getBusiness_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TBusinessGetResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TBusinessGetResponse>() { 
          public void onComplete(TBusinessGetResponse o) {
            getBusiness_result result = new getBusiness_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getBusiness_result result = new getBusiness_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TItemNotFoundException) {
              result.itemNotFoundException = (TItemNotFoundException) e;
              result.setItemNotFoundExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TBadRequestException) {
              result.badRequestException = (TBadRequestException) e;
              result.setBadRequestExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBusiness_args args, org.apache.thrift.async.AsyncMethodCallback<TBusinessGetResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getBusiness(args.businessGetRequest,resultHandler);
      }
    }

    public static class listTeams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listTeams_args, java.util.List<TTeamGetResponse>> {
      public listTeams() {
        super("listTeams");
      }

      public listTeams_args getEmptyArgsInstance() {
        return new listTeams_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TTeamGetResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TTeamGetResponse>>() { 
          public void onComplete(java.util.List<TTeamGetResponse> o) {
            listTeams_result result = new listTeams_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listTeams_result result = new listTeams_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listTeams_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TTeamGetResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listTeams(args.locale,resultHandler);
      }
    }

    public static class listLOBs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listLOBs_args, java.util.List<TLOBGetResponse>> {
      public listLOBs() {
        super("listLOBs");
      }

      public listLOBs_args getEmptyArgsInstance() {
        return new listLOBs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLOBGetResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLOBGetResponse>>() { 
          public void onComplete(java.util.List<TLOBGetResponse> o) {
            listLOBs_result result = new listLOBs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listLOBs_result result = new listLOBs_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listLOBs_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLOBGetResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listLOBs(args.locale,resultHandler);
      }
    }

    public static class listCenters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCenters_args, java.util.List<TCenterGetResponse>> {
      public listCenters() {
        super("listCenters");
      }

      public listCenters_args getEmptyArgsInstance() {
        return new listCenters_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCenterGetResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCenterGetResponse>>() { 
          public void onComplete(java.util.List<TCenterGetResponse> o) {
            listCenters_result result = new listCenters_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCenters_result result = new listCenters_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCenters_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TCenterGetResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listCenters(args.locale,resultHandler);
      }
    }

    public static class listBusinesses<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listBusinesses_args, java.util.List<TBusinessGetResponse>> {
      public listBusinesses() {
        super("listBusinesses");
      }

      public listBusinesses_args getEmptyArgsInstance() {
        return new listBusinesses_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBusinessGetResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBusinessGetResponse>>() { 
          public void onComplete(java.util.List<TBusinessGetResponse> o) {
            listBusinesses_result result = new listBusinesses_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listBusinesses_result result = new listBusinesses_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listBusinesses_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TBusinessGetResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.listBusinesses(args.locale,resultHandler);
      }
    }

    public static class createTeam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createTeam_args, java.lang.String> {
      public createTeam() {
        super("createTeam");
      }

      public createTeam_args getEmptyArgsInstance() {
        return new createTeam_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createTeam_result result = new createTeam_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createTeam_result result = new createTeam_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createTeam_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createTeam(args.teamGetRequest,resultHandler);
      }
    }

    public static class createLOB<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createLOB_args, java.lang.String> {
      public createLOB() {
        super("createLOB");
      }

      public createLOB_args getEmptyArgsInstance() {
        return new createLOB_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createLOB_result result = new createLOB_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createLOB_result result = new createLOB_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createLOB_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createLOB(args.teamGetRequest,resultHandler);
      }
    }

    public static class createCenter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCenter_args, java.lang.String> {
      public createCenter() {
        super("createCenter");
      }

      public createCenter_args getEmptyArgsInstance() {
        return new createCenter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createCenter_result result = new createCenter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createCenter_result result = new createCenter_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCenter_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createCenter(args.teamGetRequest,resultHandler);
      }
    }

    public static class createBusiness<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createBusiness_args, java.lang.String> {
      public createBusiness() {
        super("createBusiness");
      }

      public createBusiness_args getEmptyArgsInstance() {
        return new createBusiness_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createBusiness_result result = new createBusiness_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createBusiness_result result = new createBusiness_result();
            if (e instanceof TInternalServerException) {
              result.internalServiceException = (TInternalServerException) e;
              result.setInternalServiceExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TDBInternalException) {
              result.dbInternalException = (TDBInternalException) e;
              result.setDbInternalExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createBusiness_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createBusiness(args.teamGetRequest,resultHandler);
      }
    }

  }

  public static class getTeam_args implements org.apache.thrift.TBase<getTeam_args, getTeam_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTeam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeam_args");

    private static final org.apache.thrift.protocol.TField TEAM_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("teamGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTeam_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTeam_argsTupleSchemeFactory();

    private TTeamGetRequest teamGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_GET_REQUEST((short)1, "teamGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_GET_REQUEST
            return TEAM_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("teamGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeamGetRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeam_args.class, metaDataMap);
    }

    public getTeam_args() {
    }

    public getTeam_args(
      TTeamGetRequest teamGetRequest)
    {
      this();
      this.teamGetRequest = teamGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeam_args(getTeam_args other) {
      if (other.isSetTeamGetRequest()) {
        this.teamGetRequest = new TTeamGetRequest(other.teamGetRequest);
      }
    }

    public getTeam_args deepCopy() {
      return new getTeam_args(this);
    }

    @Override
    public void clear() {
      this.teamGetRequest = null;
    }

    public TTeamGetRequest getTeamGetRequest() {
      return this.teamGetRequest;
    }

    public void setTeamGetRequest(TTeamGetRequest teamGetRequest) {
      this.teamGetRequest = teamGetRequest;
    }

    public void unsetTeamGetRequest() {
      this.teamGetRequest = null;
    }

    /** Returns true if field teamGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamGetRequest() {
      return this.teamGetRequest != null;
    }

    public void setTeamGetRequestIsSet(boolean value) {
      if (!value) {
        this.teamGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TEAM_GET_REQUEST:
        if (value == null) {
          unsetTeamGetRequest();
        } else {
          setTeamGetRequest((TTeamGetRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_GET_REQUEST:
        return getTeamGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TEAM_GET_REQUEST:
        return isSetTeamGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeam_args)
        return this.equals((getTeam_args)that);
      return false;
    }

    public boolean equals(getTeam_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_teamGetRequest = true && this.isSetTeamGetRequest();
      boolean that_present_teamGetRequest = true && that.isSetTeamGetRequest();
      if (this_present_teamGetRequest || that_present_teamGetRequest) {
        if (!(this_present_teamGetRequest && that_present_teamGetRequest))
          return false;
        if (!this.teamGetRequest.equals(that.teamGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTeamGetRequest()) ? 131071 : 524287);
      if (isSetTeamGetRequest())
        hashCode = hashCode * 8191 + teamGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTeam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTeamGetRequest()).compareTo(other.isSetTeamGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamGetRequest, other.teamGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTeam_args(");
      boolean first = true;

      sb.append("teamGetRequest:");
      if (this.teamGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.teamGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (teamGetRequest != null) {
        teamGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeam_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTeam_argsStandardScheme getScheme() {
        return new getTeam_argsStandardScheme();
      }
    }

    private static class getTeam_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTeam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.teamGetRequest = new TTeamGetRequest();
                struct.teamGetRequest.read(iprot);
                struct.setTeamGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamGetRequest != null) {
          oprot.writeFieldBegin(TEAM_GET_REQUEST_FIELD_DESC);
          struct.teamGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeam_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTeam_argsTupleScheme getScheme() {
        return new getTeam_argsTupleScheme();
      }
    }

    private static class getTeam_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTeam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTeamGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTeamGetRequest()) {
          struct.teamGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.teamGetRequest = new TTeamGetRequest();
          struct.teamGetRequest.read(iprot);
          struct.setTeamGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTeam_result implements org.apache.thrift.TBase<getTeam_result, getTeam_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTeam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("itemNotFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField BAD_REQUEST_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("badRequestException", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTeam_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTeam_resultTupleSchemeFactory();

    private TTeamGetResponse success; // required
    private TInternalServerException internalServiceException; // required
    private TItemNotFoundException itemNotFoundException; // required
    private TDBInternalException dbInternalException; // required
    private TBadRequestException badRequestException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      ITEM_NOT_FOUND_EXCEPTION((short)2, "itemNotFoundException"),
      DB_INTERNAL_EXCEPTION((short)3, "dbInternalException"),
      BAD_REQUEST_EXCEPTION((short)4, "badRequestException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // ITEM_NOT_FOUND_EXCEPTION
            return ITEM_NOT_FOUND_EXCEPTION;
          case 3: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          case 4: // BAD_REQUEST_EXCEPTION
            return BAD_REQUEST_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeamGetResponse.class)));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.ITEM_NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("itemNotFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemNotFoundException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      tmpMap.put(_Fields.BAD_REQUEST_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("badRequestException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBadRequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeam_result.class, metaDataMap);
    }

    public getTeam_result() {
    }

    public getTeam_result(
      TTeamGetResponse success,
      TInternalServerException internalServiceException,
      TItemNotFoundException itemNotFoundException,
      TDBInternalException dbInternalException,
      TBadRequestException badRequestException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.itemNotFoundException = itemNotFoundException;
      this.dbInternalException = dbInternalException;
      this.badRequestException = badRequestException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeam_result(getTeam_result other) {
      if (other.isSetSuccess()) {
        this.success = new TTeamGetResponse(other.success);
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetItemNotFoundException()) {
        this.itemNotFoundException = new TItemNotFoundException(other.itemNotFoundException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
      if (other.isSetBadRequestException()) {
        this.badRequestException = new TBadRequestException(other.badRequestException);
      }
    }

    public getTeam_result deepCopy() {
      return new getTeam_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.itemNotFoundException = null;
      this.dbInternalException = null;
      this.badRequestException = null;
    }

    public TTeamGetResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TTeamGetResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TItemNotFoundException getItemNotFoundException() {
      return this.itemNotFoundException;
    }

    public void setItemNotFoundException(TItemNotFoundException itemNotFoundException) {
      this.itemNotFoundException = itemNotFoundException;
    }

    public void unsetItemNotFoundException() {
      this.itemNotFoundException = null;
    }

    /** Returns true if field itemNotFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetItemNotFoundException() {
      return this.itemNotFoundException != null;
    }

    public void setItemNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.itemNotFoundException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public TBadRequestException getBadRequestException() {
      return this.badRequestException;
    }

    public void setBadRequestException(TBadRequestException badRequestException) {
      this.badRequestException = badRequestException;
    }

    public void unsetBadRequestException() {
      this.badRequestException = null;
    }

    /** Returns true if field badRequestException is set (has been assigned a value) and false otherwise */
    public boolean isSetBadRequestException() {
      return this.badRequestException != null;
    }

    public void setBadRequestExceptionIsSet(boolean value) {
      if (!value) {
        this.badRequestException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TTeamGetResponse)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case ITEM_NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetItemNotFoundException();
        } else {
          setItemNotFoundException((TItemNotFoundException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      case BAD_REQUEST_EXCEPTION:
        if (value == null) {
          unsetBadRequestException();
        } else {
          setBadRequestException((TBadRequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case ITEM_NOT_FOUND_EXCEPTION:
        return getItemNotFoundException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      case BAD_REQUEST_EXCEPTION:
        return getBadRequestException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case ITEM_NOT_FOUND_EXCEPTION:
        return isSetItemNotFoundException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      case BAD_REQUEST_EXCEPTION:
        return isSetBadRequestException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeam_result)
        return this.equals((getTeam_result)that);
      return false;
    }

    public boolean equals(getTeam_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_itemNotFoundException = true && this.isSetItemNotFoundException();
      boolean that_present_itemNotFoundException = true && that.isSetItemNotFoundException();
      if (this_present_itemNotFoundException || that_present_itemNotFoundException) {
        if (!(this_present_itemNotFoundException && that_present_itemNotFoundException))
          return false;
        if (!this.itemNotFoundException.equals(that.itemNotFoundException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      boolean this_present_badRequestException = true && this.isSetBadRequestException();
      boolean that_present_badRequestException = true && that.isSetBadRequestException();
      if (this_present_badRequestException || that_present_badRequestException) {
        if (!(this_present_badRequestException && that_present_badRequestException))
          return false;
        if (!this.badRequestException.equals(that.badRequestException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetItemNotFoundException()) ? 131071 : 524287);
      if (isSetItemNotFoundException())
        hashCode = hashCode * 8191 + itemNotFoundException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      hashCode = hashCode * 8191 + ((isSetBadRequestException()) ? 131071 : 524287);
      if (isSetBadRequestException())
        hashCode = hashCode * 8191 + badRequestException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTeam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemNotFoundException()).compareTo(other.isSetItemNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemNotFoundException, other.itemNotFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBadRequestException()).compareTo(other.isSetBadRequestException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadRequestException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badRequestException, other.badRequestException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTeam_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemNotFoundException:");
      if (this.itemNotFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.itemNotFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("badRequestException:");
      if (this.badRequestException == null) {
        sb.append("null");
      } else {
        sb.append(this.badRequestException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeam_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTeam_resultStandardScheme getScheme() {
        return new getTeam_resultStandardScheme();
      }
    }

    private static class getTeam_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTeam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TTeamGetResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemNotFoundException = new TItemNotFoundException();
                struct.itemNotFoundException.read(iprot);
                struct.setItemNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BAD_REQUEST_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.badRequestException = new TBadRequestException();
                struct.badRequestException.read(iprot);
                struct.setBadRequestExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.itemNotFoundException != null) {
          oprot.writeFieldBegin(ITEM_NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.itemNotFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.badRequestException != null) {
          oprot.writeFieldBegin(BAD_REQUEST_EXCEPTION_FIELD_DESC);
          struct.badRequestException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeam_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTeam_resultTupleScheme getScheme() {
        return new getTeam_resultTupleScheme();
      }
    }

    private static class getTeam_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTeam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetItemNotFoundException()) {
          optionals.set(2);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(3);
        }
        if (struct.isSetBadRequestException()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetItemNotFoundException()) {
          struct.itemNotFoundException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
        if (struct.isSetBadRequestException()) {
          struct.badRequestException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new TTeamGetResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.itemNotFoundException = new TItemNotFoundException();
          struct.itemNotFoundException.read(iprot);
          struct.setItemNotFoundExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.badRequestException = new TBadRequestException();
          struct.badRequestException.read(iprot);
          struct.setBadRequestExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLOB_args implements org.apache.thrift.TBase<getLOB_args, getLOB_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLOB_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLOB_args");

    private static final org.apache.thrift.protocol.TField LOB_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("lobGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLOB_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLOB_argsTupleSchemeFactory();

    private TLOBGetRequest lobGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOB_GET_REQUEST((short)1, "lobGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOB_GET_REQUEST
            return LOB_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOB_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("lobGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLOBGetRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLOB_args.class, metaDataMap);
    }

    public getLOB_args() {
    }

    public getLOB_args(
      TLOBGetRequest lobGetRequest)
    {
      this();
      this.lobGetRequest = lobGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLOB_args(getLOB_args other) {
      if (other.isSetLobGetRequest()) {
        this.lobGetRequest = new TLOBGetRequest(other.lobGetRequest);
      }
    }

    public getLOB_args deepCopy() {
      return new getLOB_args(this);
    }

    @Override
    public void clear() {
      this.lobGetRequest = null;
    }

    public TLOBGetRequest getLobGetRequest() {
      return this.lobGetRequest;
    }

    public void setLobGetRequest(TLOBGetRequest lobGetRequest) {
      this.lobGetRequest = lobGetRequest;
    }

    public void unsetLobGetRequest() {
      this.lobGetRequest = null;
    }

    /** Returns true if field lobGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetLobGetRequest() {
      return this.lobGetRequest != null;
    }

    public void setLobGetRequestIsSet(boolean value) {
      if (!value) {
        this.lobGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOB_GET_REQUEST:
        if (value == null) {
          unsetLobGetRequest();
        } else {
          setLobGetRequest((TLOBGetRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOB_GET_REQUEST:
        return getLobGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOB_GET_REQUEST:
        return isSetLobGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLOB_args)
        return this.equals((getLOB_args)that);
      return false;
    }

    public boolean equals(getLOB_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lobGetRequest = true && this.isSetLobGetRequest();
      boolean that_present_lobGetRequest = true && that.isSetLobGetRequest();
      if (this_present_lobGetRequest || that_present_lobGetRequest) {
        if (!(this_present_lobGetRequest && that_present_lobGetRequest))
          return false;
        if (!this.lobGetRequest.equals(that.lobGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLobGetRequest()) ? 131071 : 524287);
      if (isSetLobGetRequest())
        hashCode = hashCode * 8191 + lobGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLOB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLobGetRequest()).compareTo(other.isSetLobGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLobGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lobGetRequest, other.lobGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLOB_args(");
      boolean first = true;

      sb.append("lobGetRequest:");
      if (this.lobGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.lobGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lobGetRequest != null) {
        lobGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLOB_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLOB_argsStandardScheme getScheme() {
        return new getLOB_argsStandardScheme();
      }
    }

    private static class getLOB_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLOB_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLOB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOB_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lobGetRequest = new TLOBGetRequest();
                struct.lobGetRequest.read(iprot);
                struct.setLobGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLOB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lobGetRequest != null) {
          oprot.writeFieldBegin(LOB_GET_REQUEST_FIELD_DESC);
          struct.lobGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLOB_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLOB_argsTupleScheme getScheme() {
        return new getLOB_argsTupleScheme();
      }
    }

    private static class getLOB_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLOB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLOB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLobGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLobGetRequest()) {
          struct.lobGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLOB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lobGetRequest = new TLOBGetRequest();
          struct.lobGetRequest.read(iprot);
          struct.setLobGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLOB_result implements org.apache.thrift.TBase<getLOB_result, getLOB_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLOB_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLOB_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("itemNotFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField BAD_REQUEST_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("badRequestException", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLOB_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLOB_resultTupleSchemeFactory();

    private TLOBGetResponse success; // required
    private TInternalServerException internalServiceException; // required
    private TItemNotFoundException itemNotFoundException; // required
    private TDBInternalException dbInternalException; // required
    private TBadRequestException badRequestException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      ITEM_NOT_FOUND_EXCEPTION((short)2, "itemNotFoundException"),
      DB_INTERNAL_EXCEPTION((short)3, "dbInternalException"),
      BAD_REQUEST_EXCEPTION((short)4, "badRequestException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // ITEM_NOT_FOUND_EXCEPTION
            return ITEM_NOT_FOUND_EXCEPTION;
          case 3: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          case 4: // BAD_REQUEST_EXCEPTION
            return BAD_REQUEST_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLOBGetResponse.class)));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.ITEM_NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("itemNotFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemNotFoundException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      tmpMap.put(_Fields.BAD_REQUEST_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("badRequestException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBadRequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLOB_result.class, metaDataMap);
    }

    public getLOB_result() {
    }

    public getLOB_result(
      TLOBGetResponse success,
      TInternalServerException internalServiceException,
      TItemNotFoundException itemNotFoundException,
      TDBInternalException dbInternalException,
      TBadRequestException badRequestException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.itemNotFoundException = itemNotFoundException;
      this.dbInternalException = dbInternalException;
      this.badRequestException = badRequestException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLOB_result(getLOB_result other) {
      if (other.isSetSuccess()) {
        this.success = new TLOBGetResponse(other.success);
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetItemNotFoundException()) {
        this.itemNotFoundException = new TItemNotFoundException(other.itemNotFoundException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
      if (other.isSetBadRequestException()) {
        this.badRequestException = new TBadRequestException(other.badRequestException);
      }
    }

    public getLOB_result deepCopy() {
      return new getLOB_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.itemNotFoundException = null;
      this.dbInternalException = null;
      this.badRequestException = null;
    }

    public TLOBGetResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TLOBGetResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TItemNotFoundException getItemNotFoundException() {
      return this.itemNotFoundException;
    }

    public void setItemNotFoundException(TItemNotFoundException itemNotFoundException) {
      this.itemNotFoundException = itemNotFoundException;
    }

    public void unsetItemNotFoundException() {
      this.itemNotFoundException = null;
    }

    /** Returns true if field itemNotFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetItemNotFoundException() {
      return this.itemNotFoundException != null;
    }

    public void setItemNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.itemNotFoundException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public TBadRequestException getBadRequestException() {
      return this.badRequestException;
    }

    public void setBadRequestException(TBadRequestException badRequestException) {
      this.badRequestException = badRequestException;
    }

    public void unsetBadRequestException() {
      this.badRequestException = null;
    }

    /** Returns true if field badRequestException is set (has been assigned a value) and false otherwise */
    public boolean isSetBadRequestException() {
      return this.badRequestException != null;
    }

    public void setBadRequestExceptionIsSet(boolean value) {
      if (!value) {
        this.badRequestException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TLOBGetResponse)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case ITEM_NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetItemNotFoundException();
        } else {
          setItemNotFoundException((TItemNotFoundException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      case BAD_REQUEST_EXCEPTION:
        if (value == null) {
          unsetBadRequestException();
        } else {
          setBadRequestException((TBadRequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case ITEM_NOT_FOUND_EXCEPTION:
        return getItemNotFoundException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      case BAD_REQUEST_EXCEPTION:
        return getBadRequestException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case ITEM_NOT_FOUND_EXCEPTION:
        return isSetItemNotFoundException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      case BAD_REQUEST_EXCEPTION:
        return isSetBadRequestException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLOB_result)
        return this.equals((getLOB_result)that);
      return false;
    }

    public boolean equals(getLOB_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_itemNotFoundException = true && this.isSetItemNotFoundException();
      boolean that_present_itemNotFoundException = true && that.isSetItemNotFoundException();
      if (this_present_itemNotFoundException || that_present_itemNotFoundException) {
        if (!(this_present_itemNotFoundException && that_present_itemNotFoundException))
          return false;
        if (!this.itemNotFoundException.equals(that.itemNotFoundException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      boolean this_present_badRequestException = true && this.isSetBadRequestException();
      boolean that_present_badRequestException = true && that.isSetBadRequestException();
      if (this_present_badRequestException || that_present_badRequestException) {
        if (!(this_present_badRequestException && that_present_badRequestException))
          return false;
        if (!this.badRequestException.equals(that.badRequestException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetItemNotFoundException()) ? 131071 : 524287);
      if (isSetItemNotFoundException())
        hashCode = hashCode * 8191 + itemNotFoundException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      hashCode = hashCode * 8191 + ((isSetBadRequestException()) ? 131071 : 524287);
      if (isSetBadRequestException())
        hashCode = hashCode * 8191 + badRequestException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLOB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemNotFoundException()).compareTo(other.isSetItemNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemNotFoundException, other.itemNotFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBadRequestException()).compareTo(other.isSetBadRequestException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadRequestException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badRequestException, other.badRequestException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLOB_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemNotFoundException:");
      if (this.itemNotFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.itemNotFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("badRequestException:");
      if (this.badRequestException == null) {
        sb.append("null");
      } else {
        sb.append(this.badRequestException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLOB_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLOB_resultStandardScheme getScheme() {
        return new getLOB_resultStandardScheme();
      }
    }

    private static class getLOB_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLOB_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLOB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TLOBGetResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemNotFoundException = new TItemNotFoundException();
                struct.itemNotFoundException.read(iprot);
                struct.setItemNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BAD_REQUEST_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.badRequestException = new TBadRequestException();
                struct.badRequestException.read(iprot);
                struct.setBadRequestExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLOB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.itemNotFoundException != null) {
          oprot.writeFieldBegin(ITEM_NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.itemNotFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.badRequestException != null) {
          oprot.writeFieldBegin(BAD_REQUEST_EXCEPTION_FIELD_DESC);
          struct.badRequestException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLOB_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLOB_resultTupleScheme getScheme() {
        return new getLOB_resultTupleScheme();
      }
    }

    private static class getLOB_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLOB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLOB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetItemNotFoundException()) {
          optionals.set(2);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(3);
        }
        if (struct.isSetBadRequestException()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetItemNotFoundException()) {
          struct.itemNotFoundException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
        if (struct.isSetBadRequestException()) {
          struct.badRequestException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLOB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new TLOBGetResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.itemNotFoundException = new TItemNotFoundException();
          struct.itemNotFoundException.read(iprot);
          struct.setItemNotFoundExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.badRequestException = new TBadRequestException();
          struct.badRequestException.read(iprot);
          struct.setBadRequestExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCenter_args implements org.apache.thrift.TBase<getCenter_args, getCenter_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCenter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCenter_args");

    private static final org.apache.thrift.protocol.TField CENTER_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("centerGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCenter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCenter_argsTupleSchemeFactory();

    private TCenterGetRequest centerGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CENTER_GET_REQUEST((short)1, "centerGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CENTER_GET_REQUEST
            return CENTER_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CENTER_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("centerGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCenterGetRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCenter_args.class, metaDataMap);
    }

    public getCenter_args() {
    }

    public getCenter_args(
      TCenterGetRequest centerGetRequest)
    {
      this();
      this.centerGetRequest = centerGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCenter_args(getCenter_args other) {
      if (other.isSetCenterGetRequest()) {
        this.centerGetRequest = new TCenterGetRequest(other.centerGetRequest);
      }
    }

    public getCenter_args deepCopy() {
      return new getCenter_args(this);
    }

    @Override
    public void clear() {
      this.centerGetRequest = null;
    }

    public TCenterGetRequest getCenterGetRequest() {
      return this.centerGetRequest;
    }

    public void setCenterGetRequest(TCenterGetRequest centerGetRequest) {
      this.centerGetRequest = centerGetRequest;
    }

    public void unsetCenterGetRequest() {
      this.centerGetRequest = null;
    }

    /** Returns true if field centerGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetCenterGetRequest() {
      return this.centerGetRequest != null;
    }

    public void setCenterGetRequestIsSet(boolean value) {
      if (!value) {
        this.centerGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CENTER_GET_REQUEST:
        if (value == null) {
          unsetCenterGetRequest();
        } else {
          setCenterGetRequest((TCenterGetRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CENTER_GET_REQUEST:
        return getCenterGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CENTER_GET_REQUEST:
        return isSetCenterGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCenter_args)
        return this.equals((getCenter_args)that);
      return false;
    }

    public boolean equals(getCenter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_centerGetRequest = true && this.isSetCenterGetRequest();
      boolean that_present_centerGetRequest = true && that.isSetCenterGetRequest();
      if (this_present_centerGetRequest || that_present_centerGetRequest) {
        if (!(this_present_centerGetRequest && that_present_centerGetRequest))
          return false;
        if (!this.centerGetRequest.equals(that.centerGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCenterGetRequest()) ? 131071 : 524287);
      if (isSetCenterGetRequest())
        hashCode = hashCode * 8191 + centerGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCenter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCenterGetRequest()).compareTo(other.isSetCenterGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCenterGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centerGetRequest, other.centerGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCenter_args(");
      boolean first = true;

      sb.append("centerGetRequest:");
      if (this.centerGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.centerGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (centerGetRequest != null) {
        centerGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCenter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCenter_argsStandardScheme getScheme() {
        return new getCenter_argsStandardScheme();
      }
    }

    private static class getCenter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCenter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCenter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CENTER_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.centerGetRequest = new TCenterGetRequest();
                struct.centerGetRequest.read(iprot);
                struct.setCenterGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCenter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.centerGetRequest != null) {
          oprot.writeFieldBegin(CENTER_GET_REQUEST_FIELD_DESC);
          struct.centerGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCenter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCenter_argsTupleScheme getScheme() {
        return new getCenter_argsTupleScheme();
      }
    }

    private static class getCenter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCenter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCenter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCenterGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCenterGetRequest()) {
          struct.centerGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCenter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.centerGetRequest = new TCenterGetRequest();
          struct.centerGetRequest.read(iprot);
          struct.setCenterGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCenter_result implements org.apache.thrift.TBase<getCenter_result, getCenter_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCenter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCenter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("itemNotFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField BAD_REQUEST_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("badRequestException", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCenter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCenter_resultTupleSchemeFactory();

    private TCenterGetResponse success; // required
    private TInternalServerException internalServiceException; // required
    private TItemNotFoundException itemNotFoundException; // required
    private TDBInternalException dbInternalException; // required
    private TBadRequestException badRequestException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      ITEM_NOT_FOUND_EXCEPTION((short)2, "itemNotFoundException"),
      DB_INTERNAL_EXCEPTION((short)3, "dbInternalException"),
      BAD_REQUEST_EXCEPTION((short)4, "badRequestException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // ITEM_NOT_FOUND_EXCEPTION
            return ITEM_NOT_FOUND_EXCEPTION;
          case 3: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          case 4: // BAD_REQUEST_EXCEPTION
            return BAD_REQUEST_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCenterGetResponse.class)));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.ITEM_NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("itemNotFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemNotFoundException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      tmpMap.put(_Fields.BAD_REQUEST_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("badRequestException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBadRequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCenter_result.class, metaDataMap);
    }

    public getCenter_result() {
    }

    public getCenter_result(
      TCenterGetResponse success,
      TInternalServerException internalServiceException,
      TItemNotFoundException itemNotFoundException,
      TDBInternalException dbInternalException,
      TBadRequestException badRequestException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.itemNotFoundException = itemNotFoundException;
      this.dbInternalException = dbInternalException;
      this.badRequestException = badRequestException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCenter_result(getCenter_result other) {
      if (other.isSetSuccess()) {
        this.success = new TCenterGetResponse(other.success);
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetItemNotFoundException()) {
        this.itemNotFoundException = new TItemNotFoundException(other.itemNotFoundException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
      if (other.isSetBadRequestException()) {
        this.badRequestException = new TBadRequestException(other.badRequestException);
      }
    }

    public getCenter_result deepCopy() {
      return new getCenter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.itemNotFoundException = null;
      this.dbInternalException = null;
      this.badRequestException = null;
    }

    public TCenterGetResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TCenterGetResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TItemNotFoundException getItemNotFoundException() {
      return this.itemNotFoundException;
    }

    public void setItemNotFoundException(TItemNotFoundException itemNotFoundException) {
      this.itemNotFoundException = itemNotFoundException;
    }

    public void unsetItemNotFoundException() {
      this.itemNotFoundException = null;
    }

    /** Returns true if field itemNotFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetItemNotFoundException() {
      return this.itemNotFoundException != null;
    }

    public void setItemNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.itemNotFoundException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public TBadRequestException getBadRequestException() {
      return this.badRequestException;
    }

    public void setBadRequestException(TBadRequestException badRequestException) {
      this.badRequestException = badRequestException;
    }

    public void unsetBadRequestException() {
      this.badRequestException = null;
    }

    /** Returns true if field badRequestException is set (has been assigned a value) and false otherwise */
    public boolean isSetBadRequestException() {
      return this.badRequestException != null;
    }

    public void setBadRequestExceptionIsSet(boolean value) {
      if (!value) {
        this.badRequestException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TCenterGetResponse)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case ITEM_NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetItemNotFoundException();
        } else {
          setItemNotFoundException((TItemNotFoundException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      case BAD_REQUEST_EXCEPTION:
        if (value == null) {
          unsetBadRequestException();
        } else {
          setBadRequestException((TBadRequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case ITEM_NOT_FOUND_EXCEPTION:
        return getItemNotFoundException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      case BAD_REQUEST_EXCEPTION:
        return getBadRequestException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case ITEM_NOT_FOUND_EXCEPTION:
        return isSetItemNotFoundException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      case BAD_REQUEST_EXCEPTION:
        return isSetBadRequestException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCenter_result)
        return this.equals((getCenter_result)that);
      return false;
    }

    public boolean equals(getCenter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_itemNotFoundException = true && this.isSetItemNotFoundException();
      boolean that_present_itemNotFoundException = true && that.isSetItemNotFoundException();
      if (this_present_itemNotFoundException || that_present_itemNotFoundException) {
        if (!(this_present_itemNotFoundException && that_present_itemNotFoundException))
          return false;
        if (!this.itemNotFoundException.equals(that.itemNotFoundException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      boolean this_present_badRequestException = true && this.isSetBadRequestException();
      boolean that_present_badRequestException = true && that.isSetBadRequestException();
      if (this_present_badRequestException || that_present_badRequestException) {
        if (!(this_present_badRequestException && that_present_badRequestException))
          return false;
        if (!this.badRequestException.equals(that.badRequestException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetItemNotFoundException()) ? 131071 : 524287);
      if (isSetItemNotFoundException())
        hashCode = hashCode * 8191 + itemNotFoundException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      hashCode = hashCode * 8191 + ((isSetBadRequestException()) ? 131071 : 524287);
      if (isSetBadRequestException())
        hashCode = hashCode * 8191 + badRequestException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCenter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemNotFoundException()).compareTo(other.isSetItemNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemNotFoundException, other.itemNotFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBadRequestException()).compareTo(other.isSetBadRequestException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadRequestException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badRequestException, other.badRequestException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCenter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemNotFoundException:");
      if (this.itemNotFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.itemNotFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("badRequestException:");
      if (this.badRequestException == null) {
        sb.append("null");
      } else {
        sb.append(this.badRequestException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCenter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCenter_resultStandardScheme getScheme() {
        return new getCenter_resultStandardScheme();
      }
    }

    private static class getCenter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCenter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCenter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TCenterGetResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemNotFoundException = new TItemNotFoundException();
                struct.itemNotFoundException.read(iprot);
                struct.setItemNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BAD_REQUEST_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.badRequestException = new TBadRequestException();
                struct.badRequestException.read(iprot);
                struct.setBadRequestExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCenter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.itemNotFoundException != null) {
          oprot.writeFieldBegin(ITEM_NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.itemNotFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.badRequestException != null) {
          oprot.writeFieldBegin(BAD_REQUEST_EXCEPTION_FIELD_DESC);
          struct.badRequestException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCenter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCenter_resultTupleScheme getScheme() {
        return new getCenter_resultTupleScheme();
      }
    }

    private static class getCenter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCenter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCenter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetItemNotFoundException()) {
          optionals.set(2);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(3);
        }
        if (struct.isSetBadRequestException()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetItemNotFoundException()) {
          struct.itemNotFoundException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
        if (struct.isSetBadRequestException()) {
          struct.badRequestException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCenter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new TCenterGetResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.itemNotFoundException = new TItemNotFoundException();
          struct.itemNotFoundException.read(iprot);
          struct.setItemNotFoundExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.badRequestException = new TBadRequestException();
          struct.badRequestException.read(iprot);
          struct.setBadRequestExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBusiness_args implements org.apache.thrift.TBase<getBusiness_args, getBusiness_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBusiness_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusiness_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("businessGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBusiness_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBusiness_argsTupleSchemeFactory();

    private TBusinessGetRequest businessGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_GET_REQUEST((short)1, "businessGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_GET_REQUEST
            return BUSINESS_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("businessGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBusinessGetRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusiness_args.class, metaDataMap);
    }

    public getBusiness_args() {
    }

    public getBusiness_args(
      TBusinessGetRequest businessGetRequest)
    {
      this();
      this.businessGetRequest = businessGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusiness_args(getBusiness_args other) {
      if (other.isSetBusinessGetRequest()) {
        this.businessGetRequest = new TBusinessGetRequest(other.businessGetRequest);
      }
    }

    public getBusiness_args deepCopy() {
      return new getBusiness_args(this);
    }

    @Override
    public void clear() {
      this.businessGetRequest = null;
    }

    public TBusinessGetRequest getBusinessGetRequest() {
      return this.businessGetRequest;
    }

    public void setBusinessGetRequest(TBusinessGetRequest businessGetRequest) {
      this.businessGetRequest = businessGetRequest;
    }

    public void unsetBusinessGetRequest() {
      this.businessGetRequest = null;
    }

    /** Returns true if field businessGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessGetRequest() {
      return this.businessGetRequest != null;
    }

    public void setBusinessGetRequestIsSet(boolean value) {
      if (!value) {
        this.businessGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BUSINESS_GET_REQUEST:
        if (value == null) {
          unsetBusinessGetRequest();
        } else {
          setBusinessGetRequest((TBusinessGetRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_GET_REQUEST:
        return getBusinessGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_GET_REQUEST:
        return isSetBusinessGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusiness_args)
        return this.equals((getBusiness_args)that);
      return false;
    }

    public boolean equals(getBusiness_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_businessGetRequest = true && this.isSetBusinessGetRequest();
      boolean that_present_businessGetRequest = true && that.isSetBusinessGetRequest();
      if (this_present_businessGetRequest || that_present_businessGetRequest) {
        if (!(this_present_businessGetRequest && that_present_businessGetRequest))
          return false;
        if (!this.businessGetRequest.equals(that.businessGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBusinessGetRequest()) ? 131071 : 524287);
      if (isSetBusinessGetRequest())
        hashCode = hashCode * 8191 + businessGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBusiness_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBusinessGetRequest()).compareTo(other.isSetBusinessGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessGetRequest, other.businessGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBusiness_args(");
      boolean first = true;

      sb.append("businessGetRequest:");
      if (this.businessGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.businessGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (businessGetRequest != null) {
        businessGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusiness_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBusiness_argsStandardScheme getScheme() {
        return new getBusiness_argsStandardScheme();
      }
    }

    private static class getBusiness_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBusiness_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusiness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessGetRequest = new TBusinessGetRequest();
                struct.businessGetRequest.read(iprot);
                struct.setBusinessGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusiness_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessGetRequest != null) {
          oprot.writeFieldBegin(BUSINESS_GET_REQUEST_FIELD_DESC);
          struct.businessGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusiness_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBusiness_argsTupleScheme getScheme() {
        return new getBusiness_argsTupleScheme();
      }
    }

    private static class getBusiness_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBusiness_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusiness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBusinessGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessGetRequest()) {
          struct.businessGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusiness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessGetRequest = new TBusinessGetRequest();
          struct.businessGetRequest.read(iprot);
          struct.setBusinessGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBusiness_result implements org.apache.thrift.TBase<getBusiness_result, getBusiness_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBusiness_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusiness_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("itemNotFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField BAD_REQUEST_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("badRequestException", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBusiness_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBusiness_resultTupleSchemeFactory();

    private TBusinessGetResponse success; // required
    private TInternalServerException internalServiceException; // required
    private TItemNotFoundException itemNotFoundException; // required
    private TDBInternalException dbInternalException; // required
    private TBadRequestException badRequestException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      ITEM_NOT_FOUND_EXCEPTION((short)2, "itemNotFoundException"),
      DB_INTERNAL_EXCEPTION((short)3, "dbInternalException"),
      BAD_REQUEST_EXCEPTION((short)4, "badRequestException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // ITEM_NOT_FOUND_EXCEPTION
            return ITEM_NOT_FOUND_EXCEPTION;
          case 3: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          case 4: // BAD_REQUEST_EXCEPTION
            return BAD_REQUEST_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBusinessGetResponse.class)));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.ITEM_NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("itemNotFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemNotFoundException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      tmpMap.put(_Fields.BAD_REQUEST_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("badRequestException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBadRequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusiness_result.class, metaDataMap);
    }

    public getBusiness_result() {
    }

    public getBusiness_result(
      TBusinessGetResponse success,
      TInternalServerException internalServiceException,
      TItemNotFoundException itemNotFoundException,
      TDBInternalException dbInternalException,
      TBadRequestException badRequestException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.itemNotFoundException = itemNotFoundException;
      this.dbInternalException = dbInternalException;
      this.badRequestException = badRequestException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusiness_result(getBusiness_result other) {
      if (other.isSetSuccess()) {
        this.success = new TBusinessGetResponse(other.success);
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetItemNotFoundException()) {
        this.itemNotFoundException = new TItemNotFoundException(other.itemNotFoundException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
      if (other.isSetBadRequestException()) {
        this.badRequestException = new TBadRequestException(other.badRequestException);
      }
    }

    public getBusiness_result deepCopy() {
      return new getBusiness_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.itemNotFoundException = null;
      this.dbInternalException = null;
      this.badRequestException = null;
    }

    public TBusinessGetResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TBusinessGetResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TItemNotFoundException getItemNotFoundException() {
      return this.itemNotFoundException;
    }

    public void setItemNotFoundException(TItemNotFoundException itemNotFoundException) {
      this.itemNotFoundException = itemNotFoundException;
    }

    public void unsetItemNotFoundException() {
      this.itemNotFoundException = null;
    }

    /** Returns true if field itemNotFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetItemNotFoundException() {
      return this.itemNotFoundException != null;
    }

    public void setItemNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.itemNotFoundException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public TBadRequestException getBadRequestException() {
      return this.badRequestException;
    }

    public void setBadRequestException(TBadRequestException badRequestException) {
      this.badRequestException = badRequestException;
    }

    public void unsetBadRequestException() {
      this.badRequestException = null;
    }

    /** Returns true if field badRequestException is set (has been assigned a value) and false otherwise */
    public boolean isSetBadRequestException() {
      return this.badRequestException != null;
    }

    public void setBadRequestExceptionIsSet(boolean value) {
      if (!value) {
        this.badRequestException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TBusinessGetResponse)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case ITEM_NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetItemNotFoundException();
        } else {
          setItemNotFoundException((TItemNotFoundException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      case BAD_REQUEST_EXCEPTION:
        if (value == null) {
          unsetBadRequestException();
        } else {
          setBadRequestException((TBadRequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case ITEM_NOT_FOUND_EXCEPTION:
        return getItemNotFoundException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      case BAD_REQUEST_EXCEPTION:
        return getBadRequestException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case ITEM_NOT_FOUND_EXCEPTION:
        return isSetItemNotFoundException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      case BAD_REQUEST_EXCEPTION:
        return isSetBadRequestException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusiness_result)
        return this.equals((getBusiness_result)that);
      return false;
    }

    public boolean equals(getBusiness_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_itemNotFoundException = true && this.isSetItemNotFoundException();
      boolean that_present_itemNotFoundException = true && that.isSetItemNotFoundException();
      if (this_present_itemNotFoundException || that_present_itemNotFoundException) {
        if (!(this_present_itemNotFoundException && that_present_itemNotFoundException))
          return false;
        if (!this.itemNotFoundException.equals(that.itemNotFoundException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      boolean this_present_badRequestException = true && this.isSetBadRequestException();
      boolean that_present_badRequestException = true && that.isSetBadRequestException();
      if (this_present_badRequestException || that_present_badRequestException) {
        if (!(this_present_badRequestException && that_present_badRequestException))
          return false;
        if (!this.badRequestException.equals(that.badRequestException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetItemNotFoundException()) ? 131071 : 524287);
      if (isSetItemNotFoundException())
        hashCode = hashCode * 8191 + itemNotFoundException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      hashCode = hashCode * 8191 + ((isSetBadRequestException()) ? 131071 : 524287);
      if (isSetBadRequestException())
        hashCode = hashCode * 8191 + badRequestException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBusiness_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemNotFoundException()).compareTo(other.isSetItemNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemNotFoundException, other.itemNotFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBadRequestException()).compareTo(other.isSetBadRequestException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadRequestException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badRequestException, other.badRequestException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBusiness_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemNotFoundException:");
      if (this.itemNotFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.itemNotFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("badRequestException:");
      if (this.badRequestException == null) {
        sb.append("null");
      } else {
        sb.append(this.badRequestException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusiness_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBusiness_resultStandardScheme getScheme() {
        return new getBusiness_resultStandardScheme();
      }
    }

    private static class getBusiness_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBusiness_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusiness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TBusinessGetResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.itemNotFoundException = new TItemNotFoundException();
                struct.itemNotFoundException.read(iprot);
                struct.setItemNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BAD_REQUEST_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.badRequestException = new TBadRequestException();
                struct.badRequestException.read(iprot);
                struct.setBadRequestExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusiness_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.itemNotFoundException != null) {
          oprot.writeFieldBegin(ITEM_NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.itemNotFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.badRequestException != null) {
          oprot.writeFieldBegin(BAD_REQUEST_EXCEPTION_FIELD_DESC);
          struct.badRequestException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusiness_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBusiness_resultTupleScheme getScheme() {
        return new getBusiness_resultTupleScheme();
      }
    }

    private static class getBusiness_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBusiness_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusiness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetItemNotFoundException()) {
          optionals.set(2);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(3);
        }
        if (struct.isSetBadRequestException()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetItemNotFoundException()) {
          struct.itemNotFoundException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
        if (struct.isSetBadRequestException()) {
          struct.badRequestException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusiness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new TBusinessGetResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.itemNotFoundException = new TItemNotFoundException();
          struct.itemNotFoundException.read(iprot);
          struct.setItemNotFoundExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.badRequestException = new TBadRequestException();
          struct.badRequestException.read(iprot);
          struct.setBadRequestExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listTeams_args implements org.apache.thrift.TBase<listTeams_args, listTeams_args._Fields>, java.io.Serializable, Cloneable, Comparable<listTeams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listTeams_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listTeams_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listTeams_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listTeams_args.class, metaDataMap);
    }

    public listTeams_args() {
    }

    public listTeams_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTeams_args(listTeams_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listTeams_args deepCopy() {
      return new listTeams_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listTeams_args)
        return this.equals((listTeams_args)that);
      return false;
    }

    public boolean equals(listTeams_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listTeams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listTeams_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listTeams_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listTeams_argsStandardScheme getScheme() {
        return new listTeams_argsStandardScheme();
      }
    }

    private static class listTeams_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listTeams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listTeams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listTeams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listTeams_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listTeams_argsTupleScheme getScheme() {
        return new listTeams_argsTupleScheme();
      }
    }

    private static class listTeams_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listTeams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listTeams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listTeams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listTeams_result implements org.apache.thrift.TBase<listTeams_result, listTeams_result._Fields>, java.io.Serializable, Cloneable, Comparable<listTeams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listTeams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listTeams_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listTeams_resultTupleSchemeFactory();

    private java.util.List<TTeamGetResponse> success; // required
    private TInternalServerException internalServiceException; // required
    private TDBInternalException dbInternalException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      DB_INTERNAL_EXCEPTION((short)2, "dbInternalException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeamGetResponse.class))));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listTeams_result.class, metaDataMap);
    }

    public listTeams_result() {
    }

    public listTeams_result(
      java.util.List<TTeamGetResponse> success,
      TInternalServerException internalServiceException,
      TDBInternalException dbInternalException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.dbInternalException = dbInternalException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTeams_result(listTeams_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TTeamGetResponse> __this__success = new java.util.ArrayList<TTeamGetResponse>(other.success.size());
        for (TTeamGetResponse other_element : other.success) {
          __this__success.add(new TTeamGetResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
    }

    public listTeams_result deepCopy() {
      return new listTeams_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.dbInternalException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TTeamGetResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TTeamGetResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TTeamGetResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TTeamGetResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TTeamGetResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TTeamGetResponse>)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listTeams_result)
        return this.equals((listTeams_result)that);
      return false;
    }

    public boolean equals(listTeams_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listTeams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listTeams_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listTeams_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listTeams_resultStandardScheme getScheme() {
        return new listTeams_resultStandardScheme();
      }
    }

    private static class listTeams_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listTeams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listTeams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TTeamGetResponse>(_list0.size);
                  TTeamGetResponse _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new TTeamGetResponse();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listTeams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TTeamGetResponse _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listTeams_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listTeams_resultTupleScheme getScheme() {
        return new listTeams_resultTupleScheme();
      }
    }

    private static class listTeams_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listTeams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listTeams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TTeamGetResponse _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listTeams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TTeamGetResponse>(_list5.size);
            TTeamGetResponse _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new TTeamGetResponse();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listLOBs_args implements org.apache.thrift.TBase<listLOBs_args, listLOBs_args._Fields>, java.io.Serializable, Cloneable, Comparable<listLOBs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listLOBs_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listLOBs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listLOBs_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listLOBs_args.class, metaDataMap);
    }

    public listLOBs_args() {
    }

    public listLOBs_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLOBs_args(listLOBs_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listLOBs_args deepCopy() {
      return new listLOBs_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listLOBs_args)
        return this.equals((listLOBs_args)that);
      return false;
    }

    public boolean equals(listLOBs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listLOBs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listLOBs_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listLOBs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listLOBs_argsStandardScheme getScheme() {
        return new listLOBs_argsStandardScheme();
      }
    }

    private static class listLOBs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listLOBs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listLOBs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listLOBs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listLOBs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listLOBs_argsTupleScheme getScheme() {
        return new listLOBs_argsTupleScheme();
      }
    }

    private static class listLOBs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listLOBs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listLOBs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listLOBs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listLOBs_result implements org.apache.thrift.TBase<listLOBs_result, listLOBs_result._Fields>, java.io.Serializable, Cloneable, Comparable<listLOBs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listLOBs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listLOBs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listLOBs_resultTupleSchemeFactory();

    private java.util.List<TLOBGetResponse> success; // required
    private TInternalServerException internalServiceException; // required
    private TDBInternalException dbInternalException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      DB_INTERNAL_EXCEPTION((short)2, "dbInternalException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLOBGetResponse.class))));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listLOBs_result.class, metaDataMap);
    }

    public listLOBs_result() {
    }

    public listLOBs_result(
      java.util.List<TLOBGetResponse> success,
      TInternalServerException internalServiceException,
      TDBInternalException dbInternalException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.dbInternalException = dbInternalException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLOBs_result(listLOBs_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TLOBGetResponse> __this__success = new java.util.ArrayList<TLOBGetResponse>(other.success.size());
        for (TLOBGetResponse other_element : other.success) {
          __this__success.add(new TLOBGetResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
    }

    public listLOBs_result deepCopy() {
      return new listLOBs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.dbInternalException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TLOBGetResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TLOBGetResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TLOBGetResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TLOBGetResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TLOBGetResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TLOBGetResponse>)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listLOBs_result)
        return this.equals((listLOBs_result)that);
      return false;
    }

    public boolean equals(listLOBs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listLOBs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listLOBs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listLOBs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listLOBs_resultStandardScheme getScheme() {
        return new listLOBs_resultStandardScheme();
      }
    }

    private static class listLOBs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listLOBs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listLOBs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TLOBGetResponse>(_list8.size);
                  TLOBGetResponse _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new TLOBGetResponse();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listLOBs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TLOBGetResponse _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listLOBs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listLOBs_resultTupleScheme getScheme() {
        return new listLOBs_resultTupleScheme();
      }
    }

    private static class listLOBs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listLOBs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listLOBs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TLOBGetResponse _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listLOBs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TLOBGetResponse>(_list13.size);
            TLOBGetResponse _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new TLOBGetResponse();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCenters_args implements org.apache.thrift.TBase<listCenters_args, listCenters_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCenters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCenters_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCenters_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCenters_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCenters_args.class, metaDataMap);
    }

    public listCenters_args() {
    }

    public listCenters_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCenters_args(listCenters_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listCenters_args deepCopy() {
      return new listCenters_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCenters_args)
        return this.equals((listCenters_args)that);
      return false;
    }

    public boolean equals(listCenters_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCenters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCenters_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCenters_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCenters_argsStandardScheme getScheme() {
        return new listCenters_argsStandardScheme();
      }
    }

    private static class listCenters_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCenters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCenters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCenters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCenters_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCenters_argsTupleScheme getScheme() {
        return new listCenters_argsTupleScheme();
      }
    }

    private static class listCenters_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCenters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCenters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCenters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCenters_result implements org.apache.thrift.TBase<listCenters_result, listCenters_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCenters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCenters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCenters_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCenters_resultTupleSchemeFactory();

    private java.util.List<TCenterGetResponse> success; // required
    private TInternalServerException internalServiceException; // required
    private TDBInternalException dbInternalException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      DB_INTERNAL_EXCEPTION((short)2, "dbInternalException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCenterGetResponse.class))));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCenters_result.class, metaDataMap);
    }

    public listCenters_result() {
    }

    public listCenters_result(
      java.util.List<TCenterGetResponse> success,
      TInternalServerException internalServiceException,
      TDBInternalException dbInternalException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.dbInternalException = dbInternalException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCenters_result(listCenters_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TCenterGetResponse> __this__success = new java.util.ArrayList<TCenterGetResponse>(other.success.size());
        for (TCenterGetResponse other_element : other.success) {
          __this__success.add(new TCenterGetResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
    }

    public listCenters_result deepCopy() {
      return new listCenters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.dbInternalException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TCenterGetResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TCenterGetResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TCenterGetResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TCenterGetResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TCenterGetResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TCenterGetResponse>)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCenters_result)
        return this.equals((listCenters_result)that);
      return false;
    }

    public boolean equals(listCenters_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCenters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCenters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCenters_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCenters_resultStandardScheme getScheme() {
        return new listCenters_resultStandardScheme();
      }
    }

    private static class listCenters_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCenters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCenters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TCenterGetResponse>(_list16.size);
                  TCenterGetResponse _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new TCenterGetResponse();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCenters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TCenterGetResponse _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCenters_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCenters_resultTupleScheme getScheme() {
        return new listCenters_resultTupleScheme();
      }
    }

    private static class listCenters_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCenters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCenters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TCenterGetResponse _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCenters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TCenterGetResponse>(_list21.size);
            TCenterGetResponse _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new TCenterGetResponse();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listBusinesses_args implements org.apache.thrift.TBase<listBusinesses_args, listBusinesses_args._Fields>, java.io.Serializable, Cloneable, Comparable<listBusinesses_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBusinesses_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listBusinesses_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listBusinesses_argsTupleSchemeFactory();

    private java.lang.String locale; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)1, "locale");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCALE
            return LOCALE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBusinesses_args.class, metaDataMap);
    }

    public listBusinesses_args() {
    }

    public listBusinesses_args(
      java.lang.String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBusinesses_args(listBusinesses_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public listBusinesses_args deepCopy() {
      return new listBusinesses_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public void setLocale(java.lang.String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listBusinesses_args)
        return this.equals((listBusinesses_args)that);
      return false;
    }

    public boolean equals(listBusinesses_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listBusinesses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listBusinesses_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBusinesses_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBusinesses_argsStandardScheme getScheme() {
        return new listBusinesses_argsStandardScheme();
      }
    }

    private static class listBusinesses_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listBusinesses_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBusinesses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBusinesses_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBusinesses_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBusinesses_argsTupleScheme getScheme() {
        return new listBusinesses_argsTupleScheme();
      }
    }

    private static class listBusinesses_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listBusinesses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBusinesses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBusinesses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listBusinesses_result implements org.apache.thrift.TBase<listBusinesses_result, listBusinesses_result._Fields>, java.io.Serializable, Cloneable, Comparable<listBusinesses_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBusinesses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listBusinesses_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listBusinesses_resultTupleSchemeFactory();

    private java.util.List<TBusinessGetResponse> success; // required
    private TInternalServerException internalServiceException; // required
    private TDBInternalException dbInternalException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      DB_INTERNAL_EXCEPTION((short)2, "dbInternalException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBusinessGetResponse.class))));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBusinesses_result.class, metaDataMap);
    }

    public listBusinesses_result() {
    }

    public listBusinesses_result(
      java.util.List<TBusinessGetResponse> success,
      TInternalServerException internalServiceException,
      TDBInternalException dbInternalException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.dbInternalException = dbInternalException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listBusinesses_result(listBusinesses_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TBusinessGetResponse> __this__success = new java.util.ArrayList<TBusinessGetResponse>(other.success.size());
        for (TBusinessGetResponse other_element : other.success) {
          __this__success.add(new TBusinessGetResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
    }

    public listBusinesses_result deepCopy() {
      return new listBusinesses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.dbInternalException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TBusinessGetResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TBusinessGetResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TBusinessGetResponse>();
      }
      this.success.add(elem);
    }

    public java.util.List<TBusinessGetResponse> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TBusinessGetResponse> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TBusinessGetResponse>)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listBusinesses_result)
        return this.equals((listBusinesses_result)that);
      return false;
    }

    public boolean equals(listBusinesses_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listBusinesses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listBusinesses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listBusinesses_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBusinesses_resultStandardScheme getScheme() {
        return new listBusinesses_resultStandardScheme();
      }
    }

    private static class listBusinesses_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listBusinesses_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listBusinesses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TBusinessGetResponse>(_list24.size);
                  TBusinessGetResponse _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new TBusinessGetResponse();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listBusinesses_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TBusinessGetResponse _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listBusinesses_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listBusinesses_resultTupleScheme getScheme() {
        return new listBusinesses_resultTupleScheme();
      }
    }

    private static class listBusinesses_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listBusinesses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBusinesses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TBusinessGetResponse _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBusinesses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TBusinessGetResponse>(_list29.size);
            TBusinessGetResponse _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new TBusinessGetResponse();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createTeam_args implements org.apache.thrift.TBase<createTeam_args, createTeam_args._Fields>, java.io.Serializable, Cloneable, Comparable<createTeam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTeam_args");

    private static final org.apache.thrift.protocol.TField TEAM_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("teamGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createTeam_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createTeam_argsTupleSchemeFactory();

    private TTeamCreateRequest teamGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_GET_REQUEST((short)1, "teamGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_GET_REQUEST
            return TEAM_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("teamGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeamCreateRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTeam_args.class, metaDataMap);
    }

    public createTeam_args() {
    }

    public createTeam_args(
      TTeamCreateRequest teamGetRequest)
    {
      this();
      this.teamGetRequest = teamGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTeam_args(createTeam_args other) {
      if (other.isSetTeamGetRequest()) {
        this.teamGetRequest = new TTeamCreateRequest(other.teamGetRequest);
      }
    }

    public createTeam_args deepCopy() {
      return new createTeam_args(this);
    }

    @Override
    public void clear() {
      this.teamGetRequest = null;
    }

    public TTeamCreateRequest getTeamGetRequest() {
      return this.teamGetRequest;
    }

    public void setTeamGetRequest(TTeamCreateRequest teamGetRequest) {
      this.teamGetRequest = teamGetRequest;
    }

    public void unsetTeamGetRequest() {
      this.teamGetRequest = null;
    }

    /** Returns true if field teamGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamGetRequest() {
      return this.teamGetRequest != null;
    }

    public void setTeamGetRequestIsSet(boolean value) {
      if (!value) {
        this.teamGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TEAM_GET_REQUEST:
        if (value == null) {
          unsetTeamGetRequest();
        } else {
          setTeamGetRequest((TTeamCreateRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_GET_REQUEST:
        return getTeamGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TEAM_GET_REQUEST:
        return isSetTeamGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createTeam_args)
        return this.equals((createTeam_args)that);
      return false;
    }

    public boolean equals(createTeam_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_teamGetRequest = true && this.isSetTeamGetRequest();
      boolean that_present_teamGetRequest = true && that.isSetTeamGetRequest();
      if (this_present_teamGetRequest || that_present_teamGetRequest) {
        if (!(this_present_teamGetRequest && that_present_teamGetRequest))
          return false;
        if (!this.teamGetRequest.equals(that.teamGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTeamGetRequest()) ? 131071 : 524287);
      if (isSetTeamGetRequest())
        hashCode = hashCode * 8191 + teamGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createTeam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTeamGetRequest()).compareTo(other.isSetTeamGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamGetRequest, other.teamGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createTeam_args(");
      boolean first = true;

      sb.append("teamGetRequest:");
      if (this.teamGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.teamGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (teamGetRequest != null) {
        teamGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTeam_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTeam_argsStandardScheme getScheme() {
        return new createTeam_argsStandardScheme();
      }
    }

    private static class createTeam_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createTeam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTeam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.teamGetRequest = new TTeamCreateRequest();
                struct.teamGetRequest.read(iprot);
                struct.setTeamGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTeam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamGetRequest != null) {
          oprot.writeFieldBegin(TEAM_GET_REQUEST_FIELD_DESC);
          struct.teamGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTeam_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTeam_argsTupleScheme getScheme() {
        return new createTeam_argsTupleScheme();
      }
    }

    private static class createTeam_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createTeam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createTeam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTeamGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTeamGetRequest()) {
          struct.teamGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createTeam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.teamGetRequest = new TTeamCreateRequest();
          struct.teamGetRequest.read(iprot);
          struct.setTeamGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createTeam_result implements org.apache.thrift.TBase<createTeam_result, createTeam_result._Fields>, java.io.Serializable, Cloneable, Comparable<createTeam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTeam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createTeam_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createTeam_resultTupleSchemeFactory();

    private java.lang.String success; // required
    private TInternalServerException internalServiceException; // required
    private TDBInternalException dbInternalException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      DB_INTERNAL_EXCEPTION((short)2, "dbInternalException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CallCenterMetadataId")));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTeam_result.class, metaDataMap);
    }

    public createTeam_result() {
    }

    public createTeam_result(
      java.lang.String success,
      TInternalServerException internalServiceException,
      TDBInternalException dbInternalException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.dbInternalException = dbInternalException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTeam_result(createTeam_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
    }

    public createTeam_result deepCopy() {
      return new createTeam_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.dbInternalException = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createTeam_result)
        return this.equals((createTeam_result)that);
      return false;
    }

    public boolean equals(createTeam_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createTeam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createTeam_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTeam_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTeam_resultStandardScheme getScheme() {
        return new createTeam_resultStandardScheme();
      }
    }

    private static class createTeam_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createTeam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTeam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTeam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTeam_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTeam_resultTupleScheme getScheme() {
        return new createTeam_resultTupleScheme();
      }
    }

    private static class createTeam_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createTeam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createTeam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createTeam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createLOB_args implements org.apache.thrift.TBase<createLOB_args, createLOB_args._Fields>, java.io.Serializable, Cloneable, Comparable<createLOB_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLOB_args");

    private static final org.apache.thrift.protocol.TField TEAM_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("teamGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createLOB_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createLOB_argsTupleSchemeFactory();

    private TLOBCreateRequest teamGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_GET_REQUEST((short)1, "teamGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_GET_REQUEST
            return TEAM_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("teamGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLOBCreateRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLOB_args.class, metaDataMap);
    }

    public createLOB_args() {
    }

    public createLOB_args(
      TLOBCreateRequest teamGetRequest)
    {
      this();
      this.teamGetRequest = teamGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLOB_args(createLOB_args other) {
      if (other.isSetTeamGetRequest()) {
        this.teamGetRequest = new TLOBCreateRequest(other.teamGetRequest);
      }
    }

    public createLOB_args deepCopy() {
      return new createLOB_args(this);
    }

    @Override
    public void clear() {
      this.teamGetRequest = null;
    }

    public TLOBCreateRequest getTeamGetRequest() {
      return this.teamGetRequest;
    }

    public void setTeamGetRequest(TLOBCreateRequest teamGetRequest) {
      this.teamGetRequest = teamGetRequest;
    }

    public void unsetTeamGetRequest() {
      this.teamGetRequest = null;
    }

    /** Returns true if field teamGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamGetRequest() {
      return this.teamGetRequest != null;
    }

    public void setTeamGetRequestIsSet(boolean value) {
      if (!value) {
        this.teamGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TEAM_GET_REQUEST:
        if (value == null) {
          unsetTeamGetRequest();
        } else {
          setTeamGetRequest((TLOBCreateRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_GET_REQUEST:
        return getTeamGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TEAM_GET_REQUEST:
        return isSetTeamGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createLOB_args)
        return this.equals((createLOB_args)that);
      return false;
    }

    public boolean equals(createLOB_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_teamGetRequest = true && this.isSetTeamGetRequest();
      boolean that_present_teamGetRequest = true && that.isSetTeamGetRequest();
      if (this_present_teamGetRequest || that_present_teamGetRequest) {
        if (!(this_present_teamGetRequest && that_present_teamGetRequest))
          return false;
        if (!this.teamGetRequest.equals(that.teamGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTeamGetRequest()) ? 131071 : 524287);
      if (isSetTeamGetRequest())
        hashCode = hashCode * 8191 + teamGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createLOB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTeamGetRequest()).compareTo(other.isSetTeamGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamGetRequest, other.teamGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createLOB_args(");
      boolean first = true;

      sb.append("teamGetRequest:");
      if (this.teamGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.teamGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (teamGetRequest != null) {
        teamGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLOB_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createLOB_argsStandardScheme getScheme() {
        return new createLOB_argsStandardScheme();
      }
    }

    private static class createLOB_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createLOB_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLOB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.teamGetRequest = new TLOBCreateRequest();
                struct.teamGetRequest.read(iprot);
                struct.setTeamGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLOB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamGetRequest != null) {
          oprot.writeFieldBegin(TEAM_GET_REQUEST_FIELD_DESC);
          struct.teamGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLOB_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createLOB_argsTupleScheme getScheme() {
        return new createLOB_argsTupleScheme();
      }
    }

    private static class createLOB_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createLOB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLOB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTeamGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTeamGetRequest()) {
          struct.teamGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLOB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.teamGetRequest = new TLOBCreateRequest();
          struct.teamGetRequest.read(iprot);
          struct.setTeamGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createLOB_result implements org.apache.thrift.TBase<createLOB_result, createLOB_result._Fields>, java.io.Serializable, Cloneable, Comparable<createLOB_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLOB_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createLOB_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createLOB_resultTupleSchemeFactory();

    private java.lang.String success; // required
    private TInternalServerException internalServiceException; // required
    private TDBInternalException dbInternalException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      DB_INTERNAL_EXCEPTION((short)2, "dbInternalException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CallCenterMetadataId")));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLOB_result.class, metaDataMap);
    }

    public createLOB_result() {
    }

    public createLOB_result(
      java.lang.String success,
      TInternalServerException internalServiceException,
      TDBInternalException dbInternalException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.dbInternalException = dbInternalException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLOB_result(createLOB_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
    }

    public createLOB_result deepCopy() {
      return new createLOB_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.dbInternalException = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createLOB_result)
        return this.equals((createLOB_result)that);
      return false;
    }

    public boolean equals(createLOB_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createLOB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createLOB_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLOB_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createLOB_resultStandardScheme getScheme() {
        return new createLOB_resultStandardScheme();
      }
    }

    private static class createLOB_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createLOB_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLOB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLOB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLOB_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createLOB_resultTupleScheme getScheme() {
        return new createLOB_resultTupleScheme();
      }
    }

    private static class createLOB_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createLOB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLOB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLOB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCenter_args implements org.apache.thrift.TBase<createCenter_args, createCenter_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCenter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCenter_args");

    private static final org.apache.thrift.protocol.TField TEAM_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("teamGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCenter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCenter_argsTupleSchemeFactory();

    private TCenterCreateRequest teamGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_GET_REQUEST((short)1, "teamGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_GET_REQUEST
            return TEAM_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("teamGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCenterCreateRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCenter_args.class, metaDataMap);
    }

    public createCenter_args() {
    }

    public createCenter_args(
      TCenterCreateRequest teamGetRequest)
    {
      this();
      this.teamGetRequest = teamGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCenter_args(createCenter_args other) {
      if (other.isSetTeamGetRequest()) {
        this.teamGetRequest = new TCenterCreateRequest(other.teamGetRequest);
      }
    }

    public createCenter_args deepCopy() {
      return new createCenter_args(this);
    }

    @Override
    public void clear() {
      this.teamGetRequest = null;
    }

    public TCenterCreateRequest getTeamGetRequest() {
      return this.teamGetRequest;
    }

    public void setTeamGetRequest(TCenterCreateRequest teamGetRequest) {
      this.teamGetRequest = teamGetRequest;
    }

    public void unsetTeamGetRequest() {
      this.teamGetRequest = null;
    }

    /** Returns true if field teamGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamGetRequest() {
      return this.teamGetRequest != null;
    }

    public void setTeamGetRequestIsSet(boolean value) {
      if (!value) {
        this.teamGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TEAM_GET_REQUEST:
        if (value == null) {
          unsetTeamGetRequest();
        } else {
          setTeamGetRequest((TCenterCreateRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_GET_REQUEST:
        return getTeamGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TEAM_GET_REQUEST:
        return isSetTeamGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createCenter_args)
        return this.equals((createCenter_args)that);
      return false;
    }

    public boolean equals(createCenter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_teamGetRequest = true && this.isSetTeamGetRequest();
      boolean that_present_teamGetRequest = true && that.isSetTeamGetRequest();
      if (this_present_teamGetRequest || that_present_teamGetRequest) {
        if (!(this_present_teamGetRequest && that_present_teamGetRequest))
          return false;
        if (!this.teamGetRequest.equals(that.teamGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTeamGetRequest()) ? 131071 : 524287);
      if (isSetTeamGetRequest())
        hashCode = hashCode * 8191 + teamGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createCenter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTeamGetRequest()).compareTo(other.isSetTeamGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamGetRequest, other.teamGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCenter_args(");
      boolean first = true;

      sb.append("teamGetRequest:");
      if (this.teamGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.teamGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (teamGetRequest != null) {
        teamGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCenter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCenter_argsStandardScheme getScheme() {
        return new createCenter_argsStandardScheme();
      }
    }

    private static class createCenter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCenter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCenter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.teamGetRequest = new TCenterCreateRequest();
                struct.teamGetRequest.read(iprot);
                struct.setTeamGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCenter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamGetRequest != null) {
          oprot.writeFieldBegin(TEAM_GET_REQUEST_FIELD_DESC);
          struct.teamGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCenter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCenter_argsTupleScheme getScheme() {
        return new createCenter_argsTupleScheme();
      }
    }

    private static class createCenter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCenter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCenter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTeamGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTeamGetRequest()) {
          struct.teamGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCenter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.teamGetRequest = new TCenterCreateRequest();
          struct.teamGetRequest.read(iprot);
          struct.setTeamGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCenter_result implements org.apache.thrift.TBase<createCenter_result, createCenter_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCenter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCenter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCenter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCenter_resultTupleSchemeFactory();

    private java.lang.String success; // required
    private TInternalServerException internalServiceException; // required
    private TDBInternalException dbInternalException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      DB_INTERNAL_EXCEPTION((short)2, "dbInternalException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CallCenterMetadataId")));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCenter_result.class, metaDataMap);
    }

    public createCenter_result() {
    }

    public createCenter_result(
      java.lang.String success,
      TInternalServerException internalServiceException,
      TDBInternalException dbInternalException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.dbInternalException = dbInternalException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCenter_result(createCenter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
    }

    public createCenter_result deepCopy() {
      return new createCenter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.dbInternalException = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createCenter_result)
        return this.equals((createCenter_result)that);
      return false;
    }

    public boolean equals(createCenter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createCenter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCenter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCenter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCenter_resultStandardScheme getScheme() {
        return new createCenter_resultStandardScheme();
      }
    }

    private static class createCenter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCenter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCenter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCenter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCenter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCenter_resultTupleScheme getScheme() {
        return new createCenter_resultTupleScheme();
      }
    }

    private static class createCenter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCenter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCenter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCenter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createBusiness_args implements org.apache.thrift.TBase<createBusiness_args, createBusiness_args._Fields>, java.io.Serializable, Cloneable, Comparable<createBusiness_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBusiness_args");

    private static final org.apache.thrift.protocol.TField TEAM_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("teamGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createBusiness_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createBusiness_argsTupleSchemeFactory();

    private TBusinessCreateRequest teamGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEAM_GET_REQUEST((short)1, "teamGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEAM_GET_REQUEST
            return TEAM_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEAM_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("teamGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBusinessCreateRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBusiness_args.class, metaDataMap);
    }

    public createBusiness_args() {
    }

    public createBusiness_args(
      TBusinessCreateRequest teamGetRequest)
    {
      this();
      this.teamGetRequest = teamGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBusiness_args(createBusiness_args other) {
      if (other.isSetTeamGetRequest()) {
        this.teamGetRequest = new TBusinessCreateRequest(other.teamGetRequest);
      }
    }

    public createBusiness_args deepCopy() {
      return new createBusiness_args(this);
    }

    @Override
    public void clear() {
      this.teamGetRequest = null;
    }

    public TBusinessCreateRequest getTeamGetRequest() {
      return this.teamGetRequest;
    }

    public void setTeamGetRequest(TBusinessCreateRequest teamGetRequest) {
      this.teamGetRequest = teamGetRequest;
    }

    public void unsetTeamGetRequest() {
      this.teamGetRequest = null;
    }

    /** Returns true if field teamGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTeamGetRequest() {
      return this.teamGetRequest != null;
    }

    public void setTeamGetRequestIsSet(boolean value) {
      if (!value) {
        this.teamGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TEAM_GET_REQUEST:
        if (value == null) {
          unsetTeamGetRequest();
        } else {
          setTeamGetRequest((TBusinessCreateRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TEAM_GET_REQUEST:
        return getTeamGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TEAM_GET_REQUEST:
        return isSetTeamGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createBusiness_args)
        return this.equals((createBusiness_args)that);
      return false;
    }

    public boolean equals(createBusiness_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_teamGetRequest = true && this.isSetTeamGetRequest();
      boolean that_present_teamGetRequest = true && that.isSetTeamGetRequest();
      if (this_present_teamGetRequest || that_present_teamGetRequest) {
        if (!(this_present_teamGetRequest && that_present_teamGetRequest))
          return false;
        if (!this.teamGetRequest.equals(that.teamGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTeamGetRequest()) ? 131071 : 524287);
      if (isSetTeamGetRequest())
        hashCode = hashCode * 8191 + teamGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createBusiness_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTeamGetRequest()).compareTo(other.isSetTeamGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeamGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamGetRequest, other.teamGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createBusiness_args(");
      boolean first = true;

      sb.append("teamGetRequest:");
      if (this.teamGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.teamGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (teamGetRequest != null) {
        teamGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBusiness_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createBusiness_argsStandardScheme getScheme() {
        return new createBusiness_argsStandardScheme();
      }
    }

    private static class createBusiness_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createBusiness_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBusiness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEAM_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.teamGetRequest = new TBusinessCreateRequest();
                struct.teamGetRequest.read(iprot);
                struct.setTeamGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBusiness_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teamGetRequest != null) {
          oprot.writeFieldBegin(TEAM_GET_REQUEST_FIELD_DESC);
          struct.teamGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBusiness_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createBusiness_argsTupleScheme getScheme() {
        return new createBusiness_argsTupleScheme();
      }
    }

    private static class createBusiness_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createBusiness_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBusiness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTeamGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTeamGetRequest()) {
          struct.teamGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBusiness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.teamGetRequest = new TBusinessCreateRequest();
          struct.teamGetRequest.read(iprot);
          struct.setTeamGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createBusiness_result implements org.apache.thrift.TBase<createBusiness_result, createBusiness_result._Fields>, java.io.Serializable, Cloneable, Comparable<createBusiness_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBusiness_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DB_INTERNAL_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dbInternalException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createBusiness_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createBusiness_resultTupleSchemeFactory();

    private java.lang.String success; // required
    private TInternalServerException internalServiceException; // required
    private TDBInternalException dbInternalException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INTERNAL_SERVICE_EXCEPTION((short)1, "internalServiceException"),
      DB_INTERNAL_EXCEPTION((short)2, "dbInternalException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INTERNAL_SERVICE_EXCEPTION
            return INTERNAL_SERVICE_EXCEPTION;
          case 2: // DB_INTERNAL_EXCEPTION
            return DB_INTERNAL_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CallCenterMetadataId")));
      tmpMap.put(_Fields.INTERNAL_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalServerException.class)));
      tmpMap.put(_Fields.DB_INTERNAL_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dbInternalException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDBInternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBusiness_result.class, metaDataMap);
    }

    public createBusiness_result() {
    }

    public createBusiness_result(
      java.lang.String success,
      TInternalServerException internalServiceException,
      TDBInternalException dbInternalException)
    {
      this();
      this.success = success;
      this.internalServiceException = internalServiceException;
      this.dbInternalException = dbInternalException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBusiness_result(createBusiness_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetInternalServiceException()) {
        this.internalServiceException = new TInternalServerException(other.internalServiceException);
      }
      if (other.isSetDbInternalException()) {
        this.dbInternalException = new TDBInternalException(other.dbInternalException);
      }
    }

    public createBusiness_result deepCopy() {
      return new createBusiness_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.internalServiceException = null;
      this.dbInternalException = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInternalServerException getInternalServiceException() {
      return this.internalServiceException;
    }

    public void setInternalServiceException(TInternalServerException internalServiceException) {
      this.internalServiceException = internalServiceException;
    }

    public void unsetInternalServiceException() {
      this.internalServiceException = null;
    }

    /** Returns true if field internalServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServiceException() {
      return this.internalServiceException != null;
    }

    public void setInternalServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServiceException = null;
      }
    }

    public TDBInternalException getDbInternalException() {
      return this.dbInternalException;
    }

    public void setDbInternalException(TDBInternalException dbInternalException) {
      this.dbInternalException = dbInternalException;
    }

    public void unsetDbInternalException() {
      this.dbInternalException = null;
    }

    /** Returns true if field dbInternalException is set (has been assigned a value) and false otherwise */
    public boolean isSetDbInternalException() {
      return this.dbInternalException != null;
    }

    public void setDbInternalExceptionIsSet(boolean value) {
      if (!value) {
        this.dbInternalException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case INTERNAL_SERVICE_EXCEPTION:
        if (value == null) {
          unsetInternalServiceException();
        } else {
          setInternalServiceException((TInternalServerException)value);
        }
        break;

      case DB_INTERNAL_EXCEPTION:
        if (value == null) {
          unsetDbInternalException();
        } else {
          setDbInternalException((TDBInternalException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case INTERNAL_SERVICE_EXCEPTION:
        return getInternalServiceException();

      case DB_INTERNAL_EXCEPTION:
        return getDbInternalException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INTERNAL_SERVICE_EXCEPTION:
        return isSetInternalServiceException();
      case DB_INTERNAL_EXCEPTION:
        return isSetDbInternalException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createBusiness_result)
        return this.equals((createBusiness_result)that);
      return false;
    }

    public boolean equals(createBusiness_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_internalServiceException = true && this.isSetInternalServiceException();
      boolean that_present_internalServiceException = true && that.isSetInternalServiceException();
      if (this_present_internalServiceException || that_present_internalServiceException) {
        if (!(this_present_internalServiceException && that_present_internalServiceException))
          return false;
        if (!this.internalServiceException.equals(that.internalServiceException))
          return false;
      }

      boolean this_present_dbInternalException = true && this.isSetDbInternalException();
      boolean that_present_dbInternalException = true && that.isSetDbInternalException();
      if (this_present_dbInternalException || that_present_dbInternalException) {
        if (!(this_present_dbInternalException && that_present_dbInternalException))
          return false;
        if (!this.dbInternalException.equals(that.dbInternalException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetInternalServiceException()) ? 131071 : 524287);
      if (isSetInternalServiceException())
        hashCode = hashCode * 8191 + internalServiceException.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbInternalException()) ? 131071 : 524287);
      if (isSetDbInternalException())
        hashCode = hashCode * 8191 + dbInternalException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createBusiness_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInternalServiceException()).compareTo(other.isSetInternalServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServiceException, other.internalServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbInternalException()).compareTo(other.isSetDbInternalException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbInternalException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbInternalException, other.dbInternalException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createBusiness_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServiceException:");
      if (this.internalServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServiceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbInternalException:");
      if (this.dbInternalException == null) {
        sb.append("null");
      } else {
        sb.append(this.dbInternalException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBusiness_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createBusiness_resultStandardScheme getScheme() {
        return new createBusiness_resultStandardScheme();
      }
    }

    private static class createBusiness_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createBusiness_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBusiness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INTERNAL_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServiceException = new TInternalServerException();
                struct.internalServiceException.read(iprot);
                struct.setInternalServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DB_INTERNAL_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dbInternalException = new TDBInternalException();
                struct.dbInternalException.read(iprot);
                struct.setDbInternalExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBusiness_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.internalServiceException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVICE_EXCEPTION_FIELD_DESC);
          struct.internalServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dbInternalException != null) {
          oprot.writeFieldBegin(DB_INTERNAL_EXCEPTION_FIELD_DESC);
          struct.dbInternalException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBusiness_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createBusiness_resultTupleScheme getScheme() {
        return new createBusiness_resultTupleScheme();
      }
    }

    private static class createBusiness_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createBusiness_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBusiness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInternalServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetDbInternalException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetInternalServiceException()) {
          struct.internalServiceException.write(oprot);
        }
        if (struct.isSetDbInternalException()) {
          struct.dbInternalException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBusiness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.internalServiceException = new TInternalServerException();
          struct.internalServiceException.read(iprot);
          struct.setInternalServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbInternalException = new TDBInternalException();
          struct.dbInternalException.read(iprot);
          struct.setDbInternalExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
