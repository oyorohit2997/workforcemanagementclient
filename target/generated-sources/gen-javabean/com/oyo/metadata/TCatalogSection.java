/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.metadata;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-23")
public class TCatalogSection implements org.apache.thrift.TBase<TCatalogSection, TCatalogSection._Fields>, java.io.Serializable, Cloneable, Comparable<TCatalogSection> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCatalogSection");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SECTION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SECTION_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionTitle", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CATALOG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("catalogIds", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCatalogSectionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCatalogSectionTupleSchemeFactory();

  private java.lang.String id; // required
  private java.lang.String sectionKey; // required
  private java.lang.String sectionTitle; // required
  private java.util.List<java.lang.String> catalogIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SECTION_KEY((short)2, "sectionKey"),
    SECTION_TITLE((short)3, "sectionTitle"),
    CATALOG_IDS((short)4, "catalogIds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SECTION_KEY
          return SECTION_KEY;
        case 3: // SECTION_TITLE
          return SECTION_TITLE;
        case 4: // CATALOG_IDS
          return CATALOG_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECTION_KEY, new org.apache.thrift.meta_data.FieldMetaData("sectionKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECTION_TITLE, new org.apache.thrift.meta_data.FieldMetaData("sectionTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATALOG_IDS, new org.apache.thrift.meta_data.FieldMetaData("catalogIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCatalogSection.class, metaDataMap);
  }

  public TCatalogSection() {
  }

  public TCatalogSection(
    java.lang.String id,
    java.lang.String sectionKey,
    java.lang.String sectionTitle,
    java.util.List<java.lang.String> catalogIds)
  {
    this();
    this.id = id;
    this.sectionKey = sectionKey;
    this.sectionTitle = sectionTitle;
    this.catalogIds = catalogIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCatalogSection(TCatalogSection other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetSectionKey()) {
      this.sectionKey = other.sectionKey;
    }
    if (other.isSetSectionTitle()) {
      this.sectionTitle = other.sectionTitle;
    }
    if (other.isSetCatalogIds()) {
      java.util.List<java.lang.String> __this__catalogIds = new java.util.ArrayList<java.lang.String>(other.catalogIds);
      this.catalogIds = __this__catalogIds;
    }
  }

  public TCatalogSection deepCopy() {
    return new TCatalogSection(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.sectionKey = null;
    this.sectionTitle = null;
    this.catalogIds = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public void setId(java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getSectionKey() {
    return this.sectionKey;
  }

  public void setSectionKey(java.lang.String sectionKey) {
    this.sectionKey = sectionKey;
  }

  public void unsetSectionKey() {
    this.sectionKey = null;
  }

  /** Returns true if field sectionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSectionKey() {
    return this.sectionKey != null;
  }

  public void setSectionKeyIsSet(boolean value) {
    if (!value) {
      this.sectionKey = null;
    }
  }

  public java.lang.String getSectionTitle() {
    return this.sectionTitle;
  }

  public void setSectionTitle(java.lang.String sectionTitle) {
    this.sectionTitle = sectionTitle;
  }

  public void unsetSectionTitle() {
    this.sectionTitle = null;
  }

  /** Returns true if field sectionTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetSectionTitle() {
    return this.sectionTitle != null;
  }

  public void setSectionTitleIsSet(boolean value) {
    if (!value) {
      this.sectionTitle = null;
    }
  }

  public int getCatalogIdsSize() {
    return (this.catalogIds == null) ? 0 : this.catalogIds.size();
  }

  public java.util.Iterator<java.lang.String> getCatalogIdsIterator() {
    return (this.catalogIds == null) ? null : this.catalogIds.iterator();
  }

  public void addToCatalogIds(java.lang.String elem) {
    if (this.catalogIds == null) {
      this.catalogIds = new java.util.ArrayList<java.lang.String>();
    }
    this.catalogIds.add(elem);
  }

  public java.util.List<java.lang.String> getCatalogIds() {
    return this.catalogIds;
  }

  public void setCatalogIds(java.util.List<java.lang.String> catalogIds) {
    this.catalogIds = catalogIds;
  }

  public void unsetCatalogIds() {
    this.catalogIds = null;
  }

  /** Returns true if field catalogIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalogIds() {
    return this.catalogIds != null;
  }

  public void setCatalogIdsIsSet(boolean value) {
    if (!value) {
      this.catalogIds = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case SECTION_KEY:
      if (value == null) {
        unsetSectionKey();
      } else {
        setSectionKey((java.lang.String)value);
      }
      break;

    case SECTION_TITLE:
      if (value == null) {
        unsetSectionTitle();
      } else {
        setSectionTitle((java.lang.String)value);
      }
      break;

    case CATALOG_IDS:
      if (value == null) {
        unsetCatalogIds();
      } else {
        setCatalogIds((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SECTION_KEY:
      return getSectionKey();

    case SECTION_TITLE:
      return getSectionTitle();

    case CATALOG_IDS:
      return getCatalogIds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SECTION_KEY:
      return isSetSectionKey();
    case SECTION_TITLE:
      return isSetSectionTitle();
    case CATALOG_IDS:
      return isSetCatalogIds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TCatalogSection)
      return this.equals((TCatalogSection)that);
    return false;
  }

  public boolean equals(TCatalogSection that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_sectionKey = true && this.isSetSectionKey();
    boolean that_present_sectionKey = true && that.isSetSectionKey();
    if (this_present_sectionKey || that_present_sectionKey) {
      if (!(this_present_sectionKey && that_present_sectionKey))
        return false;
      if (!this.sectionKey.equals(that.sectionKey))
        return false;
    }

    boolean this_present_sectionTitle = true && this.isSetSectionTitle();
    boolean that_present_sectionTitle = true && that.isSetSectionTitle();
    if (this_present_sectionTitle || that_present_sectionTitle) {
      if (!(this_present_sectionTitle && that_present_sectionTitle))
        return false;
      if (!this.sectionTitle.equals(that.sectionTitle))
        return false;
    }

    boolean this_present_catalogIds = true && this.isSetCatalogIds();
    boolean that_present_catalogIds = true && that.isSetCatalogIds();
    if (this_present_catalogIds || that_present_catalogIds) {
      if (!(this_present_catalogIds && that_present_catalogIds))
        return false;
      if (!this.catalogIds.equals(that.catalogIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetSectionKey()) ? 131071 : 524287);
    if (isSetSectionKey())
      hashCode = hashCode * 8191 + sectionKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetSectionTitle()) ? 131071 : 524287);
    if (isSetSectionTitle())
      hashCode = hashCode * 8191 + sectionTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetCatalogIds()) ? 131071 : 524287);
    if (isSetCatalogIds())
      hashCode = hashCode * 8191 + catalogIds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCatalogSection other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSectionKey()).compareTo(other.isSetSectionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSectionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionKey, other.sectionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSectionTitle()).compareTo(other.isSetSectionTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSectionTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionTitle, other.sectionTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCatalogIds()).compareTo(other.isSetCatalogIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalogIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalogIds, other.catalogIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCatalogSection(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sectionKey:");
    if (this.sectionKey == null) {
      sb.append("null");
    } else {
      sb.append(this.sectionKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sectionTitle:");
    if (this.sectionTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.sectionTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("catalogIds:");
    if (this.catalogIds == null) {
      sb.append("null");
    } else {
      sb.append(this.catalogIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCatalogSectionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCatalogSectionStandardScheme getScheme() {
      return new TCatalogSectionStandardScheme();
    }
  }

  private static class TCatalogSectionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCatalogSection> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCatalogSection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SECTION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sectionKey = iprot.readString();
              struct.setSectionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECTION_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sectionTitle = iprot.readString();
              struct.setSectionTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATALOG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list20.size);
                java.lang.String _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = iprot.readString();
                  struct.catalogIds.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setCatalogIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCatalogSection struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.sectionKey != null) {
        oprot.writeFieldBegin(SECTION_KEY_FIELD_DESC);
        oprot.writeString(struct.sectionKey);
        oprot.writeFieldEnd();
      }
      if (struct.sectionTitle != null) {
        oprot.writeFieldBegin(SECTION_TITLE_FIELD_DESC);
        oprot.writeString(struct.sectionTitle);
        oprot.writeFieldEnd();
      }
      if (struct.catalogIds != null) {
        oprot.writeFieldBegin(CATALOG_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.catalogIds.size()));
          for (java.lang.String _iter23 : struct.catalogIds)
          {
            oprot.writeString(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCatalogSectionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCatalogSectionTupleScheme getScheme() {
      return new TCatalogSectionTupleScheme();
    }
  }

  private static class TCatalogSectionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCatalogSection> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCatalogSection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSectionKey()) {
        optionals.set(1);
      }
      if (struct.isSetSectionTitle()) {
        optionals.set(2);
      }
      if (struct.isSetCatalogIds()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetSectionKey()) {
        oprot.writeString(struct.sectionKey);
      }
      if (struct.isSetSectionTitle()) {
        oprot.writeString(struct.sectionTitle);
      }
      if (struct.isSetCatalogIds()) {
        {
          oprot.writeI32(struct.catalogIds.size());
          for (java.lang.String _iter24 : struct.catalogIds)
          {
            oprot.writeString(_iter24);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCatalogSection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sectionKey = iprot.readString();
        struct.setSectionKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sectionTitle = iprot.readString();
        struct.setSectionTitleIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.catalogIds = new java.util.ArrayList<java.lang.String>(_list25.size);
          java.lang.String _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = iprot.readString();
            struct.catalogIds.add(_elem26);
          }
        }
        struct.setCatalogIdsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

