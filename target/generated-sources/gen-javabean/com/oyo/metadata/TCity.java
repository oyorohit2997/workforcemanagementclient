/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.metadata;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-27")
public class TCity implements org.apache.thrift.TBase<TCity, TCity._Fields>, java.io.Serializable, Cloneable, Comparable<TCity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCity");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stateName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_PACKAGE_SEARCHABLE_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPackageSearchableCity", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_MICE_SEARCHABLE_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("isMiceSearchableCity", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCityTupleSchemeFactory();

  private java.lang.String id; // required
  private java.lang.String name; // required
  private java.lang.String stateName; // required
  private boolean isPackageSearchableCity; // required
  private boolean isMiceSearchableCity; // required
  private java.lang.String country; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    STATE_NAME((short)3, "stateName"),
    IS_PACKAGE_SEARCHABLE_CITY((short)4, "isPackageSearchableCity"),
    IS_MICE_SEARCHABLE_CITY((short)5, "isMiceSearchableCity"),
    COUNTRY((short)6, "country");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // STATE_NAME
          return STATE_NAME;
        case 4: // IS_PACKAGE_SEARCHABLE_CITY
          return IS_PACKAGE_SEARCHABLE_CITY;
        case 5: // IS_MICE_SEARCHABLE_CITY
          return IS_MICE_SEARCHABLE_CITY;
        case 6: // COUNTRY
          return COUNTRY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISPACKAGESEARCHABLECITY_ISSET_ID = 0;
  private static final int __ISMICESEARCHABLECITY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("stateName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_PACKAGE_SEARCHABLE_CITY, new org.apache.thrift.meta_data.FieldMetaData("isPackageSearchableCity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_MICE_SEARCHABLE_CITY, new org.apache.thrift.meta_data.FieldMetaData("isMiceSearchableCity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCity.class, metaDataMap);
  }

  public TCity() {
  }

  public TCity(
    java.lang.String id,
    java.lang.String name,
    java.lang.String stateName,
    boolean isPackageSearchableCity,
    boolean isMiceSearchableCity,
    java.lang.String country)
  {
    this();
    this.id = id;
    this.name = name;
    this.stateName = stateName;
    this.isPackageSearchableCity = isPackageSearchableCity;
    setIsPackageSearchableCityIsSet(true);
    this.isMiceSearchableCity = isMiceSearchableCity;
    setIsMiceSearchableCityIsSet(true);
    this.country = country;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCity(TCity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetStateName()) {
      this.stateName = other.stateName;
    }
    this.isPackageSearchableCity = other.isPackageSearchableCity;
    this.isMiceSearchableCity = other.isMiceSearchableCity;
    if (other.isSetCountry()) {
      this.country = other.country;
    }
  }

  public TCity deepCopy() {
    return new TCity(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.stateName = null;
    setIsPackageSearchableCityIsSet(false);
    this.isPackageSearchableCity = false;
    setIsMiceSearchableCityIsSet(false);
    this.isMiceSearchableCity = false;
    this.country = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public void setId(java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public void setName(java.lang.String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getStateName() {
    return this.stateName;
  }

  public void setStateName(java.lang.String stateName) {
    this.stateName = stateName;
  }

  public void unsetStateName() {
    this.stateName = null;
  }

  /** Returns true if field stateName is set (has been assigned a value) and false otherwise */
  public boolean isSetStateName() {
    return this.stateName != null;
  }

  public void setStateNameIsSet(boolean value) {
    if (!value) {
      this.stateName = null;
    }
  }

  public boolean isIsPackageSearchableCity() {
    return this.isPackageSearchableCity;
  }

  public void setIsPackageSearchableCity(boolean isPackageSearchableCity) {
    this.isPackageSearchableCity = isPackageSearchableCity;
    setIsPackageSearchableCityIsSet(true);
  }

  public void unsetIsPackageSearchableCity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPACKAGESEARCHABLECITY_ISSET_ID);
  }

  /** Returns true if field isPackageSearchableCity is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPackageSearchableCity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPACKAGESEARCHABLECITY_ISSET_ID);
  }

  public void setIsPackageSearchableCityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPACKAGESEARCHABLECITY_ISSET_ID, value);
  }

  public boolean isIsMiceSearchableCity() {
    return this.isMiceSearchableCity;
  }

  public void setIsMiceSearchableCity(boolean isMiceSearchableCity) {
    this.isMiceSearchableCity = isMiceSearchableCity;
    setIsMiceSearchableCityIsSet(true);
  }

  public void unsetIsMiceSearchableCity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMICESEARCHABLECITY_ISSET_ID);
  }

  /** Returns true if field isMiceSearchableCity is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMiceSearchableCity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMICESEARCHABLECITY_ISSET_ID);
  }

  public void setIsMiceSearchableCityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMICESEARCHABLECITY_ISSET_ID, value);
  }

  public java.lang.String getCountry() {
    return this.country;
  }

  public void setCountry(java.lang.String country) {
    this.country = country;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case STATE_NAME:
      if (value == null) {
        unsetStateName();
      } else {
        setStateName((java.lang.String)value);
      }
      break;

    case IS_PACKAGE_SEARCHABLE_CITY:
      if (value == null) {
        unsetIsPackageSearchableCity();
      } else {
        setIsPackageSearchableCity((java.lang.Boolean)value);
      }
      break;

    case IS_MICE_SEARCHABLE_CITY:
      if (value == null) {
        unsetIsMiceSearchableCity();
      } else {
        setIsMiceSearchableCity((java.lang.Boolean)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case STATE_NAME:
      return getStateName();

    case IS_PACKAGE_SEARCHABLE_CITY:
      return isIsPackageSearchableCity();

    case IS_MICE_SEARCHABLE_CITY:
      return isIsMiceSearchableCity();

    case COUNTRY:
      return getCountry();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case STATE_NAME:
      return isSetStateName();
    case IS_PACKAGE_SEARCHABLE_CITY:
      return isSetIsPackageSearchableCity();
    case IS_MICE_SEARCHABLE_CITY:
      return isSetIsMiceSearchableCity();
    case COUNTRY:
      return isSetCountry();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TCity)
      return this.equals((TCity)that);
    return false;
  }

  public boolean equals(TCity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_stateName = true && this.isSetStateName();
    boolean that_present_stateName = true && that.isSetStateName();
    if (this_present_stateName || that_present_stateName) {
      if (!(this_present_stateName && that_present_stateName))
        return false;
      if (!this.stateName.equals(that.stateName))
        return false;
    }

    boolean this_present_isPackageSearchableCity = true;
    boolean that_present_isPackageSearchableCity = true;
    if (this_present_isPackageSearchableCity || that_present_isPackageSearchableCity) {
      if (!(this_present_isPackageSearchableCity && that_present_isPackageSearchableCity))
        return false;
      if (this.isPackageSearchableCity != that.isPackageSearchableCity)
        return false;
    }

    boolean this_present_isMiceSearchableCity = true;
    boolean that_present_isMiceSearchableCity = true;
    if (this_present_isMiceSearchableCity || that_present_isMiceSearchableCity) {
      if (!(this_present_isMiceSearchableCity && that_present_isMiceSearchableCity))
        return false;
      if (this.isMiceSearchableCity != that.isMiceSearchableCity)
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetStateName()) ? 131071 : 524287);
    if (isSetStateName())
      hashCode = hashCode * 8191 + stateName.hashCode();

    hashCode = hashCode * 8191 + ((isPackageSearchableCity) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isMiceSearchableCity) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCountry()) ? 131071 : 524287);
    if (isSetCountry())
      hashCode = hashCode * 8191 + country.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStateName()).compareTo(other.isSetStateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateName, other.stateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsPackageSearchableCity()).compareTo(other.isSetIsPackageSearchableCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPackageSearchableCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPackageSearchableCity, other.isPackageSearchableCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsMiceSearchableCity()).compareTo(other.isSetIsMiceSearchableCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMiceSearchableCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMiceSearchableCity, other.isMiceSearchableCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCity(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stateName:");
    if (this.stateName == null) {
      sb.append("null");
    } else {
      sb.append(this.stateName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPackageSearchableCity:");
    sb.append(this.isPackageSearchableCity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMiceSearchableCity:");
    sb.append(this.isMiceSearchableCity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCityStandardScheme getScheme() {
      return new TCityStandardScheme();
    }
  }

  private static class TCityStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stateName = iprot.readString();
              struct.setStateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_PACKAGE_SEARCHABLE_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPackageSearchableCity = iprot.readBool();
              struct.setIsPackageSearchableCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_MICE_SEARCHABLE_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMiceSearchableCity = iprot.readBool();
              struct.setIsMiceSearchableCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.stateName != null) {
        oprot.writeFieldBegin(STATE_NAME_FIELD_DESC);
        oprot.writeString(struct.stateName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_PACKAGE_SEARCHABLE_CITY_FIELD_DESC);
      oprot.writeBool(struct.isPackageSearchableCity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MICE_SEARCHABLE_CITY_FIELD_DESC);
      oprot.writeBool(struct.isMiceSearchableCity);
      oprot.writeFieldEnd();
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(struct.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCityTupleScheme getScheme() {
      return new TCityTupleScheme();
    }
  }

  private static class TCityTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetStateName()) {
        optionals.set(2);
      }
      if (struct.isSetIsPackageSearchableCity()) {
        optionals.set(3);
      }
      if (struct.isSetIsMiceSearchableCity()) {
        optionals.set(4);
      }
      if (struct.isSetCountry()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetStateName()) {
        oprot.writeString(struct.stateName);
      }
      if (struct.isSetIsPackageSearchableCity()) {
        oprot.writeBool(struct.isPackageSearchableCity);
      }
      if (struct.isSetIsMiceSearchableCity()) {
        oprot.writeBool(struct.isMiceSearchableCity);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stateName = iprot.readString();
        struct.setStateNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isPackageSearchableCity = iprot.readBool();
        struct.setIsPackageSearchableCityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isMiceSearchableCity = iprot.readBool();
        struct.setIsMiceSearchableCityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

