/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.metadata;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-23")
public class TCountry implements org.apache.thrift.TBase<TCountry, TCountry._Fields>, java.io.Serializable, Cloneable, Comparable<TCountry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCountry");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_PACKAGE_SEARCHABLE_COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPackageSearchableCountry", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_MICE_SEARCHABLE_COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("isMiceSearchableCountry", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCountryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCountryTupleSchemeFactory();

  private java.lang.String id; // required
  private java.lang.String name; // required
  private boolean isPackageSearchableCountry; // required
  private boolean isMiceSearchableCountry; // required
  private java.lang.String countryCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    IS_PACKAGE_SEARCHABLE_COUNTRY((short)3, "isPackageSearchableCountry"),
    IS_MICE_SEARCHABLE_COUNTRY((short)4, "isMiceSearchableCountry"),
    COUNTRY_CODE((short)5, "countryCode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // IS_PACKAGE_SEARCHABLE_COUNTRY
          return IS_PACKAGE_SEARCHABLE_COUNTRY;
        case 4: // IS_MICE_SEARCHABLE_COUNTRY
          return IS_MICE_SEARCHABLE_COUNTRY;
        case 5: // COUNTRY_CODE
          return COUNTRY_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISPACKAGESEARCHABLECOUNTRY_ISSET_ID = 0;
  private static final int __ISMICESEARCHABLECOUNTRY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_PACKAGE_SEARCHABLE_COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("isPackageSearchableCountry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_MICE_SEARCHABLE_COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("isMiceSearchableCountry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCountry.class, metaDataMap);
  }

  public TCountry() {
  }

  public TCountry(
    java.lang.String id,
    java.lang.String name,
    boolean isPackageSearchableCountry,
    boolean isMiceSearchableCountry,
    java.lang.String countryCode)
  {
    this();
    this.id = id;
    this.name = name;
    this.isPackageSearchableCountry = isPackageSearchableCountry;
    setIsPackageSearchableCountryIsSet(true);
    this.isMiceSearchableCountry = isMiceSearchableCountry;
    setIsMiceSearchableCountryIsSet(true);
    this.countryCode = countryCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCountry(TCountry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.isPackageSearchableCountry = other.isPackageSearchableCountry;
    this.isMiceSearchableCountry = other.isMiceSearchableCountry;
    if (other.isSetCountryCode()) {
      this.countryCode = other.countryCode;
    }
  }

  public TCountry deepCopy() {
    return new TCountry(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    setIsPackageSearchableCountryIsSet(false);
    this.isPackageSearchableCountry = false;
    setIsMiceSearchableCountryIsSet(false);
    this.isMiceSearchableCountry = false;
    this.countryCode = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public void setId(java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public void setName(java.lang.String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isIsPackageSearchableCountry() {
    return this.isPackageSearchableCountry;
  }

  public void setIsPackageSearchableCountry(boolean isPackageSearchableCountry) {
    this.isPackageSearchableCountry = isPackageSearchableCountry;
    setIsPackageSearchableCountryIsSet(true);
  }

  public void unsetIsPackageSearchableCountry() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPACKAGESEARCHABLECOUNTRY_ISSET_ID);
  }

  /** Returns true if field isPackageSearchableCountry is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPackageSearchableCountry() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPACKAGESEARCHABLECOUNTRY_ISSET_ID);
  }

  public void setIsPackageSearchableCountryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPACKAGESEARCHABLECOUNTRY_ISSET_ID, value);
  }

  public boolean isIsMiceSearchableCountry() {
    return this.isMiceSearchableCountry;
  }

  public void setIsMiceSearchableCountry(boolean isMiceSearchableCountry) {
    this.isMiceSearchableCountry = isMiceSearchableCountry;
    setIsMiceSearchableCountryIsSet(true);
  }

  public void unsetIsMiceSearchableCountry() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMICESEARCHABLECOUNTRY_ISSET_ID);
  }

  /** Returns true if field isMiceSearchableCountry is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMiceSearchableCountry() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMICESEARCHABLECOUNTRY_ISSET_ID);
  }

  public void setIsMiceSearchableCountryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMICESEARCHABLECOUNTRY_ISSET_ID, value);
  }

  public java.lang.String getCountryCode() {
    return this.countryCode;
  }

  public void setCountryCode(java.lang.String countryCode) {
    this.countryCode = countryCode;
  }

  public void unsetCountryCode() {
    this.countryCode = null;
  }

  /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryCode() {
    return this.countryCode != null;
  }

  public void setCountryCodeIsSet(boolean value) {
    if (!value) {
      this.countryCode = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case IS_PACKAGE_SEARCHABLE_COUNTRY:
      if (value == null) {
        unsetIsPackageSearchableCountry();
      } else {
        setIsPackageSearchableCountry((java.lang.Boolean)value);
      }
      break;

    case IS_MICE_SEARCHABLE_COUNTRY:
      if (value == null) {
        unsetIsMiceSearchableCountry();
      } else {
        setIsMiceSearchableCountry((java.lang.Boolean)value);
      }
      break;

    case COUNTRY_CODE:
      if (value == null) {
        unsetCountryCode();
      } else {
        setCountryCode((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case IS_PACKAGE_SEARCHABLE_COUNTRY:
      return isIsPackageSearchableCountry();

    case IS_MICE_SEARCHABLE_COUNTRY:
      return isIsMiceSearchableCountry();

    case COUNTRY_CODE:
      return getCountryCode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case IS_PACKAGE_SEARCHABLE_COUNTRY:
      return isSetIsPackageSearchableCountry();
    case IS_MICE_SEARCHABLE_COUNTRY:
      return isSetIsMiceSearchableCountry();
    case COUNTRY_CODE:
      return isSetCountryCode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TCountry)
      return this.equals((TCountry)that);
    return false;
  }

  public boolean equals(TCountry that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_isPackageSearchableCountry = true;
    boolean that_present_isPackageSearchableCountry = true;
    if (this_present_isPackageSearchableCountry || that_present_isPackageSearchableCountry) {
      if (!(this_present_isPackageSearchableCountry && that_present_isPackageSearchableCountry))
        return false;
      if (this.isPackageSearchableCountry != that.isPackageSearchableCountry)
        return false;
    }

    boolean this_present_isMiceSearchableCountry = true;
    boolean that_present_isMiceSearchableCountry = true;
    if (this_present_isMiceSearchableCountry || that_present_isMiceSearchableCountry) {
      if (!(this_present_isMiceSearchableCountry && that_present_isMiceSearchableCountry))
        return false;
      if (this.isMiceSearchableCountry != that.isMiceSearchableCountry)
        return false;
    }

    boolean this_present_countryCode = true && this.isSetCountryCode();
    boolean that_present_countryCode = true && that.isSetCountryCode();
    if (this_present_countryCode || that_present_countryCode) {
      if (!(this_present_countryCode && that_present_countryCode))
        return false;
      if (!this.countryCode.equals(that.countryCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isPackageSearchableCountry) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isMiceSearchableCountry) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCountryCode()) ? 131071 : 524287);
    if (isSetCountryCode())
      hashCode = hashCode * 8191 + countryCode.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCountry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsPackageSearchableCountry()).compareTo(other.isSetIsPackageSearchableCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPackageSearchableCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPackageSearchableCountry, other.isPackageSearchableCountry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsMiceSearchableCountry()).compareTo(other.isSetIsMiceSearchableCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMiceSearchableCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMiceSearchableCountry, other.isMiceSearchableCountry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCountry(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPackageSearchableCountry:");
    sb.append(this.isPackageSearchableCountry);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMiceSearchableCountry:");
    sb.append(this.isMiceSearchableCountry);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countryCode:");
    if (this.countryCode == null) {
      sb.append("null");
    } else {
      sb.append(this.countryCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCountryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCountryStandardScheme getScheme() {
      return new TCountryStandardScheme();
    }
  }

  private static class TCountryStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCountry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCountry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_PACKAGE_SEARCHABLE_COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPackageSearchableCountry = iprot.readBool();
              struct.setIsPackageSearchableCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_MICE_SEARCHABLE_COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMiceSearchableCountry = iprot.readBool();
              struct.setIsMiceSearchableCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryCode = iprot.readString();
              struct.setCountryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCountry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_PACKAGE_SEARCHABLE_COUNTRY_FIELD_DESC);
      oprot.writeBool(struct.isPackageSearchableCountry);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MICE_SEARCHABLE_COUNTRY_FIELD_DESC);
      oprot.writeBool(struct.isMiceSearchableCountry);
      oprot.writeFieldEnd();
      if (struct.countryCode != null) {
        oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
        oprot.writeString(struct.countryCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCountryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCountryTupleScheme getScheme() {
      return new TCountryTupleScheme();
    }
  }

  private static class TCountryTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCountry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCountry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetIsPackageSearchableCountry()) {
        optionals.set(2);
      }
      if (struct.isSetIsMiceSearchableCountry()) {
        optionals.set(3);
      }
      if (struct.isSetCountryCode()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIsPackageSearchableCountry()) {
        oprot.writeBool(struct.isPackageSearchableCountry);
      }
      if (struct.isSetIsMiceSearchableCountry()) {
        oprot.writeBool(struct.isMiceSearchableCountry);
      }
      if (struct.isSetCountryCode()) {
        oprot.writeString(struct.countryCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCountry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isPackageSearchableCountry = iprot.readBool();
        struct.setIsPackageSearchableCountryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isMiceSearchableCountry = iprot.readBool();
        struct.setIsMiceSearchableCountryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.countryCode = iprot.readString();
        struct.setCountryCodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

