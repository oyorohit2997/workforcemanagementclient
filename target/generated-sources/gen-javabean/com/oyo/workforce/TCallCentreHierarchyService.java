/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.workforce;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-03-03")
public class TCallCentreHierarchyService {

  public interface Iface {

    public TResponseStatus addEmployeeCallCentreHierarchyInfo(TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo) throws TInvalidUserProfileIdException, TMetaIdDoesNotExists, TEmployeeAlreadyExists, org.apache.thrift.TException;

    public TGetLevelInfoResponse getLevelInfo(TGetLevelInfoRequest tGetLevelInfoRequest) throws TEmployeeDoesntExistException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addEmployeeCallCentreHierarchyInfo(TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException;

    public void getLevelInfo(TGetLevelInfoRequest tGetLevelInfoRequest, org.apache.thrift.async.AsyncMethodCallback<TGetLevelInfoResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TResponseStatus addEmployeeCallCentreHierarchyInfo(TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo) throws TInvalidUserProfileIdException, TMetaIdDoesNotExists, TEmployeeAlreadyExists, org.apache.thrift.TException
    {
      send_addEmployeeCallCentreHierarchyInfo(tAddCallCentreHierarchyInfo);
      return recv_addEmployeeCallCentreHierarchyInfo();
    }

    public void send_addEmployeeCallCentreHierarchyInfo(TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo) throws org.apache.thrift.TException
    {
      addEmployeeCallCentreHierarchyInfo_args args = new addEmployeeCallCentreHierarchyInfo_args();
      args.setTAddCallCentreHierarchyInfo(tAddCallCentreHierarchyInfo);
      sendBase("addEmployeeCallCentreHierarchyInfo", args);
    }

    public TResponseStatus recv_addEmployeeCallCentreHierarchyInfo() throws TInvalidUserProfileIdException, TMetaIdDoesNotExists, TEmployeeAlreadyExists, org.apache.thrift.TException
    {
      addEmployeeCallCentreHierarchyInfo_result result = new addEmployeeCallCentreHierarchyInfo_result();
      receiveBase(result, "addEmployeeCallCentreHierarchyInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tMetaIdDoesNotExists != null) {
        throw result.tMetaIdDoesNotExists;
      }
      if (result.tEmployeeAlreadyExists != null) {
        throw result.tEmployeeAlreadyExists;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addEmployeeCallCentreHierarchyInfo failed: unknown result");
    }

    public TGetLevelInfoResponse getLevelInfo(TGetLevelInfoRequest tGetLevelInfoRequest) throws TEmployeeDoesntExistException, org.apache.thrift.TException
    {
      send_getLevelInfo(tGetLevelInfoRequest);
      return recv_getLevelInfo();
    }

    public void send_getLevelInfo(TGetLevelInfoRequest tGetLevelInfoRequest) throws org.apache.thrift.TException
    {
      getLevelInfo_args args = new getLevelInfo_args();
      args.setTGetLevelInfoRequest(tGetLevelInfoRequest);
      sendBase("getLevelInfo", args);
    }

    public TGetLevelInfoResponse recv_getLevelInfo() throws TEmployeeDoesntExistException, org.apache.thrift.TException
    {
      getLevelInfo_result result = new getLevelInfo_result();
      receiveBase(result, "getLevelInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tEmployeeDoesntExistException != null) {
        throw result.tEmployeeDoesntExistException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLevelInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addEmployeeCallCentreHierarchyInfo(TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addEmployeeCallCentreHierarchyInfo_call method_call = new addEmployeeCallCentreHierarchyInfo_call(tAddCallCentreHierarchyInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addEmployeeCallCentreHierarchyInfo_call extends org.apache.thrift.async.TAsyncMethodCall<TResponseStatus> {
      private TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo;
      public addEmployeeCallCentreHierarchyInfo_call(TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tAddCallCentreHierarchyInfo = tAddCallCentreHierarchyInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addEmployeeCallCentreHierarchyInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addEmployeeCallCentreHierarchyInfo_args args = new addEmployeeCallCentreHierarchyInfo_args();
        args.setTAddCallCentreHierarchyInfo(tAddCallCentreHierarchyInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResponseStatus getResult() throws TInvalidUserProfileIdException, TMetaIdDoesNotExists, TEmployeeAlreadyExists, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addEmployeeCallCentreHierarchyInfo();
      }
    }

    public void getLevelInfo(TGetLevelInfoRequest tGetLevelInfoRequest, org.apache.thrift.async.AsyncMethodCallback<TGetLevelInfoResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLevelInfo_call method_call = new getLevelInfo_call(tGetLevelInfoRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLevelInfo_call extends org.apache.thrift.async.TAsyncMethodCall<TGetLevelInfoResponse> {
      private TGetLevelInfoRequest tGetLevelInfoRequest;
      public getLevelInfo_call(TGetLevelInfoRequest tGetLevelInfoRequest, org.apache.thrift.async.AsyncMethodCallback<TGetLevelInfoResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tGetLevelInfoRequest = tGetLevelInfoRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLevelInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLevelInfo_args args = new getLevelInfo_args();
        args.setTGetLevelInfoRequest(tGetLevelInfoRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGetLevelInfoResponse getResult() throws TEmployeeDoesntExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLevelInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addEmployeeCallCentreHierarchyInfo", new addEmployeeCallCentreHierarchyInfo());
      processMap.put("getLevelInfo", new getLevelInfo());
      return processMap;
    }

    public static class addEmployeeCallCentreHierarchyInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addEmployeeCallCentreHierarchyInfo_args> {
      public addEmployeeCallCentreHierarchyInfo() {
        super("addEmployeeCallCentreHierarchyInfo");
      }

      public addEmployeeCallCentreHierarchyInfo_args getEmptyArgsInstance() {
        return new addEmployeeCallCentreHierarchyInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addEmployeeCallCentreHierarchyInfo_result getResult(I iface, addEmployeeCallCentreHierarchyInfo_args args) throws org.apache.thrift.TException {
        addEmployeeCallCentreHierarchyInfo_result result = new addEmployeeCallCentreHierarchyInfo_result();
        try {
          result.success = iface.addEmployeeCallCentreHierarchyInfo(args.tAddCallCentreHierarchyInfo);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TMetaIdDoesNotExists tMetaIdDoesNotExists) {
          result.tMetaIdDoesNotExists = tMetaIdDoesNotExists;
        } catch (TEmployeeAlreadyExists tEmployeeAlreadyExists) {
          result.tEmployeeAlreadyExists = tEmployeeAlreadyExists;
        }
        return result;
      }
    }

    public static class getLevelInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLevelInfo_args> {
      public getLevelInfo() {
        super("getLevelInfo");
      }

      public getLevelInfo_args getEmptyArgsInstance() {
        return new getLevelInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLevelInfo_result getResult(I iface, getLevelInfo_args args) throws org.apache.thrift.TException {
        getLevelInfo_result result = new getLevelInfo_result();
        try {
          result.success = iface.getLevelInfo(args.tGetLevelInfoRequest);
        } catch (TEmployeeDoesntExistException tEmployeeDoesntExistException) {
          result.tEmployeeDoesntExistException = tEmployeeDoesntExistException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addEmployeeCallCentreHierarchyInfo", new addEmployeeCallCentreHierarchyInfo());
      processMap.put("getLevelInfo", new getLevelInfo());
      return processMap;
    }

    public static class addEmployeeCallCentreHierarchyInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addEmployeeCallCentreHierarchyInfo_args, TResponseStatus> {
      public addEmployeeCallCentreHierarchyInfo() {
        super("addEmployeeCallCentreHierarchyInfo");
      }

      public addEmployeeCallCentreHierarchyInfo_args getEmptyArgsInstance() {
        return new addEmployeeCallCentreHierarchyInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TResponseStatus>() { 
          public void onComplete(TResponseStatus o) {
            addEmployeeCallCentreHierarchyInfo_result result = new addEmployeeCallCentreHierarchyInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addEmployeeCallCentreHierarchyInfo_result result = new addEmployeeCallCentreHierarchyInfo_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TMetaIdDoesNotExists) {
              result.tMetaIdDoesNotExists = (TMetaIdDoesNotExists) e;
              result.setTMetaIdDoesNotExistsIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeAlreadyExists) {
              result.tEmployeeAlreadyExists = (TEmployeeAlreadyExists) e;
              result.setTEmployeeAlreadyExistsIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addEmployeeCallCentreHierarchyInfo_args args, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
        iface.addEmployeeCallCentreHierarchyInfo(args.tAddCallCentreHierarchyInfo,resultHandler);
      }
    }

    public static class getLevelInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLevelInfo_args, TGetLevelInfoResponse> {
      public getLevelInfo() {
        super("getLevelInfo");
      }

      public getLevelInfo_args getEmptyArgsInstance() {
        return new getLevelInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TGetLevelInfoResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TGetLevelInfoResponse>() { 
          public void onComplete(TGetLevelInfoResponse o) {
            getLevelInfo_result result = new getLevelInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLevelInfo_result result = new getLevelInfo_result();
            if (e instanceof TEmployeeDoesntExistException) {
              result.tEmployeeDoesntExistException = (TEmployeeDoesntExistException) e;
              result.setTEmployeeDoesntExistExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLevelInfo_args args, org.apache.thrift.async.AsyncMethodCallback<TGetLevelInfoResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getLevelInfo(args.tGetLevelInfoRequest,resultHandler);
      }
    }

  }

  public static class addEmployeeCallCentreHierarchyInfo_args implements org.apache.thrift.TBase<addEmployeeCallCentreHierarchyInfo_args, addEmployeeCallCentreHierarchyInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addEmployeeCallCentreHierarchyInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEmployeeCallCentreHierarchyInfo_args");

    private static final org.apache.thrift.protocol.TField T_ADD_CALL_CENTRE_HIERARCHY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tAddCallCentreHierarchyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addEmployeeCallCentreHierarchyInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addEmployeeCallCentreHierarchyInfo_argsTupleSchemeFactory();

    private TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_ADD_CALL_CENTRE_HIERARCHY_INFO((short)1, "tAddCallCentreHierarchyInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_ADD_CALL_CENTRE_HIERARCHY_INFO
            return T_ADD_CALL_CENTRE_HIERARCHY_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_ADD_CALL_CENTRE_HIERARCHY_INFO, new org.apache.thrift.meta_data.FieldMetaData("tAddCallCentreHierarchyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAddEmployeeCallCentreHierarchyInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEmployeeCallCentreHierarchyInfo_args.class, metaDataMap);
    }

    public addEmployeeCallCentreHierarchyInfo_args() {
    }

    public addEmployeeCallCentreHierarchyInfo_args(
      TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo)
    {
      this();
      this.tAddCallCentreHierarchyInfo = tAddCallCentreHierarchyInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEmployeeCallCentreHierarchyInfo_args(addEmployeeCallCentreHierarchyInfo_args other) {
      if (other.isSetTAddCallCentreHierarchyInfo()) {
        this.tAddCallCentreHierarchyInfo = new TAddEmployeeCallCentreHierarchyInfo(other.tAddCallCentreHierarchyInfo);
      }
    }

    public addEmployeeCallCentreHierarchyInfo_args deepCopy() {
      return new addEmployeeCallCentreHierarchyInfo_args(this);
    }

    @Override
    public void clear() {
      this.tAddCallCentreHierarchyInfo = null;
    }

    public TAddEmployeeCallCentreHierarchyInfo getTAddCallCentreHierarchyInfo() {
      return this.tAddCallCentreHierarchyInfo;
    }

    public void setTAddCallCentreHierarchyInfo(TAddEmployeeCallCentreHierarchyInfo tAddCallCentreHierarchyInfo) {
      this.tAddCallCentreHierarchyInfo = tAddCallCentreHierarchyInfo;
    }

    public void unsetTAddCallCentreHierarchyInfo() {
      this.tAddCallCentreHierarchyInfo = null;
    }

    /** Returns true if field tAddCallCentreHierarchyInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetTAddCallCentreHierarchyInfo() {
      return this.tAddCallCentreHierarchyInfo != null;
    }

    public void setTAddCallCentreHierarchyInfoIsSet(boolean value) {
      if (!value) {
        this.tAddCallCentreHierarchyInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_ADD_CALL_CENTRE_HIERARCHY_INFO:
        if (value == null) {
          unsetTAddCallCentreHierarchyInfo();
        } else {
          setTAddCallCentreHierarchyInfo((TAddEmployeeCallCentreHierarchyInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_ADD_CALL_CENTRE_HIERARCHY_INFO:
        return getTAddCallCentreHierarchyInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_ADD_CALL_CENTRE_HIERARCHY_INFO:
        return isSetTAddCallCentreHierarchyInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addEmployeeCallCentreHierarchyInfo_args)
        return this.equals((addEmployeeCallCentreHierarchyInfo_args)that);
      return false;
    }

    public boolean equals(addEmployeeCallCentreHierarchyInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tAddCallCentreHierarchyInfo = true && this.isSetTAddCallCentreHierarchyInfo();
      boolean that_present_tAddCallCentreHierarchyInfo = true && that.isSetTAddCallCentreHierarchyInfo();
      if (this_present_tAddCallCentreHierarchyInfo || that_present_tAddCallCentreHierarchyInfo) {
        if (!(this_present_tAddCallCentreHierarchyInfo && that_present_tAddCallCentreHierarchyInfo))
          return false;
        if (!this.tAddCallCentreHierarchyInfo.equals(that.tAddCallCentreHierarchyInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTAddCallCentreHierarchyInfo()) ? 131071 : 524287);
      if (isSetTAddCallCentreHierarchyInfo())
        hashCode = hashCode * 8191 + tAddCallCentreHierarchyInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addEmployeeCallCentreHierarchyInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTAddCallCentreHierarchyInfo()).compareTo(other.isSetTAddCallCentreHierarchyInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTAddCallCentreHierarchyInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tAddCallCentreHierarchyInfo, other.tAddCallCentreHierarchyInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addEmployeeCallCentreHierarchyInfo_args(");
      boolean first = true;

      sb.append("tAddCallCentreHierarchyInfo:");
      if (this.tAddCallCentreHierarchyInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tAddCallCentreHierarchyInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tAddCallCentreHierarchyInfo != null) {
        tAddCallCentreHierarchyInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEmployeeCallCentreHierarchyInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEmployeeCallCentreHierarchyInfo_argsStandardScheme getScheme() {
        return new addEmployeeCallCentreHierarchyInfo_argsStandardScheme();
      }
    }

    private static class addEmployeeCallCentreHierarchyInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addEmployeeCallCentreHierarchyInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEmployeeCallCentreHierarchyInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_ADD_CALL_CENTRE_HIERARCHY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tAddCallCentreHierarchyInfo = new TAddEmployeeCallCentreHierarchyInfo();
                struct.tAddCallCentreHierarchyInfo.read(iprot);
                struct.setTAddCallCentreHierarchyInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEmployeeCallCentreHierarchyInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tAddCallCentreHierarchyInfo != null) {
          oprot.writeFieldBegin(T_ADD_CALL_CENTRE_HIERARCHY_INFO_FIELD_DESC);
          struct.tAddCallCentreHierarchyInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEmployeeCallCentreHierarchyInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEmployeeCallCentreHierarchyInfo_argsTupleScheme getScheme() {
        return new addEmployeeCallCentreHierarchyInfo_argsTupleScheme();
      }
    }

    private static class addEmployeeCallCentreHierarchyInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addEmployeeCallCentreHierarchyInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEmployeeCallCentreHierarchyInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTAddCallCentreHierarchyInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTAddCallCentreHierarchyInfo()) {
          struct.tAddCallCentreHierarchyInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEmployeeCallCentreHierarchyInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tAddCallCentreHierarchyInfo = new TAddEmployeeCallCentreHierarchyInfo();
          struct.tAddCallCentreHierarchyInfo.read(iprot);
          struct.setTAddCallCentreHierarchyInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addEmployeeCallCentreHierarchyInfo_result implements org.apache.thrift.TBase<addEmployeeCallCentreHierarchyInfo_result, addEmployeeCallCentreHierarchyInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addEmployeeCallCentreHierarchyInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEmployeeCallCentreHierarchyInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_META_ID_DOES_NOT_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("tMetaIdDoesNotExists", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_ALREADY_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeAlreadyExists", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addEmployeeCallCentreHierarchyInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addEmployeeCallCentreHierarchyInfo_resultTupleSchemeFactory();

    private TResponseStatus success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TMetaIdDoesNotExists tMetaIdDoesNotExists; // required
    private TEmployeeAlreadyExists tEmployeeAlreadyExists; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TResponseStatus
       */
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_META_ID_DOES_NOT_EXISTS((short)2, "tMetaIdDoesNotExists"),
      T_EMPLOYEE_ALREADY_EXISTS((short)3, "tEmployeeAlreadyExists");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_META_ID_DOES_NOT_EXISTS
            return T_META_ID_DOES_NOT_EXISTS;
          case 3: // T_EMPLOYEE_ALREADY_EXISTS
            return T_EMPLOYEE_ALREADY_EXISTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResponseStatus.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_META_ID_DOES_NOT_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("tMetaIdDoesNotExists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMetaIdDoesNotExists.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_ALREADY_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeAlreadyExists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeAlreadyExists.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEmployeeCallCentreHierarchyInfo_result.class, metaDataMap);
    }

    public addEmployeeCallCentreHierarchyInfo_result() {
    }

    public addEmployeeCallCentreHierarchyInfo_result(
      TResponseStatus success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TMetaIdDoesNotExists tMetaIdDoesNotExists,
      TEmployeeAlreadyExists tEmployeeAlreadyExists)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tMetaIdDoesNotExists = tMetaIdDoesNotExists;
      this.tEmployeeAlreadyExists = tEmployeeAlreadyExists;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEmployeeCallCentreHierarchyInfo_result(addEmployeeCallCentreHierarchyInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTMetaIdDoesNotExists()) {
        this.tMetaIdDoesNotExists = new TMetaIdDoesNotExists(other.tMetaIdDoesNotExists);
      }
      if (other.isSetTEmployeeAlreadyExists()) {
        this.tEmployeeAlreadyExists = new TEmployeeAlreadyExists(other.tEmployeeAlreadyExists);
      }
    }

    public addEmployeeCallCentreHierarchyInfo_result deepCopy() {
      return new addEmployeeCallCentreHierarchyInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tMetaIdDoesNotExists = null;
      this.tEmployeeAlreadyExists = null;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public TResponseStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public void setSuccess(TResponseStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TMetaIdDoesNotExists getTMetaIdDoesNotExists() {
      return this.tMetaIdDoesNotExists;
    }

    public void setTMetaIdDoesNotExists(TMetaIdDoesNotExists tMetaIdDoesNotExists) {
      this.tMetaIdDoesNotExists = tMetaIdDoesNotExists;
    }

    public void unsetTMetaIdDoesNotExists() {
      this.tMetaIdDoesNotExists = null;
    }

    /** Returns true if field tMetaIdDoesNotExists is set (has been assigned a value) and false otherwise */
    public boolean isSetTMetaIdDoesNotExists() {
      return this.tMetaIdDoesNotExists != null;
    }

    public void setTMetaIdDoesNotExistsIsSet(boolean value) {
      if (!value) {
        this.tMetaIdDoesNotExists = null;
      }
    }

    public TEmployeeAlreadyExists getTEmployeeAlreadyExists() {
      return this.tEmployeeAlreadyExists;
    }

    public void setTEmployeeAlreadyExists(TEmployeeAlreadyExists tEmployeeAlreadyExists) {
      this.tEmployeeAlreadyExists = tEmployeeAlreadyExists;
    }

    public void unsetTEmployeeAlreadyExists() {
      this.tEmployeeAlreadyExists = null;
    }

    /** Returns true if field tEmployeeAlreadyExists is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeAlreadyExists() {
      return this.tEmployeeAlreadyExists != null;
    }

    public void setTEmployeeAlreadyExistsIsSet(boolean value) {
      if (!value) {
        this.tEmployeeAlreadyExists = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResponseStatus)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_META_ID_DOES_NOT_EXISTS:
        if (value == null) {
          unsetTMetaIdDoesNotExists();
        } else {
          setTMetaIdDoesNotExists((TMetaIdDoesNotExists)value);
        }
        break;

      case T_EMPLOYEE_ALREADY_EXISTS:
        if (value == null) {
          unsetTEmployeeAlreadyExists();
        } else {
          setTEmployeeAlreadyExists((TEmployeeAlreadyExists)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_META_ID_DOES_NOT_EXISTS:
        return getTMetaIdDoesNotExists();

      case T_EMPLOYEE_ALREADY_EXISTS:
        return getTEmployeeAlreadyExists();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_META_ID_DOES_NOT_EXISTS:
        return isSetTMetaIdDoesNotExists();
      case T_EMPLOYEE_ALREADY_EXISTS:
        return isSetTEmployeeAlreadyExists();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addEmployeeCallCentreHierarchyInfo_result)
        return this.equals((addEmployeeCallCentreHierarchyInfo_result)that);
      return false;
    }

    public boolean equals(addEmployeeCallCentreHierarchyInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tMetaIdDoesNotExists = true && this.isSetTMetaIdDoesNotExists();
      boolean that_present_tMetaIdDoesNotExists = true && that.isSetTMetaIdDoesNotExists();
      if (this_present_tMetaIdDoesNotExists || that_present_tMetaIdDoesNotExists) {
        if (!(this_present_tMetaIdDoesNotExists && that_present_tMetaIdDoesNotExists))
          return false;
        if (!this.tMetaIdDoesNotExists.equals(that.tMetaIdDoesNotExists))
          return false;
      }

      boolean this_present_tEmployeeAlreadyExists = true && this.isSetTEmployeeAlreadyExists();
      boolean that_present_tEmployeeAlreadyExists = true && that.isSetTEmployeeAlreadyExists();
      if (this_present_tEmployeeAlreadyExists || that_present_tEmployeeAlreadyExists) {
        if (!(this_present_tEmployeeAlreadyExists && that_present_tEmployeeAlreadyExists))
          return false;
        if (!this.tEmployeeAlreadyExists.equals(that.tEmployeeAlreadyExists))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTMetaIdDoesNotExists()) ? 131071 : 524287);
      if (isSetTMetaIdDoesNotExists())
        hashCode = hashCode * 8191 + tMetaIdDoesNotExists.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeAlreadyExists()) ? 131071 : 524287);
      if (isSetTEmployeeAlreadyExists())
        hashCode = hashCode * 8191 + tEmployeeAlreadyExists.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addEmployeeCallCentreHierarchyInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTMetaIdDoesNotExists()).compareTo(other.isSetTMetaIdDoesNotExists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTMetaIdDoesNotExists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tMetaIdDoesNotExists, other.tMetaIdDoesNotExists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeAlreadyExists()).compareTo(other.isSetTEmployeeAlreadyExists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeAlreadyExists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeAlreadyExists, other.tEmployeeAlreadyExists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addEmployeeCallCentreHierarchyInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tMetaIdDoesNotExists:");
      if (this.tMetaIdDoesNotExists == null) {
        sb.append("null");
      } else {
        sb.append(this.tMetaIdDoesNotExists);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeAlreadyExists:");
      if (this.tEmployeeAlreadyExists == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeAlreadyExists);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEmployeeCallCentreHierarchyInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEmployeeCallCentreHierarchyInfo_resultStandardScheme getScheme() {
        return new addEmployeeCallCentreHierarchyInfo_resultStandardScheme();
      }
    }

    private static class addEmployeeCallCentreHierarchyInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addEmployeeCallCentreHierarchyInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEmployeeCallCentreHierarchyInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_META_ID_DOES_NOT_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tMetaIdDoesNotExists = new TMetaIdDoesNotExists();
                struct.tMetaIdDoesNotExists.read(iprot);
                struct.setTMetaIdDoesNotExistsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_EMPLOYEE_ALREADY_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeAlreadyExists = new TEmployeeAlreadyExists();
                struct.tEmployeeAlreadyExists.read(iprot);
                struct.setTEmployeeAlreadyExistsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEmployeeCallCentreHierarchyInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tMetaIdDoesNotExists != null) {
          oprot.writeFieldBegin(T_META_ID_DOES_NOT_EXISTS_FIELD_DESC);
          struct.tMetaIdDoesNotExists.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeAlreadyExists != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_ALREADY_EXISTS_FIELD_DESC);
          struct.tEmployeeAlreadyExists.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEmployeeCallCentreHierarchyInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEmployeeCallCentreHierarchyInfo_resultTupleScheme getScheme() {
        return new addEmployeeCallCentreHierarchyInfo_resultTupleScheme();
      }
    }

    private static class addEmployeeCallCentreHierarchyInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addEmployeeCallCentreHierarchyInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEmployeeCallCentreHierarchyInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTMetaIdDoesNotExists()) {
          optionals.set(2);
        }
        if (struct.isSetTEmployeeAlreadyExists()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTMetaIdDoesNotExists()) {
          struct.tMetaIdDoesNotExists.write(oprot);
        }
        if (struct.isSetTEmployeeAlreadyExists()) {
          struct.tEmployeeAlreadyExists.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEmployeeCallCentreHierarchyInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tMetaIdDoesNotExists = new TMetaIdDoesNotExists();
          struct.tMetaIdDoesNotExists.read(iprot);
          struct.setTMetaIdDoesNotExistsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tEmployeeAlreadyExists = new TEmployeeAlreadyExists();
          struct.tEmployeeAlreadyExists.read(iprot);
          struct.setTEmployeeAlreadyExistsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLevelInfo_args implements org.apache.thrift.TBase<getLevelInfo_args, getLevelInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLevelInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLevelInfo_args");

    private static final org.apache.thrift.protocol.TField T_GET_LEVEL_INFO_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tGetLevelInfoRequest", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLevelInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLevelInfo_argsTupleSchemeFactory();

    private TGetLevelInfoRequest tGetLevelInfoRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_GET_LEVEL_INFO_REQUEST((short)-1, "tGetLevelInfoRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // T_GET_LEVEL_INFO_REQUEST
            return T_GET_LEVEL_INFO_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_GET_LEVEL_INFO_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tGetLevelInfoRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetLevelInfoRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLevelInfo_args.class, metaDataMap);
    }

    public getLevelInfo_args() {
    }

    public getLevelInfo_args(
      TGetLevelInfoRequest tGetLevelInfoRequest)
    {
      this();
      this.tGetLevelInfoRequest = tGetLevelInfoRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLevelInfo_args(getLevelInfo_args other) {
      if (other.isSetTGetLevelInfoRequest()) {
        this.tGetLevelInfoRequest = new TGetLevelInfoRequest(other.tGetLevelInfoRequest);
      }
    }

    public getLevelInfo_args deepCopy() {
      return new getLevelInfo_args(this);
    }

    @Override
    public void clear() {
      this.tGetLevelInfoRequest = null;
    }

    public TGetLevelInfoRequest getTGetLevelInfoRequest() {
      return this.tGetLevelInfoRequest;
    }

    public void setTGetLevelInfoRequest(TGetLevelInfoRequest tGetLevelInfoRequest) {
      this.tGetLevelInfoRequest = tGetLevelInfoRequest;
    }

    public void unsetTGetLevelInfoRequest() {
      this.tGetLevelInfoRequest = null;
    }

    /** Returns true if field tGetLevelInfoRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTGetLevelInfoRequest() {
      return this.tGetLevelInfoRequest != null;
    }

    public void setTGetLevelInfoRequestIsSet(boolean value) {
      if (!value) {
        this.tGetLevelInfoRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_GET_LEVEL_INFO_REQUEST:
        if (value == null) {
          unsetTGetLevelInfoRequest();
        } else {
          setTGetLevelInfoRequest((TGetLevelInfoRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_GET_LEVEL_INFO_REQUEST:
        return getTGetLevelInfoRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_GET_LEVEL_INFO_REQUEST:
        return isSetTGetLevelInfoRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLevelInfo_args)
        return this.equals((getLevelInfo_args)that);
      return false;
    }

    public boolean equals(getLevelInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tGetLevelInfoRequest = true && this.isSetTGetLevelInfoRequest();
      boolean that_present_tGetLevelInfoRequest = true && that.isSetTGetLevelInfoRequest();
      if (this_present_tGetLevelInfoRequest || that_present_tGetLevelInfoRequest) {
        if (!(this_present_tGetLevelInfoRequest && that_present_tGetLevelInfoRequest))
          return false;
        if (!this.tGetLevelInfoRequest.equals(that.tGetLevelInfoRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTGetLevelInfoRequest()) ? 131071 : 524287);
      if (isSetTGetLevelInfoRequest())
        hashCode = hashCode * 8191 + tGetLevelInfoRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLevelInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTGetLevelInfoRequest()).compareTo(other.isSetTGetLevelInfoRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTGetLevelInfoRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tGetLevelInfoRequest, other.tGetLevelInfoRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLevelInfo_args(");
      boolean first = true;

      sb.append("tGetLevelInfoRequest:");
      if (this.tGetLevelInfoRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tGetLevelInfoRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tGetLevelInfoRequest != null) {
        tGetLevelInfoRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLevelInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLevelInfo_argsStandardScheme getScheme() {
        return new getLevelInfo_argsStandardScheme();
      }
    }

    private static class getLevelInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLevelInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLevelInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // T_GET_LEVEL_INFO_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tGetLevelInfoRequest = new TGetLevelInfoRequest();
                struct.tGetLevelInfoRequest.read(iprot);
                struct.setTGetLevelInfoRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLevelInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tGetLevelInfoRequest != null) {
          oprot.writeFieldBegin(T_GET_LEVEL_INFO_REQUEST_FIELD_DESC);
          struct.tGetLevelInfoRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLevelInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLevelInfo_argsTupleScheme getScheme() {
        return new getLevelInfo_argsTupleScheme();
      }
    }

    private static class getLevelInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLevelInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLevelInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTGetLevelInfoRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTGetLevelInfoRequest()) {
          struct.tGetLevelInfoRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLevelInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tGetLevelInfoRequest = new TGetLevelInfoRequest();
          struct.tGetLevelInfoRequest.read(iprot);
          struct.setTGetLevelInfoRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLevelInfo_result implements org.apache.thrift.TBase<getLevelInfo_result, getLevelInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLevelInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLevelInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_DOESNT_EXIST_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeDoesntExistException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLevelInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLevelInfo_resultTupleSchemeFactory();

    private TGetLevelInfoResponse success; // required
    private TEmployeeDoesntExistException tEmployeeDoesntExistException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_EMPLOYEE_DOESNT_EXIST_EXCEPTION((short)1, "tEmployeeDoesntExistException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_EMPLOYEE_DOESNT_EXIST_EXCEPTION
            return T_EMPLOYEE_DOESNT_EXIST_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetLevelInfoResponse.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_DOESNT_EXIST_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeDoesntExistException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeDoesntExistException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLevelInfo_result.class, metaDataMap);
    }

    public getLevelInfo_result() {
    }

    public getLevelInfo_result(
      TGetLevelInfoResponse success,
      TEmployeeDoesntExistException tEmployeeDoesntExistException)
    {
      this();
      this.success = success;
      this.tEmployeeDoesntExistException = tEmployeeDoesntExistException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLevelInfo_result(getLevelInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGetLevelInfoResponse(other.success);
      }
      if (other.isSetTEmployeeDoesntExistException()) {
        this.tEmployeeDoesntExistException = new TEmployeeDoesntExistException(other.tEmployeeDoesntExistException);
      }
    }

    public getLevelInfo_result deepCopy() {
      return new getLevelInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tEmployeeDoesntExistException = null;
    }

    public TGetLevelInfoResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TGetLevelInfoResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TEmployeeDoesntExistException getTEmployeeDoesntExistException() {
      return this.tEmployeeDoesntExistException;
    }

    public void setTEmployeeDoesntExistException(TEmployeeDoesntExistException tEmployeeDoesntExistException) {
      this.tEmployeeDoesntExistException = tEmployeeDoesntExistException;
    }

    public void unsetTEmployeeDoesntExistException() {
      this.tEmployeeDoesntExistException = null;
    }

    /** Returns true if field tEmployeeDoesntExistException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeDoesntExistException() {
      return this.tEmployeeDoesntExistException != null;
    }

    public void setTEmployeeDoesntExistExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeDoesntExistException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGetLevelInfoResponse)value);
        }
        break;

      case T_EMPLOYEE_DOESNT_EXIST_EXCEPTION:
        if (value == null) {
          unsetTEmployeeDoesntExistException();
        } else {
          setTEmployeeDoesntExistException((TEmployeeDoesntExistException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_EMPLOYEE_DOESNT_EXIST_EXCEPTION:
        return getTEmployeeDoesntExistException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_EMPLOYEE_DOESNT_EXIST_EXCEPTION:
        return isSetTEmployeeDoesntExistException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLevelInfo_result)
        return this.equals((getLevelInfo_result)that);
      return false;
    }

    public boolean equals(getLevelInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tEmployeeDoesntExistException = true && this.isSetTEmployeeDoesntExistException();
      boolean that_present_tEmployeeDoesntExistException = true && that.isSetTEmployeeDoesntExistException();
      if (this_present_tEmployeeDoesntExistException || that_present_tEmployeeDoesntExistException) {
        if (!(this_present_tEmployeeDoesntExistException && that_present_tEmployeeDoesntExistException))
          return false;
        if (!this.tEmployeeDoesntExistException.equals(that.tEmployeeDoesntExistException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeDoesntExistException()) ? 131071 : 524287);
      if (isSetTEmployeeDoesntExistException())
        hashCode = hashCode * 8191 + tEmployeeDoesntExistException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLevelInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeDoesntExistException()).compareTo(other.isSetTEmployeeDoesntExistException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeDoesntExistException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeDoesntExistException, other.tEmployeeDoesntExistException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLevelInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeDoesntExistException:");
      if (this.tEmployeeDoesntExistException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeDoesntExistException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLevelInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLevelInfo_resultStandardScheme getScheme() {
        return new getLevelInfo_resultStandardScheme();
      }
    }

    private static class getLevelInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLevelInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLevelInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGetLevelInfoResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_EMPLOYEE_DOESNT_EXIST_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeDoesntExistException = new TEmployeeDoesntExistException();
                struct.tEmployeeDoesntExistException.read(iprot);
                struct.setTEmployeeDoesntExistExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLevelInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeDoesntExistException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_DOESNT_EXIST_EXCEPTION_FIELD_DESC);
          struct.tEmployeeDoesntExistException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLevelInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLevelInfo_resultTupleScheme getScheme() {
        return new getLevelInfo_resultTupleScheme();
      }
    }

    private static class getLevelInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLevelInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLevelInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTEmployeeDoesntExistException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTEmployeeDoesntExistException()) {
          struct.tEmployeeDoesntExistException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLevelInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TGetLevelInfoResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tEmployeeDoesntExistException = new TEmployeeDoesntExistException();
          struct.tEmployeeDoesntExistException.read(iprot);
          struct.setTEmployeeDoesntExistExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
