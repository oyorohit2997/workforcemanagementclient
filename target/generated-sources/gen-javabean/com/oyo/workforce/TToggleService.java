/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.workforce;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-03-11")
public class TToggleService {

  public interface Iface {

    public TResponseStatus toggleOn(TToggleOnRequest tToggleOnRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, org.apache.thrift.TException;

    public TResponseStatus toggleOff(TToggleOffRequest tToggleOffRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidToggleOffReasonException, org.apache.thrift.TException;

    public TToggleGetResponse isToggleOn(TToggleGetRequest TToggleGetRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void toggleOn(TToggleOnRequest tToggleOnRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException;

    public void toggleOff(TToggleOffRequest tToggleOffRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException;

    public void isToggleOn(TToggleGetRequest TToggleGetRequest, org.apache.thrift.async.AsyncMethodCallback<TToggleGetResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TResponseStatus toggleOn(TToggleOnRequest tToggleOnRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      send_toggleOn(tToggleOnRequest);
      return recv_toggleOn();
    }

    public void send_toggleOn(TToggleOnRequest tToggleOnRequest) throws org.apache.thrift.TException
    {
      toggleOn_args args = new toggleOn_args();
      args.setTToggleOnRequest(tToggleOnRequest);
      sendBase("toggleOn", args);
    }

    public TResponseStatus recv_toggleOn() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      toggleOn_result result = new toggleOn_result();
      receiveBase(result, "toggleOn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "toggleOn failed: unknown result");
    }

    public TResponseStatus toggleOff(TToggleOffRequest tToggleOffRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidToggleOffReasonException, org.apache.thrift.TException
    {
      send_toggleOff(tToggleOffRequest);
      return recv_toggleOff();
    }

    public void send_toggleOff(TToggleOffRequest tToggleOffRequest) throws org.apache.thrift.TException
    {
      toggleOff_args args = new toggleOff_args();
      args.setTToggleOffRequest(tToggleOffRequest);
      sendBase("toggleOff", args);
    }

    public TResponseStatus recv_toggleOff() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidToggleOffReasonException, org.apache.thrift.TException
    {
      toggleOff_result result = new toggleOff_result();
      receiveBase(result, "toggleOff");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      if (result.tInvalidToggleOffReasonException != null) {
        throw result.tInvalidToggleOffReasonException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "toggleOff failed: unknown result");
    }

    public TToggleGetResponse isToggleOn(TToggleGetRequest TToggleGetRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      send_isToggleOn(TToggleGetRequest);
      return recv_isToggleOn();
    }

    public void send_isToggleOn(TToggleGetRequest TToggleGetRequest) throws org.apache.thrift.TException
    {
      isToggleOn_args args = new isToggleOn_args();
      args.setTToggleGetRequest(TToggleGetRequest);
      sendBase("isToggleOn", args);
    }

    public TToggleGetResponse recv_isToggleOn() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      isToggleOn_result result = new isToggleOn_result();
      receiveBase(result, "isToggleOn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isToggleOn failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void toggleOn(TToggleOnRequest tToggleOnRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      toggleOn_call method_call = new toggleOn_call(tToggleOnRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class toggleOn_call extends org.apache.thrift.async.TAsyncMethodCall<TResponseStatus> {
      private TToggleOnRequest tToggleOnRequest;
      public toggleOn_call(TToggleOnRequest tToggleOnRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tToggleOnRequest = tToggleOnRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("toggleOn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        toggleOn_args args = new toggleOn_args();
        args.setTToggleOnRequest(tToggleOnRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResponseStatus getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_toggleOn();
      }
    }

    public void toggleOff(TToggleOffRequest tToggleOffRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      toggleOff_call method_call = new toggleOff_call(tToggleOffRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class toggleOff_call extends org.apache.thrift.async.TAsyncMethodCall<TResponseStatus> {
      private TToggleOffRequest tToggleOffRequest;
      public toggleOff_call(TToggleOffRequest tToggleOffRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tToggleOffRequest = tToggleOffRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("toggleOff", org.apache.thrift.protocol.TMessageType.CALL, 0));
        toggleOff_args args = new toggleOff_args();
        args.setTToggleOffRequest(tToggleOffRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResponseStatus getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidToggleOffReasonException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_toggleOff();
      }
    }

    public void isToggleOn(TToggleGetRequest TToggleGetRequest, org.apache.thrift.async.AsyncMethodCallback<TToggleGetResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isToggleOn_call method_call = new isToggleOn_call(TToggleGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isToggleOn_call extends org.apache.thrift.async.TAsyncMethodCall<TToggleGetResponse> {
      private TToggleGetRequest TToggleGetRequest;
      public isToggleOn_call(TToggleGetRequest TToggleGetRequest, org.apache.thrift.async.AsyncMethodCallback<TToggleGetResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.TToggleGetRequest = TToggleGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isToggleOn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isToggleOn_args args = new isToggleOn_args();
        args.setTToggleGetRequest(TToggleGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TToggleGetResponse getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isToggleOn();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("toggleOn", new toggleOn());
      processMap.put("toggleOff", new toggleOff());
      processMap.put("isToggleOn", new isToggleOn());
      return processMap;
    }

    public static class toggleOn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, toggleOn_args> {
      public toggleOn() {
        super("toggleOn");
      }

      public toggleOn_args getEmptyArgsInstance() {
        return new toggleOn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public toggleOn_result getResult(I iface, toggleOn_args args) throws org.apache.thrift.TException {
        toggleOn_result result = new toggleOn_result();
        try {
          result.success = iface.toggleOn(args.tToggleOnRequest);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        }
        return result;
      }
    }

    public static class toggleOff<I extends Iface> extends org.apache.thrift.ProcessFunction<I, toggleOff_args> {
      public toggleOff() {
        super("toggleOff");
      }

      public toggleOff_args getEmptyArgsInstance() {
        return new toggleOff_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public toggleOff_result getResult(I iface, toggleOff_args args) throws org.apache.thrift.TException {
        toggleOff_result result = new toggleOff_result();
        try {
          result.success = iface.toggleOff(args.tToggleOffRequest);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        } catch (TInvalidToggleOffReasonException tInvalidToggleOffReasonException) {
          result.tInvalidToggleOffReasonException = tInvalidToggleOffReasonException;
        }
        return result;
      }
    }

    public static class isToggleOn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isToggleOn_args> {
      public isToggleOn() {
        super("isToggleOn");
      }

      public isToggleOn_args getEmptyArgsInstance() {
        return new isToggleOn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isToggleOn_result getResult(I iface, isToggleOn_args args) throws org.apache.thrift.TException {
        isToggleOn_result result = new isToggleOn_result();
        try {
          result.success = iface.isToggleOn(args.TToggleGetRequest);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("toggleOn", new toggleOn());
      processMap.put("toggleOff", new toggleOff());
      processMap.put("isToggleOn", new isToggleOn());
      return processMap;
    }

    public static class toggleOn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, toggleOn_args, TResponseStatus> {
      public toggleOn() {
        super("toggleOn");
      }

      public toggleOn_args getEmptyArgsInstance() {
        return new toggleOn_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TResponseStatus>() { 
          public void onComplete(TResponseStatus o) {
            toggleOn_result result = new toggleOn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            toggleOn_result result = new toggleOn_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, toggleOn_args args, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
        iface.toggleOn(args.tToggleOnRequest,resultHandler);
      }
    }

    public static class toggleOff<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, toggleOff_args, TResponseStatus> {
      public toggleOff() {
        super("toggleOff");
      }

      public toggleOff_args getEmptyArgsInstance() {
        return new toggleOff_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TResponseStatus>() { 
          public void onComplete(TResponseStatus o) {
            toggleOff_result result = new toggleOff_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            toggleOff_result result = new toggleOff_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidToggleOffReasonException) {
              result.tInvalidToggleOffReasonException = (TInvalidToggleOffReasonException) e;
              result.setTInvalidToggleOffReasonExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, toggleOff_args args, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
        iface.toggleOff(args.tToggleOffRequest,resultHandler);
      }
    }

    public static class isToggleOn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isToggleOn_args, TToggleGetResponse> {
      public isToggleOn() {
        super("isToggleOn");
      }

      public isToggleOn_args getEmptyArgsInstance() {
        return new isToggleOn_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TToggleGetResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TToggleGetResponse>() { 
          public void onComplete(TToggleGetResponse o) {
            isToggleOn_result result = new isToggleOn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isToggleOn_result result = new isToggleOn_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isToggleOn_args args, org.apache.thrift.async.AsyncMethodCallback<TToggleGetResponse> resultHandler) throws org.apache.thrift.TException {
        iface.isToggleOn(args.TToggleGetRequest,resultHandler);
      }
    }

  }

  public static class toggleOn_args implements org.apache.thrift.TBase<toggleOn_args, toggleOn_args._Fields>, java.io.Serializable, Cloneable, Comparable<toggleOn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toggleOn_args");

    private static final org.apache.thrift.protocol.TField T_TOGGLE_ON_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tToggleOnRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new toggleOn_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new toggleOn_argsTupleSchemeFactory();

    private TToggleOnRequest tToggleOnRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_TOGGLE_ON_REQUEST((short)1, "tToggleOnRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_TOGGLE_ON_REQUEST
            return T_TOGGLE_ON_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_TOGGLE_ON_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tToggleOnRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TToggleOnRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toggleOn_args.class, metaDataMap);
    }

    public toggleOn_args() {
    }

    public toggleOn_args(
      TToggleOnRequest tToggleOnRequest)
    {
      this();
      this.tToggleOnRequest = tToggleOnRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public toggleOn_args(toggleOn_args other) {
      if (other.isSetTToggleOnRequest()) {
        this.tToggleOnRequest = new TToggleOnRequest(other.tToggleOnRequest);
      }
    }

    public toggleOn_args deepCopy() {
      return new toggleOn_args(this);
    }

    @Override
    public void clear() {
      this.tToggleOnRequest = null;
    }

    public TToggleOnRequest getTToggleOnRequest() {
      return this.tToggleOnRequest;
    }

    public void setTToggleOnRequest(TToggleOnRequest tToggleOnRequest) {
      this.tToggleOnRequest = tToggleOnRequest;
    }

    public void unsetTToggleOnRequest() {
      this.tToggleOnRequest = null;
    }

    /** Returns true if field tToggleOnRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTToggleOnRequest() {
      return this.tToggleOnRequest != null;
    }

    public void setTToggleOnRequestIsSet(boolean value) {
      if (!value) {
        this.tToggleOnRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_TOGGLE_ON_REQUEST:
        if (value == null) {
          unsetTToggleOnRequest();
        } else {
          setTToggleOnRequest((TToggleOnRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_TOGGLE_ON_REQUEST:
        return getTToggleOnRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_TOGGLE_ON_REQUEST:
        return isSetTToggleOnRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof toggleOn_args)
        return this.equals((toggleOn_args)that);
      return false;
    }

    public boolean equals(toggleOn_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tToggleOnRequest = true && this.isSetTToggleOnRequest();
      boolean that_present_tToggleOnRequest = true && that.isSetTToggleOnRequest();
      if (this_present_tToggleOnRequest || that_present_tToggleOnRequest) {
        if (!(this_present_tToggleOnRequest && that_present_tToggleOnRequest))
          return false;
        if (!this.tToggleOnRequest.equals(that.tToggleOnRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTToggleOnRequest()) ? 131071 : 524287);
      if (isSetTToggleOnRequest())
        hashCode = hashCode * 8191 + tToggleOnRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(toggleOn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTToggleOnRequest()).compareTo(other.isSetTToggleOnRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTToggleOnRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tToggleOnRequest, other.tToggleOnRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("toggleOn_args(");
      boolean first = true;

      sb.append("tToggleOnRequest:");
      if (this.tToggleOnRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tToggleOnRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tToggleOnRequest != null) {
        tToggleOnRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class toggleOn_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toggleOn_argsStandardScheme getScheme() {
        return new toggleOn_argsStandardScheme();
      }
    }

    private static class toggleOn_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<toggleOn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, toggleOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_TOGGLE_ON_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tToggleOnRequest = new TToggleOnRequest();
                struct.tToggleOnRequest.read(iprot);
                struct.setTToggleOnRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, toggleOn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tToggleOnRequest != null) {
          oprot.writeFieldBegin(T_TOGGLE_ON_REQUEST_FIELD_DESC);
          struct.tToggleOnRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class toggleOn_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toggleOn_argsTupleScheme getScheme() {
        return new toggleOn_argsTupleScheme();
      }
    }

    private static class toggleOn_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<toggleOn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, toggleOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTToggleOnRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTToggleOnRequest()) {
          struct.tToggleOnRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, toggleOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tToggleOnRequest = new TToggleOnRequest();
          struct.tToggleOnRequest.read(iprot);
          struct.setTToggleOnRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class toggleOn_result implements org.apache.thrift.TBase<toggleOn_result, toggleOn_result._Fields>, java.io.Serializable, Cloneable, Comparable<toggleOn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toggleOn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new toggleOn_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new toggleOn_resultTupleSchemeFactory();

    private TResponseStatus success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TResponseStatus
       */
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResponseStatus.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toggleOn_result.class, metaDataMap);
    }

    public toggleOn_result() {
    }

    public toggleOn_result(
      TResponseStatus success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public toggleOn_result(toggleOn_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
    }

    public toggleOn_result deepCopy() {
      return new toggleOn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public TResponseStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public void setSuccess(TResponseStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResponseStatus)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof toggleOn_result)
        return this.equals((toggleOn_result)that);
      return false;
    }

    public boolean equals(toggleOn_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(toggleOn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("toggleOn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class toggleOn_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toggleOn_resultStandardScheme getScheme() {
        return new toggleOn_resultStandardScheme();
      }
    }

    private static class toggleOn_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<toggleOn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, toggleOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, toggleOn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class toggleOn_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toggleOn_resultTupleScheme getScheme() {
        return new toggleOn_resultTupleScheme();
      }
    }

    private static class toggleOn_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<toggleOn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, toggleOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, toggleOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class toggleOff_args implements org.apache.thrift.TBase<toggleOff_args, toggleOff_args._Fields>, java.io.Serializable, Cloneable, Comparable<toggleOff_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toggleOff_args");

    private static final org.apache.thrift.protocol.TField T_TOGGLE_OFF_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tToggleOffRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new toggleOff_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new toggleOff_argsTupleSchemeFactory();

    private TToggleOffRequest tToggleOffRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_TOGGLE_OFF_REQUEST((short)1, "tToggleOffRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_TOGGLE_OFF_REQUEST
            return T_TOGGLE_OFF_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_TOGGLE_OFF_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tToggleOffRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TToggleOffRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toggleOff_args.class, metaDataMap);
    }

    public toggleOff_args() {
    }

    public toggleOff_args(
      TToggleOffRequest tToggleOffRequest)
    {
      this();
      this.tToggleOffRequest = tToggleOffRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public toggleOff_args(toggleOff_args other) {
      if (other.isSetTToggleOffRequest()) {
        this.tToggleOffRequest = new TToggleOffRequest(other.tToggleOffRequest);
      }
    }

    public toggleOff_args deepCopy() {
      return new toggleOff_args(this);
    }

    @Override
    public void clear() {
      this.tToggleOffRequest = null;
    }

    public TToggleOffRequest getTToggleOffRequest() {
      return this.tToggleOffRequest;
    }

    public void setTToggleOffRequest(TToggleOffRequest tToggleOffRequest) {
      this.tToggleOffRequest = tToggleOffRequest;
    }

    public void unsetTToggleOffRequest() {
      this.tToggleOffRequest = null;
    }

    /** Returns true if field tToggleOffRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTToggleOffRequest() {
      return this.tToggleOffRequest != null;
    }

    public void setTToggleOffRequestIsSet(boolean value) {
      if (!value) {
        this.tToggleOffRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_TOGGLE_OFF_REQUEST:
        if (value == null) {
          unsetTToggleOffRequest();
        } else {
          setTToggleOffRequest((TToggleOffRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_TOGGLE_OFF_REQUEST:
        return getTToggleOffRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_TOGGLE_OFF_REQUEST:
        return isSetTToggleOffRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof toggleOff_args)
        return this.equals((toggleOff_args)that);
      return false;
    }

    public boolean equals(toggleOff_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tToggleOffRequest = true && this.isSetTToggleOffRequest();
      boolean that_present_tToggleOffRequest = true && that.isSetTToggleOffRequest();
      if (this_present_tToggleOffRequest || that_present_tToggleOffRequest) {
        if (!(this_present_tToggleOffRequest && that_present_tToggleOffRequest))
          return false;
        if (!this.tToggleOffRequest.equals(that.tToggleOffRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTToggleOffRequest()) ? 131071 : 524287);
      if (isSetTToggleOffRequest())
        hashCode = hashCode * 8191 + tToggleOffRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(toggleOff_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTToggleOffRequest()).compareTo(other.isSetTToggleOffRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTToggleOffRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tToggleOffRequest, other.tToggleOffRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("toggleOff_args(");
      boolean first = true;

      sb.append("tToggleOffRequest:");
      if (this.tToggleOffRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tToggleOffRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tToggleOffRequest != null) {
        tToggleOffRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class toggleOff_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toggleOff_argsStandardScheme getScheme() {
        return new toggleOff_argsStandardScheme();
      }
    }

    private static class toggleOff_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<toggleOff_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, toggleOff_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_TOGGLE_OFF_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tToggleOffRequest = new TToggleOffRequest();
                struct.tToggleOffRequest.read(iprot);
                struct.setTToggleOffRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, toggleOff_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tToggleOffRequest != null) {
          oprot.writeFieldBegin(T_TOGGLE_OFF_REQUEST_FIELD_DESC);
          struct.tToggleOffRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class toggleOff_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toggleOff_argsTupleScheme getScheme() {
        return new toggleOff_argsTupleScheme();
      }
    }

    private static class toggleOff_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<toggleOff_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, toggleOff_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTToggleOffRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTToggleOffRequest()) {
          struct.tToggleOffRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, toggleOff_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tToggleOffRequest = new TToggleOffRequest();
          struct.tToggleOffRequest.read(iprot);
          struct.setTToggleOffRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class toggleOff_result implements org.apache.thrift.TBase<toggleOff_result, toggleOff_result._Fields>, java.io.Serializable, Cloneable, Comparable<toggleOff_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toggleOff_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_INVALID_TOGGLE_OFF_REASON_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidToggleOffReasonException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new toggleOff_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new toggleOff_resultTupleSchemeFactory();

    private TResponseStatus success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required
    private TInvalidToggleOffReasonException tInvalidToggleOffReasonException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TResponseStatus
       */
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException"),
      T_INVALID_TOGGLE_OFF_REASON_EXCEPTION((short)3, "tInvalidToggleOffReasonException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          case 3: // T_INVALID_TOGGLE_OFF_REASON_EXCEPTION
            return T_INVALID_TOGGLE_OFF_REASON_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResponseStatus.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      tmpMap.put(_Fields.T_INVALID_TOGGLE_OFF_REASON_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidToggleOffReasonException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidToggleOffReasonException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toggleOff_result.class, metaDataMap);
    }

    public toggleOff_result() {
    }

    public toggleOff_result(
      TResponseStatus success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException,
      TInvalidToggleOffReasonException tInvalidToggleOffReasonException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
      this.tInvalidToggleOffReasonException = tInvalidToggleOffReasonException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public toggleOff_result(toggleOff_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
      if (other.isSetTInvalidToggleOffReasonException()) {
        this.tInvalidToggleOffReasonException = new TInvalidToggleOffReasonException(other.tInvalidToggleOffReasonException);
      }
    }

    public toggleOff_result deepCopy() {
      return new toggleOff_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
      this.tInvalidToggleOffReasonException = null;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public TResponseStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public void setSuccess(TResponseStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public TInvalidToggleOffReasonException getTInvalidToggleOffReasonException() {
      return this.tInvalidToggleOffReasonException;
    }

    public void setTInvalidToggleOffReasonException(TInvalidToggleOffReasonException tInvalidToggleOffReasonException) {
      this.tInvalidToggleOffReasonException = tInvalidToggleOffReasonException;
    }

    public void unsetTInvalidToggleOffReasonException() {
      this.tInvalidToggleOffReasonException = null;
    }

    /** Returns true if field tInvalidToggleOffReasonException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidToggleOffReasonException() {
      return this.tInvalidToggleOffReasonException != null;
    }

    public void setTInvalidToggleOffReasonExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidToggleOffReasonException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResponseStatus)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      case T_INVALID_TOGGLE_OFF_REASON_EXCEPTION:
        if (value == null) {
          unsetTInvalidToggleOffReasonException();
        } else {
          setTInvalidToggleOffReasonException((TInvalidToggleOffReasonException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      case T_INVALID_TOGGLE_OFF_REASON_EXCEPTION:
        return getTInvalidToggleOffReasonException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      case T_INVALID_TOGGLE_OFF_REASON_EXCEPTION:
        return isSetTInvalidToggleOffReasonException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof toggleOff_result)
        return this.equals((toggleOff_result)that);
      return false;
    }

    public boolean equals(toggleOff_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      boolean this_present_tInvalidToggleOffReasonException = true && this.isSetTInvalidToggleOffReasonException();
      boolean that_present_tInvalidToggleOffReasonException = true && that.isSetTInvalidToggleOffReasonException();
      if (this_present_tInvalidToggleOffReasonException || that_present_tInvalidToggleOffReasonException) {
        if (!(this_present_tInvalidToggleOffReasonException && that_present_tInvalidToggleOffReasonException))
          return false;
        if (!this.tInvalidToggleOffReasonException.equals(that.tInvalidToggleOffReasonException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidToggleOffReasonException()) ? 131071 : 524287);
      if (isSetTInvalidToggleOffReasonException())
        hashCode = hashCode * 8191 + tInvalidToggleOffReasonException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(toggleOff_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidToggleOffReasonException()).compareTo(other.isSetTInvalidToggleOffReasonException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidToggleOffReasonException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidToggleOffReasonException, other.tInvalidToggleOffReasonException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("toggleOff_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidToggleOffReasonException:");
      if (this.tInvalidToggleOffReasonException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidToggleOffReasonException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class toggleOff_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toggleOff_resultStandardScheme getScheme() {
        return new toggleOff_resultStandardScheme();
      }
    }

    private static class toggleOff_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<toggleOff_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, toggleOff_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_INVALID_TOGGLE_OFF_REASON_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidToggleOffReasonException = new TInvalidToggleOffReasonException();
                struct.tInvalidToggleOffReasonException.read(iprot);
                struct.setTInvalidToggleOffReasonExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, toggleOff_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidToggleOffReasonException != null) {
          oprot.writeFieldBegin(T_INVALID_TOGGLE_OFF_REASON_EXCEPTION_FIELD_DESC);
          struct.tInvalidToggleOffReasonException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class toggleOff_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public toggleOff_resultTupleScheme getScheme() {
        return new toggleOff_resultTupleScheme();
      }
    }

    private static class toggleOff_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<toggleOff_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, toggleOff_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        if (struct.isSetTInvalidToggleOffReasonException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
        if (struct.isSetTInvalidToggleOffReasonException()) {
          struct.tInvalidToggleOffReasonException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, toggleOff_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tInvalidToggleOffReasonException = new TInvalidToggleOffReasonException();
          struct.tInvalidToggleOffReasonException.read(iprot);
          struct.setTInvalidToggleOffReasonExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isToggleOn_args implements org.apache.thrift.TBase<isToggleOn_args, isToggleOn_args._Fields>, java.io.Serializable, Cloneable, Comparable<isToggleOn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isToggleOn_args");

    private static final org.apache.thrift.protocol.TField TTOGGLE_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("TToggleGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isToggleOn_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isToggleOn_argsTupleSchemeFactory();

    private TToggleGetRequest TToggleGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TTOGGLE_GET_REQUEST((short)1, "TToggleGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TTOGGLE_GET_REQUEST
            return TTOGGLE_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TTOGGLE_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("TToggleGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TToggleGetRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isToggleOn_args.class, metaDataMap);
    }

    public isToggleOn_args() {
    }

    public isToggleOn_args(
      TToggleGetRequest TToggleGetRequest)
    {
      this();
      this.TToggleGetRequest = TToggleGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isToggleOn_args(isToggleOn_args other) {
      if (other.isSetTToggleGetRequest()) {
        this.TToggleGetRequest = new TToggleGetRequest(other.TToggleGetRequest);
      }
    }

    public isToggleOn_args deepCopy() {
      return new isToggleOn_args(this);
    }

    @Override
    public void clear() {
      this.TToggleGetRequest = null;
    }

    public TToggleGetRequest getTToggleGetRequest() {
      return this.TToggleGetRequest;
    }

    public void setTToggleGetRequest(TToggleGetRequest TToggleGetRequest) {
      this.TToggleGetRequest = TToggleGetRequest;
    }

    public void unsetTToggleGetRequest() {
      this.TToggleGetRequest = null;
    }

    /** Returns true if field TToggleGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTToggleGetRequest() {
      return this.TToggleGetRequest != null;
    }

    public void setTToggleGetRequestIsSet(boolean value) {
      if (!value) {
        this.TToggleGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TTOGGLE_GET_REQUEST:
        if (value == null) {
          unsetTToggleGetRequest();
        } else {
          setTToggleGetRequest((TToggleGetRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TTOGGLE_GET_REQUEST:
        return getTToggleGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TTOGGLE_GET_REQUEST:
        return isSetTToggleGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isToggleOn_args)
        return this.equals((isToggleOn_args)that);
      return false;
    }

    public boolean equals(isToggleOn_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_TToggleGetRequest = true && this.isSetTToggleGetRequest();
      boolean that_present_TToggleGetRequest = true && that.isSetTToggleGetRequest();
      if (this_present_TToggleGetRequest || that_present_TToggleGetRequest) {
        if (!(this_present_TToggleGetRequest && that_present_TToggleGetRequest))
          return false;
        if (!this.TToggleGetRequest.equals(that.TToggleGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTToggleGetRequest()) ? 131071 : 524287);
      if (isSetTToggleGetRequest())
        hashCode = hashCode * 8191 + TToggleGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isToggleOn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTToggleGetRequest()).compareTo(other.isSetTToggleGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTToggleGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TToggleGetRequest, other.TToggleGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isToggleOn_args(");
      boolean first = true;

      sb.append("TToggleGetRequest:");
      if (this.TToggleGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.TToggleGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (TToggleGetRequest != null) {
        TToggleGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isToggleOn_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isToggleOn_argsStandardScheme getScheme() {
        return new isToggleOn_argsStandardScheme();
      }
    }

    private static class isToggleOn_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isToggleOn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isToggleOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TTOGGLE_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.TToggleGetRequest = new TToggleGetRequest();
                struct.TToggleGetRequest.read(iprot);
                struct.setTToggleGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isToggleOn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.TToggleGetRequest != null) {
          oprot.writeFieldBegin(TTOGGLE_GET_REQUEST_FIELD_DESC);
          struct.TToggleGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isToggleOn_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isToggleOn_argsTupleScheme getScheme() {
        return new isToggleOn_argsTupleScheme();
      }
    }

    private static class isToggleOn_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isToggleOn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isToggleOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTToggleGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTToggleGetRequest()) {
          struct.TToggleGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isToggleOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.TToggleGetRequest = new TToggleGetRequest();
          struct.TToggleGetRequest.read(iprot);
          struct.setTToggleGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isToggleOn_result implements org.apache.thrift.TBase<isToggleOn_result, isToggleOn_result._Fields>, java.io.Serializable, Cloneable, Comparable<isToggleOn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isToggleOn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isToggleOn_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isToggleOn_resultTupleSchemeFactory();

    private TToggleGetResponse success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TToggleGetResponse.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isToggleOn_result.class, metaDataMap);
    }

    public isToggleOn_result() {
    }

    public isToggleOn_result(
      TToggleGetResponse success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isToggleOn_result(isToggleOn_result other) {
      if (other.isSetSuccess()) {
        this.success = new TToggleGetResponse(other.success);
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
    }

    public isToggleOn_result deepCopy() {
      return new isToggleOn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
    }

    public TToggleGetResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TToggleGetResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TToggleGetResponse)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isToggleOn_result)
        return this.equals((isToggleOn_result)that);
      return false;
    }

    public boolean equals(isToggleOn_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isToggleOn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isToggleOn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isToggleOn_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isToggleOn_resultStandardScheme getScheme() {
        return new isToggleOn_resultStandardScheme();
      }
    }

    private static class isToggleOn_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isToggleOn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isToggleOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TToggleGetResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isToggleOn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isToggleOn_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isToggleOn_resultTupleScheme getScheme() {
        return new isToggleOn_resultTupleScheme();
      }
    }

    private static class isToggleOn_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isToggleOn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isToggleOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isToggleOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TToggleGetResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
