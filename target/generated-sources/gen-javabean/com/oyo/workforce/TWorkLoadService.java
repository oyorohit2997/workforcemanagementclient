/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.workforce;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-19")
public class TWorkLoadService {

  public interface Iface {

    public TResponseStatus addLoad(TWorkLoadAddRequest tWorkLoadAddRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, TInvalidWorkLoadValueException, TInvalidBusinessIdException, TInvalidDateException, TInvalidVersionException, org.apache.thrift.TException;

    public TWorkLoadResponse getLoad(TWorkLoadGetRequest tWorkLoadGetRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidTimeRangeException, TInvalidBusinessIdException, TInvalidDateException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addLoad(TWorkLoadAddRequest tWorkLoadAddRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException;

    public void getLoad(TWorkLoadGetRequest tWorkLoadGetRequest, org.apache.thrift.async.AsyncMethodCallback<TWorkLoadResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TResponseStatus addLoad(TWorkLoadAddRequest tWorkLoadAddRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, TInvalidWorkLoadValueException, TInvalidBusinessIdException, TInvalidDateException, TInvalidVersionException, org.apache.thrift.TException
    {
      send_addLoad(tWorkLoadAddRequest);
      return recv_addLoad();
    }

    public void send_addLoad(TWorkLoadAddRequest tWorkLoadAddRequest) throws org.apache.thrift.TException
    {
      addLoad_args args = new addLoad_args();
      args.setTWorkLoadAddRequest(tWorkLoadAddRequest);
      sendBase("addLoad", args);
    }

    public TResponseStatus recv_addLoad() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, TInvalidWorkLoadValueException, TInvalidBusinessIdException, TInvalidDateException, TInvalidVersionException, org.apache.thrift.TException
    {
      addLoad_result result = new addLoad_result();
      receiveBase(result, "addLoad");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      if (result.tInvalidEpochTimeException != null) {
        throw result.tInvalidEpochTimeException;
      }
      if (result.tInvalidWorkLoadValueException != null) {
        throw result.tInvalidWorkLoadValueException;
      }
      if (result.tInvalidBusinessIdException != null) {
        throw result.tInvalidBusinessIdException;
      }
      if (result.tInvalidDateException != null) {
        throw result.tInvalidDateException;
      }
      if (result.tInvalidVersionException != null) {
        throw result.tInvalidVersionException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addLoad failed: unknown result");
    }

    public TWorkLoadResponse getLoad(TWorkLoadGetRequest tWorkLoadGetRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidTimeRangeException, TInvalidBusinessIdException, TInvalidDateException, org.apache.thrift.TException
    {
      send_getLoad(tWorkLoadGetRequest);
      return recv_getLoad();
    }

    public void send_getLoad(TWorkLoadGetRequest tWorkLoadGetRequest) throws org.apache.thrift.TException
    {
      getLoad_args args = new getLoad_args();
      args.setTWorkLoadGetRequest(tWorkLoadGetRequest);
      sendBase("getLoad", args);
    }

    public TWorkLoadResponse recv_getLoad() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidTimeRangeException, TInvalidBusinessIdException, TInvalidDateException, org.apache.thrift.TException
    {
      getLoad_result result = new getLoad_result();
      receiveBase(result, "getLoad");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      if (result.tInvalidTimeRangeException != null) {
        throw result.tInvalidTimeRangeException;
      }
      if (result.tInvalidBusinessIdException != null) {
        throw result.tInvalidBusinessIdException;
      }
      if (result.tInvalidDateException != null) {
        throw result.tInvalidDateException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoad failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addLoad(TWorkLoadAddRequest tWorkLoadAddRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLoad_call method_call = new addLoad_call(tWorkLoadAddRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLoad_call extends org.apache.thrift.async.TAsyncMethodCall<TResponseStatus> {
      private TWorkLoadAddRequest tWorkLoadAddRequest;
      public addLoad_call(TWorkLoadAddRequest tWorkLoadAddRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tWorkLoadAddRequest = tWorkLoadAddRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLoad", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLoad_args args = new addLoad_args();
        args.setTWorkLoadAddRequest(tWorkLoadAddRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResponseStatus getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, TInvalidWorkLoadValueException, TInvalidBusinessIdException, TInvalidDateException, TInvalidVersionException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addLoad();
      }
    }

    public void getLoad(TWorkLoadGetRequest tWorkLoadGetRequest, org.apache.thrift.async.AsyncMethodCallback<TWorkLoadResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoad_call method_call = new getLoad_call(tWorkLoadGetRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoad_call extends org.apache.thrift.async.TAsyncMethodCall<TWorkLoadResponse> {
      private TWorkLoadGetRequest tWorkLoadGetRequest;
      public getLoad_call(TWorkLoadGetRequest tWorkLoadGetRequest, org.apache.thrift.async.AsyncMethodCallback<TWorkLoadResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tWorkLoadGetRequest = tWorkLoadGetRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoad", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoad_args args = new getLoad_args();
        args.setTWorkLoadGetRequest(tWorkLoadGetRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TWorkLoadResponse getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidTimeRangeException, TInvalidBusinessIdException, TInvalidDateException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoad();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addLoad", new addLoad());
      processMap.put("getLoad", new getLoad());
      return processMap;
    }

    public static class addLoad<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLoad_args> {
      public addLoad() {
        super("addLoad");
      }

      public addLoad_args getEmptyArgsInstance() {
        return new addLoad_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addLoad_result getResult(I iface, addLoad_args args) throws org.apache.thrift.TException {
        addLoad_result result = new addLoad_result();
        try {
          result.success = iface.addLoad(args.tWorkLoadAddRequest);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        } catch (TInvalidEpochTimeException tInvalidEpochTimeException) {
          result.tInvalidEpochTimeException = tInvalidEpochTimeException;
        } catch (TInvalidWorkLoadValueException tInvalidWorkLoadValueException) {
          result.tInvalidWorkLoadValueException = tInvalidWorkLoadValueException;
        } catch (TInvalidBusinessIdException tInvalidBusinessIdException) {
          result.tInvalidBusinessIdException = tInvalidBusinessIdException;
        } catch (TInvalidDateException tInvalidDateException) {
          result.tInvalidDateException = tInvalidDateException;
        } catch (TInvalidVersionException tInvalidVersionException) {
          result.tInvalidVersionException = tInvalidVersionException;
        }
        return result;
      }
    }

    public static class getLoad<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoad_args> {
      public getLoad() {
        super("getLoad");
      }

      public getLoad_args getEmptyArgsInstance() {
        return new getLoad_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoad_result getResult(I iface, getLoad_args args) throws org.apache.thrift.TException {
        getLoad_result result = new getLoad_result();
        try {
          result.success = iface.getLoad(args.tWorkLoadGetRequest);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        } catch (TInvalidTimeRangeException tInvalidTimeRangeException) {
          result.tInvalidTimeRangeException = tInvalidTimeRangeException;
        } catch (TInvalidBusinessIdException tInvalidBusinessIdException) {
          result.tInvalidBusinessIdException = tInvalidBusinessIdException;
        } catch (TInvalidDateException tInvalidDateException) {
          result.tInvalidDateException = tInvalidDateException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addLoad", new addLoad());
      processMap.put("getLoad", new getLoad());
      return processMap;
    }

    public static class addLoad<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addLoad_args, TResponseStatus> {
      public addLoad() {
        super("addLoad");
      }

      public addLoad_args getEmptyArgsInstance() {
        return new addLoad_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TResponseStatus>() { 
          public void onComplete(TResponseStatus o) {
            addLoad_result result = new addLoad_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addLoad_result result = new addLoad_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidEpochTimeException) {
              result.tInvalidEpochTimeException = (TInvalidEpochTimeException) e;
              result.setTInvalidEpochTimeExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidWorkLoadValueException) {
              result.tInvalidWorkLoadValueException = (TInvalidWorkLoadValueException) e;
              result.setTInvalidWorkLoadValueExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidBusinessIdException) {
              result.tInvalidBusinessIdException = (TInvalidBusinessIdException) e;
              result.setTInvalidBusinessIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidDateException) {
              result.tInvalidDateException = (TInvalidDateException) e;
              result.setTInvalidDateExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidVersionException) {
              result.tInvalidVersionException = (TInvalidVersionException) e;
              result.setTInvalidVersionExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addLoad_args args, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
        iface.addLoad(args.tWorkLoadAddRequest,resultHandler);
      }
    }

    public static class getLoad<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoad_args, TWorkLoadResponse> {
      public getLoad() {
        super("getLoad");
      }

      public getLoad_args getEmptyArgsInstance() {
        return new getLoad_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TWorkLoadResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TWorkLoadResponse>() { 
          public void onComplete(TWorkLoadResponse o) {
            getLoad_result result = new getLoad_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLoad_result result = new getLoad_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidTimeRangeException) {
              result.tInvalidTimeRangeException = (TInvalidTimeRangeException) e;
              result.setTInvalidTimeRangeExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidBusinessIdException) {
              result.tInvalidBusinessIdException = (TInvalidBusinessIdException) e;
              result.setTInvalidBusinessIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidDateException) {
              result.tInvalidDateException = (TInvalidDateException) e;
              result.setTInvalidDateExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoad_args args, org.apache.thrift.async.AsyncMethodCallback<TWorkLoadResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getLoad(args.tWorkLoadGetRequest,resultHandler);
      }
    }

  }

  public static class addLoad_args implements org.apache.thrift.TBase<addLoad_args, addLoad_args._Fields>, java.io.Serializable, Cloneable, Comparable<addLoad_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLoad_args");

    private static final org.apache.thrift.protocol.TField T_WORK_LOAD_ADD_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tWorkLoadAddRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addLoad_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addLoad_argsTupleSchemeFactory();

    private TWorkLoadAddRequest tWorkLoadAddRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_WORK_LOAD_ADD_REQUEST((short)1, "tWorkLoadAddRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_WORK_LOAD_ADD_REQUEST
            return T_WORK_LOAD_ADD_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_WORK_LOAD_ADD_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tWorkLoadAddRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWorkLoadAddRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLoad_args.class, metaDataMap);
    }

    public addLoad_args() {
    }

    public addLoad_args(
      TWorkLoadAddRequest tWorkLoadAddRequest)
    {
      this();
      this.tWorkLoadAddRequest = tWorkLoadAddRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLoad_args(addLoad_args other) {
      if (other.isSetTWorkLoadAddRequest()) {
        this.tWorkLoadAddRequest = new TWorkLoadAddRequest(other.tWorkLoadAddRequest);
      }
    }

    public addLoad_args deepCopy() {
      return new addLoad_args(this);
    }

    @Override
    public void clear() {
      this.tWorkLoadAddRequest = null;
    }

    public TWorkLoadAddRequest getTWorkLoadAddRequest() {
      return this.tWorkLoadAddRequest;
    }

    public void setTWorkLoadAddRequest(TWorkLoadAddRequest tWorkLoadAddRequest) {
      this.tWorkLoadAddRequest = tWorkLoadAddRequest;
    }

    public void unsetTWorkLoadAddRequest() {
      this.tWorkLoadAddRequest = null;
    }

    /** Returns true if field tWorkLoadAddRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTWorkLoadAddRequest() {
      return this.tWorkLoadAddRequest != null;
    }

    public void setTWorkLoadAddRequestIsSet(boolean value) {
      if (!value) {
        this.tWorkLoadAddRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_WORK_LOAD_ADD_REQUEST:
        if (value == null) {
          unsetTWorkLoadAddRequest();
        } else {
          setTWorkLoadAddRequest((TWorkLoadAddRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_WORK_LOAD_ADD_REQUEST:
        return getTWorkLoadAddRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_WORK_LOAD_ADD_REQUEST:
        return isSetTWorkLoadAddRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addLoad_args)
        return this.equals((addLoad_args)that);
      return false;
    }

    public boolean equals(addLoad_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tWorkLoadAddRequest = true && this.isSetTWorkLoadAddRequest();
      boolean that_present_tWorkLoadAddRequest = true && that.isSetTWorkLoadAddRequest();
      if (this_present_tWorkLoadAddRequest || that_present_tWorkLoadAddRequest) {
        if (!(this_present_tWorkLoadAddRequest && that_present_tWorkLoadAddRequest))
          return false;
        if (!this.tWorkLoadAddRequest.equals(that.tWorkLoadAddRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTWorkLoadAddRequest()) ? 131071 : 524287);
      if (isSetTWorkLoadAddRequest())
        hashCode = hashCode * 8191 + tWorkLoadAddRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addLoad_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTWorkLoadAddRequest()).compareTo(other.isSetTWorkLoadAddRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTWorkLoadAddRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tWorkLoadAddRequest, other.tWorkLoadAddRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addLoad_args(");
      boolean first = true;

      sb.append("tWorkLoadAddRequest:");
      if (this.tWorkLoadAddRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tWorkLoadAddRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tWorkLoadAddRequest != null) {
        tWorkLoadAddRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLoad_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addLoad_argsStandardScheme getScheme() {
        return new addLoad_argsStandardScheme();
      }
    }

    private static class addLoad_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addLoad_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_WORK_LOAD_ADD_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tWorkLoadAddRequest = new TWorkLoadAddRequest();
                struct.tWorkLoadAddRequest.read(iprot);
                struct.setTWorkLoadAddRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLoad_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tWorkLoadAddRequest != null) {
          oprot.writeFieldBegin(T_WORK_LOAD_ADD_REQUEST_FIELD_DESC);
          struct.tWorkLoadAddRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLoad_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addLoad_argsTupleScheme getScheme() {
        return new addLoad_argsTupleScheme();
      }
    }

    private static class addLoad_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addLoad_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTWorkLoadAddRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTWorkLoadAddRequest()) {
          struct.tWorkLoadAddRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tWorkLoadAddRequest = new TWorkLoadAddRequest();
          struct.tWorkLoadAddRequest.read(iprot);
          struct.setTWorkLoadAddRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addLoad_result implements org.apache.thrift.TBase<addLoad_result, addLoad_result._Fields>, java.io.Serializable, Cloneable, Comparable<addLoad_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLoad_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_INVALID_EPOCH_TIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidEpochTimeException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField T_INVALID_WORK_LOAD_VALUE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidWorkLoadValueException", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField T_INVALID_BUSINESS_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidBusinessIdException", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField T_INVALID_DATE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidDateException", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField T_INVALID_VERSION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidVersionException", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addLoad_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addLoad_resultTupleSchemeFactory();

    private TResponseStatus success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required
    private TInvalidEpochTimeException tInvalidEpochTimeException; // required
    private TInvalidWorkLoadValueException tInvalidWorkLoadValueException; // required
    private TInvalidBusinessIdException tInvalidBusinessIdException; // required
    private TInvalidDateException tInvalidDateException; // required
    private TInvalidVersionException tInvalidVersionException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TResponseStatus
       */
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException"),
      T_INVALID_EPOCH_TIME_EXCEPTION((short)3, "tInvalidEpochTimeException"),
      T_INVALID_WORK_LOAD_VALUE_EXCEPTION((short)4, "tInvalidWorkLoadValueException"),
      T_INVALID_BUSINESS_ID_EXCEPTION((short)5, "tInvalidBusinessIdException"),
      T_INVALID_DATE_EXCEPTION((short)6, "tInvalidDateException"),
      T_INVALID_VERSION_EXCEPTION((short)7, "tInvalidVersionException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          case 3: // T_INVALID_EPOCH_TIME_EXCEPTION
            return T_INVALID_EPOCH_TIME_EXCEPTION;
          case 4: // T_INVALID_WORK_LOAD_VALUE_EXCEPTION
            return T_INVALID_WORK_LOAD_VALUE_EXCEPTION;
          case 5: // T_INVALID_BUSINESS_ID_EXCEPTION
            return T_INVALID_BUSINESS_ID_EXCEPTION;
          case 6: // T_INVALID_DATE_EXCEPTION
            return T_INVALID_DATE_EXCEPTION;
          case 7: // T_INVALID_VERSION_EXCEPTION
            return T_INVALID_VERSION_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResponseStatus.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      tmpMap.put(_Fields.T_INVALID_EPOCH_TIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidEpochTimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidEpochTimeException.class)));
      tmpMap.put(_Fields.T_INVALID_WORK_LOAD_VALUE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidWorkLoadValueException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidWorkLoadValueException.class)));
      tmpMap.put(_Fields.T_INVALID_BUSINESS_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidBusinessIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidBusinessIdException.class)));
      tmpMap.put(_Fields.T_INVALID_DATE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidDateException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidDateException.class)));
      tmpMap.put(_Fields.T_INVALID_VERSION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidVersionException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidVersionException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLoad_result.class, metaDataMap);
    }

    public addLoad_result() {
    }

    public addLoad_result(
      TResponseStatus success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException,
      TInvalidEpochTimeException tInvalidEpochTimeException,
      TInvalidWorkLoadValueException tInvalidWorkLoadValueException,
      TInvalidBusinessIdException tInvalidBusinessIdException,
      TInvalidDateException tInvalidDateException,
      TInvalidVersionException tInvalidVersionException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
      this.tInvalidEpochTimeException = tInvalidEpochTimeException;
      this.tInvalidWorkLoadValueException = tInvalidWorkLoadValueException;
      this.tInvalidBusinessIdException = tInvalidBusinessIdException;
      this.tInvalidDateException = tInvalidDateException;
      this.tInvalidVersionException = tInvalidVersionException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLoad_result(addLoad_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
      if (other.isSetTInvalidEpochTimeException()) {
        this.tInvalidEpochTimeException = new TInvalidEpochTimeException(other.tInvalidEpochTimeException);
      }
      if (other.isSetTInvalidWorkLoadValueException()) {
        this.tInvalidWorkLoadValueException = new TInvalidWorkLoadValueException(other.tInvalidWorkLoadValueException);
      }
      if (other.isSetTInvalidBusinessIdException()) {
        this.tInvalidBusinessIdException = new TInvalidBusinessIdException(other.tInvalidBusinessIdException);
      }
      if (other.isSetTInvalidDateException()) {
        this.tInvalidDateException = new TInvalidDateException(other.tInvalidDateException);
      }
      if (other.isSetTInvalidVersionException()) {
        this.tInvalidVersionException = new TInvalidVersionException(other.tInvalidVersionException);
      }
    }

    public addLoad_result deepCopy() {
      return new addLoad_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
      this.tInvalidEpochTimeException = null;
      this.tInvalidWorkLoadValueException = null;
      this.tInvalidBusinessIdException = null;
      this.tInvalidDateException = null;
      this.tInvalidVersionException = null;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public TResponseStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public void setSuccess(TResponseStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public TInvalidEpochTimeException getTInvalidEpochTimeException() {
      return this.tInvalidEpochTimeException;
    }

    public void setTInvalidEpochTimeException(TInvalidEpochTimeException tInvalidEpochTimeException) {
      this.tInvalidEpochTimeException = tInvalidEpochTimeException;
    }

    public void unsetTInvalidEpochTimeException() {
      this.tInvalidEpochTimeException = null;
    }

    /** Returns true if field tInvalidEpochTimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidEpochTimeException() {
      return this.tInvalidEpochTimeException != null;
    }

    public void setTInvalidEpochTimeExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidEpochTimeException = null;
      }
    }

    public TInvalidWorkLoadValueException getTInvalidWorkLoadValueException() {
      return this.tInvalidWorkLoadValueException;
    }

    public void setTInvalidWorkLoadValueException(TInvalidWorkLoadValueException tInvalidWorkLoadValueException) {
      this.tInvalidWorkLoadValueException = tInvalidWorkLoadValueException;
    }

    public void unsetTInvalidWorkLoadValueException() {
      this.tInvalidWorkLoadValueException = null;
    }

    /** Returns true if field tInvalidWorkLoadValueException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidWorkLoadValueException() {
      return this.tInvalidWorkLoadValueException != null;
    }

    public void setTInvalidWorkLoadValueExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidWorkLoadValueException = null;
      }
    }

    public TInvalidBusinessIdException getTInvalidBusinessIdException() {
      return this.tInvalidBusinessIdException;
    }

    public void setTInvalidBusinessIdException(TInvalidBusinessIdException tInvalidBusinessIdException) {
      this.tInvalidBusinessIdException = tInvalidBusinessIdException;
    }

    public void unsetTInvalidBusinessIdException() {
      this.tInvalidBusinessIdException = null;
    }

    /** Returns true if field tInvalidBusinessIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidBusinessIdException() {
      return this.tInvalidBusinessIdException != null;
    }

    public void setTInvalidBusinessIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidBusinessIdException = null;
      }
    }

    public TInvalidDateException getTInvalidDateException() {
      return this.tInvalidDateException;
    }

    public void setTInvalidDateException(TInvalidDateException tInvalidDateException) {
      this.tInvalidDateException = tInvalidDateException;
    }

    public void unsetTInvalidDateException() {
      this.tInvalidDateException = null;
    }

    /** Returns true if field tInvalidDateException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidDateException() {
      return this.tInvalidDateException != null;
    }

    public void setTInvalidDateExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidDateException = null;
      }
    }

    public TInvalidVersionException getTInvalidVersionException() {
      return this.tInvalidVersionException;
    }

    public void setTInvalidVersionException(TInvalidVersionException tInvalidVersionException) {
      this.tInvalidVersionException = tInvalidVersionException;
    }

    public void unsetTInvalidVersionException() {
      this.tInvalidVersionException = null;
    }

    /** Returns true if field tInvalidVersionException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidVersionException() {
      return this.tInvalidVersionException != null;
    }

    public void setTInvalidVersionExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidVersionException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResponseStatus)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      case T_INVALID_EPOCH_TIME_EXCEPTION:
        if (value == null) {
          unsetTInvalidEpochTimeException();
        } else {
          setTInvalidEpochTimeException((TInvalidEpochTimeException)value);
        }
        break;

      case T_INVALID_WORK_LOAD_VALUE_EXCEPTION:
        if (value == null) {
          unsetTInvalidWorkLoadValueException();
        } else {
          setTInvalidWorkLoadValueException((TInvalidWorkLoadValueException)value);
        }
        break;

      case T_INVALID_BUSINESS_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidBusinessIdException();
        } else {
          setTInvalidBusinessIdException((TInvalidBusinessIdException)value);
        }
        break;

      case T_INVALID_DATE_EXCEPTION:
        if (value == null) {
          unsetTInvalidDateException();
        } else {
          setTInvalidDateException((TInvalidDateException)value);
        }
        break;

      case T_INVALID_VERSION_EXCEPTION:
        if (value == null) {
          unsetTInvalidVersionException();
        } else {
          setTInvalidVersionException((TInvalidVersionException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      case T_INVALID_EPOCH_TIME_EXCEPTION:
        return getTInvalidEpochTimeException();

      case T_INVALID_WORK_LOAD_VALUE_EXCEPTION:
        return getTInvalidWorkLoadValueException();

      case T_INVALID_BUSINESS_ID_EXCEPTION:
        return getTInvalidBusinessIdException();

      case T_INVALID_DATE_EXCEPTION:
        return getTInvalidDateException();

      case T_INVALID_VERSION_EXCEPTION:
        return getTInvalidVersionException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      case T_INVALID_EPOCH_TIME_EXCEPTION:
        return isSetTInvalidEpochTimeException();
      case T_INVALID_WORK_LOAD_VALUE_EXCEPTION:
        return isSetTInvalidWorkLoadValueException();
      case T_INVALID_BUSINESS_ID_EXCEPTION:
        return isSetTInvalidBusinessIdException();
      case T_INVALID_DATE_EXCEPTION:
        return isSetTInvalidDateException();
      case T_INVALID_VERSION_EXCEPTION:
        return isSetTInvalidVersionException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addLoad_result)
        return this.equals((addLoad_result)that);
      return false;
    }

    public boolean equals(addLoad_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      boolean this_present_tInvalidEpochTimeException = true && this.isSetTInvalidEpochTimeException();
      boolean that_present_tInvalidEpochTimeException = true && that.isSetTInvalidEpochTimeException();
      if (this_present_tInvalidEpochTimeException || that_present_tInvalidEpochTimeException) {
        if (!(this_present_tInvalidEpochTimeException && that_present_tInvalidEpochTimeException))
          return false;
        if (!this.tInvalidEpochTimeException.equals(that.tInvalidEpochTimeException))
          return false;
      }

      boolean this_present_tInvalidWorkLoadValueException = true && this.isSetTInvalidWorkLoadValueException();
      boolean that_present_tInvalidWorkLoadValueException = true && that.isSetTInvalidWorkLoadValueException();
      if (this_present_tInvalidWorkLoadValueException || that_present_tInvalidWorkLoadValueException) {
        if (!(this_present_tInvalidWorkLoadValueException && that_present_tInvalidWorkLoadValueException))
          return false;
        if (!this.tInvalidWorkLoadValueException.equals(that.tInvalidWorkLoadValueException))
          return false;
      }

      boolean this_present_tInvalidBusinessIdException = true && this.isSetTInvalidBusinessIdException();
      boolean that_present_tInvalidBusinessIdException = true && that.isSetTInvalidBusinessIdException();
      if (this_present_tInvalidBusinessIdException || that_present_tInvalidBusinessIdException) {
        if (!(this_present_tInvalidBusinessIdException && that_present_tInvalidBusinessIdException))
          return false;
        if (!this.tInvalidBusinessIdException.equals(that.tInvalidBusinessIdException))
          return false;
      }

      boolean this_present_tInvalidDateException = true && this.isSetTInvalidDateException();
      boolean that_present_tInvalidDateException = true && that.isSetTInvalidDateException();
      if (this_present_tInvalidDateException || that_present_tInvalidDateException) {
        if (!(this_present_tInvalidDateException && that_present_tInvalidDateException))
          return false;
        if (!this.tInvalidDateException.equals(that.tInvalidDateException))
          return false;
      }

      boolean this_present_tInvalidVersionException = true && this.isSetTInvalidVersionException();
      boolean that_present_tInvalidVersionException = true && that.isSetTInvalidVersionException();
      if (this_present_tInvalidVersionException || that_present_tInvalidVersionException) {
        if (!(this_present_tInvalidVersionException && that_present_tInvalidVersionException))
          return false;
        if (!this.tInvalidVersionException.equals(that.tInvalidVersionException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidEpochTimeException()) ? 131071 : 524287);
      if (isSetTInvalidEpochTimeException())
        hashCode = hashCode * 8191 + tInvalidEpochTimeException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidWorkLoadValueException()) ? 131071 : 524287);
      if (isSetTInvalidWorkLoadValueException())
        hashCode = hashCode * 8191 + tInvalidWorkLoadValueException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidBusinessIdException()) ? 131071 : 524287);
      if (isSetTInvalidBusinessIdException())
        hashCode = hashCode * 8191 + tInvalidBusinessIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidDateException()) ? 131071 : 524287);
      if (isSetTInvalidDateException())
        hashCode = hashCode * 8191 + tInvalidDateException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidVersionException()) ? 131071 : 524287);
      if (isSetTInvalidVersionException())
        hashCode = hashCode * 8191 + tInvalidVersionException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addLoad_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidEpochTimeException()).compareTo(other.isSetTInvalidEpochTimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidEpochTimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidEpochTimeException, other.tInvalidEpochTimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidWorkLoadValueException()).compareTo(other.isSetTInvalidWorkLoadValueException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidWorkLoadValueException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidWorkLoadValueException, other.tInvalidWorkLoadValueException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidBusinessIdException()).compareTo(other.isSetTInvalidBusinessIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidBusinessIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidBusinessIdException, other.tInvalidBusinessIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidDateException()).compareTo(other.isSetTInvalidDateException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidDateException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidDateException, other.tInvalidDateException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidVersionException()).compareTo(other.isSetTInvalidVersionException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidVersionException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidVersionException, other.tInvalidVersionException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addLoad_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidEpochTimeException:");
      if (this.tInvalidEpochTimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidEpochTimeException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidWorkLoadValueException:");
      if (this.tInvalidWorkLoadValueException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidWorkLoadValueException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidBusinessIdException:");
      if (this.tInvalidBusinessIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidBusinessIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidDateException:");
      if (this.tInvalidDateException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidDateException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidVersionException:");
      if (this.tInvalidVersionException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidVersionException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLoad_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addLoad_resultStandardScheme getScheme() {
        return new addLoad_resultStandardScheme();
      }
    }

    private static class addLoad_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addLoad_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_INVALID_EPOCH_TIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidEpochTimeException = new TInvalidEpochTimeException();
                struct.tInvalidEpochTimeException.read(iprot);
                struct.setTInvalidEpochTimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // T_INVALID_WORK_LOAD_VALUE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidWorkLoadValueException = new TInvalidWorkLoadValueException();
                struct.tInvalidWorkLoadValueException.read(iprot);
                struct.setTInvalidWorkLoadValueExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // T_INVALID_BUSINESS_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidBusinessIdException = new TInvalidBusinessIdException();
                struct.tInvalidBusinessIdException.read(iprot);
                struct.setTInvalidBusinessIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // T_INVALID_DATE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidDateException = new TInvalidDateException();
                struct.tInvalidDateException.read(iprot);
                struct.setTInvalidDateExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // T_INVALID_VERSION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidVersionException = new TInvalidVersionException();
                struct.tInvalidVersionException.read(iprot);
                struct.setTInvalidVersionExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLoad_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidEpochTimeException != null) {
          oprot.writeFieldBegin(T_INVALID_EPOCH_TIME_EXCEPTION_FIELD_DESC);
          struct.tInvalidEpochTimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidWorkLoadValueException != null) {
          oprot.writeFieldBegin(T_INVALID_WORK_LOAD_VALUE_EXCEPTION_FIELD_DESC);
          struct.tInvalidWorkLoadValueException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidBusinessIdException != null) {
          oprot.writeFieldBegin(T_INVALID_BUSINESS_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidBusinessIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidDateException != null) {
          oprot.writeFieldBegin(T_INVALID_DATE_EXCEPTION_FIELD_DESC);
          struct.tInvalidDateException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidVersionException != null) {
          oprot.writeFieldBegin(T_INVALID_VERSION_EXCEPTION_FIELD_DESC);
          struct.tInvalidVersionException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLoad_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addLoad_resultTupleScheme getScheme() {
        return new addLoad_resultTupleScheme();
      }
    }

    private static class addLoad_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addLoad_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        if (struct.isSetTInvalidEpochTimeException()) {
          optionals.set(3);
        }
        if (struct.isSetTInvalidWorkLoadValueException()) {
          optionals.set(4);
        }
        if (struct.isSetTInvalidBusinessIdException()) {
          optionals.set(5);
        }
        if (struct.isSetTInvalidDateException()) {
          optionals.set(6);
        }
        if (struct.isSetTInvalidVersionException()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
        if (struct.isSetTInvalidEpochTimeException()) {
          struct.tInvalidEpochTimeException.write(oprot);
        }
        if (struct.isSetTInvalidWorkLoadValueException()) {
          struct.tInvalidWorkLoadValueException.write(oprot);
        }
        if (struct.isSetTInvalidBusinessIdException()) {
          struct.tInvalidBusinessIdException.write(oprot);
        }
        if (struct.isSetTInvalidDateException()) {
          struct.tInvalidDateException.write(oprot);
        }
        if (struct.isSetTInvalidVersionException()) {
          struct.tInvalidVersionException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tInvalidEpochTimeException = new TInvalidEpochTimeException();
          struct.tInvalidEpochTimeException.read(iprot);
          struct.setTInvalidEpochTimeExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tInvalidWorkLoadValueException = new TInvalidWorkLoadValueException();
          struct.tInvalidWorkLoadValueException.read(iprot);
          struct.setTInvalidWorkLoadValueExceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.tInvalidBusinessIdException = new TInvalidBusinessIdException();
          struct.tInvalidBusinessIdException.read(iprot);
          struct.setTInvalidBusinessIdExceptionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.tInvalidDateException = new TInvalidDateException();
          struct.tInvalidDateException.read(iprot);
          struct.setTInvalidDateExceptionIsSet(true);
        }
        if (incoming.get(7)) {
          struct.tInvalidVersionException = new TInvalidVersionException();
          struct.tInvalidVersionException.read(iprot);
          struct.setTInvalidVersionExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLoad_args implements org.apache.thrift.TBase<getLoad_args, getLoad_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoad_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoad_args");

    private static final org.apache.thrift.protocol.TField T_WORK_LOAD_GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tWorkLoadGetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLoad_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLoad_argsTupleSchemeFactory();

    private TWorkLoadGetRequest tWorkLoadGetRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_WORK_LOAD_GET_REQUEST((short)1, "tWorkLoadGetRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_WORK_LOAD_GET_REQUEST
            return T_WORK_LOAD_GET_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_WORK_LOAD_GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tWorkLoadGetRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWorkLoadGetRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoad_args.class, metaDataMap);
    }

    public getLoad_args() {
    }

    public getLoad_args(
      TWorkLoadGetRequest tWorkLoadGetRequest)
    {
      this();
      this.tWorkLoadGetRequest = tWorkLoadGetRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoad_args(getLoad_args other) {
      if (other.isSetTWorkLoadGetRequest()) {
        this.tWorkLoadGetRequest = new TWorkLoadGetRequest(other.tWorkLoadGetRequest);
      }
    }

    public getLoad_args deepCopy() {
      return new getLoad_args(this);
    }

    @Override
    public void clear() {
      this.tWorkLoadGetRequest = null;
    }

    public TWorkLoadGetRequest getTWorkLoadGetRequest() {
      return this.tWorkLoadGetRequest;
    }

    public void setTWorkLoadGetRequest(TWorkLoadGetRequest tWorkLoadGetRequest) {
      this.tWorkLoadGetRequest = tWorkLoadGetRequest;
    }

    public void unsetTWorkLoadGetRequest() {
      this.tWorkLoadGetRequest = null;
    }

    /** Returns true if field tWorkLoadGetRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTWorkLoadGetRequest() {
      return this.tWorkLoadGetRequest != null;
    }

    public void setTWorkLoadGetRequestIsSet(boolean value) {
      if (!value) {
        this.tWorkLoadGetRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_WORK_LOAD_GET_REQUEST:
        if (value == null) {
          unsetTWorkLoadGetRequest();
        } else {
          setTWorkLoadGetRequest((TWorkLoadGetRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_WORK_LOAD_GET_REQUEST:
        return getTWorkLoadGetRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_WORK_LOAD_GET_REQUEST:
        return isSetTWorkLoadGetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoad_args)
        return this.equals((getLoad_args)that);
      return false;
    }

    public boolean equals(getLoad_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tWorkLoadGetRequest = true && this.isSetTWorkLoadGetRequest();
      boolean that_present_tWorkLoadGetRequest = true && that.isSetTWorkLoadGetRequest();
      if (this_present_tWorkLoadGetRequest || that_present_tWorkLoadGetRequest) {
        if (!(this_present_tWorkLoadGetRequest && that_present_tWorkLoadGetRequest))
          return false;
        if (!this.tWorkLoadGetRequest.equals(that.tWorkLoadGetRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTWorkLoadGetRequest()) ? 131071 : 524287);
      if (isSetTWorkLoadGetRequest())
        hashCode = hashCode * 8191 + tWorkLoadGetRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLoad_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTWorkLoadGetRequest()).compareTo(other.isSetTWorkLoadGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTWorkLoadGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tWorkLoadGetRequest, other.tWorkLoadGetRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLoad_args(");
      boolean first = true;

      sb.append("tWorkLoadGetRequest:");
      if (this.tWorkLoadGetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tWorkLoadGetRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tWorkLoadGetRequest != null) {
        tWorkLoadGetRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoad_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoad_argsStandardScheme getScheme() {
        return new getLoad_argsStandardScheme();
      }
    }

    private static class getLoad_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLoad_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_WORK_LOAD_GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tWorkLoadGetRequest = new TWorkLoadGetRequest();
                struct.tWorkLoadGetRequest.read(iprot);
                struct.setTWorkLoadGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoad_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tWorkLoadGetRequest != null) {
          oprot.writeFieldBegin(T_WORK_LOAD_GET_REQUEST_FIELD_DESC);
          struct.tWorkLoadGetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoad_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoad_argsTupleScheme getScheme() {
        return new getLoad_argsTupleScheme();
      }
    }

    private static class getLoad_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLoad_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTWorkLoadGetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTWorkLoadGetRequest()) {
          struct.tWorkLoadGetRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tWorkLoadGetRequest = new TWorkLoadGetRequest();
          struct.tWorkLoadGetRequest.read(iprot);
          struct.setTWorkLoadGetRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLoad_result implements org.apache.thrift.TBase<getLoad_result, getLoad_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoad_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoad_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_INVALID_TIME_RANGE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidTimeRangeException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField T_INVALID_BUSINESS_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidBusinessIdException", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField T_INVALID_DATE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidDateException", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLoad_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLoad_resultTupleSchemeFactory();

    private TWorkLoadResponse success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required
    private TInvalidTimeRangeException tInvalidTimeRangeException; // required
    private TInvalidBusinessIdException tInvalidBusinessIdException; // required
    private TInvalidDateException tInvalidDateException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException"),
      T_INVALID_TIME_RANGE_EXCEPTION((short)3, "tInvalidTimeRangeException"),
      T_INVALID_BUSINESS_ID_EXCEPTION((short)4, "tInvalidBusinessIdException"),
      T_INVALID_DATE_EXCEPTION((short)5, "tInvalidDateException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          case 3: // T_INVALID_TIME_RANGE_EXCEPTION
            return T_INVALID_TIME_RANGE_EXCEPTION;
          case 4: // T_INVALID_BUSINESS_ID_EXCEPTION
            return T_INVALID_BUSINESS_ID_EXCEPTION;
          case 5: // T_INVALID_DATE_EXCEPTION
            return T_INVALID_DATE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWorkLoadResponse.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      tmpMap.put(_Fields.T_INVALID_TIME_RANGE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidTimeRangeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidTimeRangeException.class)));
      tmpMap.put(_Fields.T_INVALID_BUSINESS_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidBusinessIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidBusinessIdException.class)));
      tmpMap.put(_Fields.T_INVALID_DATE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidDateException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidDateException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoad_result.class, metaDataMap);
    }

    public getLoad_result() {
    }

    public getLoad_result(
      TWorkLoadResponse success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException,
      TInvalidTimeRangeException tInvalidTimeRangeException,
      TInvalidBusinessIdException tInvalidBusinessIdException,
      TInvalidDateException tInvalidDateException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
      this.tInvalidTimeRangeException = tInvalidTimeRangeException;
      this.tInvalidBusinessIdException = tInvalidBusinessIdException;
      this.tInvalidDateException = tInvalidDateException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoad_result(getLoad_result other) {
      if (other.isSetSuccess()) {
        this.success = new TWorkLoadResponse(other.success);
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
      if (other.isSetTInvalidTimeRangeException()) {
        this.tInvalidTimeRangeException = new TInvalidTimeRangeException(other.tInvalidTimeRangeException);
      }
      if (other.isSetTInvalidBusinessIdException()) {
        this.tInvalidBusinessIdException = new TInvalidBusinessIdException(other.tInvalidBusinessIdException);
      }
      if (other.isSetTInvalidDateException()) {
        this.tInvalidDateException = new TInvalidDateException(other.tInvalidDateException);
      }
    }

    public getLoad_result deepCopy() {
      return new getLoad_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
      this.tInvalidTimeRangeException = null;
      this.tInvalidBusinessIdException = null;
      this.tInvalidDateException = null;
    }

    public TWorkLoadResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TWorkLoadResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public TInvalidTimeRangeException getTInvalidTimeRangeException() {
      return this.tInvalidTimeRangeException;
    }

    public void setTInvalidTimeRangeException(TInvalidTimeRangeException tInvalidTimeRangeException) {
      this.tInvalidTimeRangeException = tInvalidTimeRangeException;
    }

    public void unsetTInvalidTimeRangeException() {
      this.tInvalidTimeRangeException = null;
    }

    /** Returns true if field tInvalidTimeRangeException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidTimeRangeException() {
      return this.tInvalidTimeRangeException != null;
    }

    public void setTInvalidTimeRangeExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidTimeRangeException = null;
      }
    }

    public TInvalidBusinessIdException getTInvalidBusinessIdException() {
      return this.tInvalidBusinessIdException;
    }

    public void setTInvalidBusinessIdException(TInvalidBusinessIdException tInvalidBusinessIdException) {
      this.tInvalidBusinessIdException = tInvalidBusinessIdException;
    }

    public void unsetTInvalidBusinessIdException() {
      this.tInvalidBusinessIdException = null;
    }

    /** Returns true if field tInvalidBusinessIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidBusinessIdException() {
      return this.tInvalidBusinessIdException != null;
    }

    public void setTInvalidBusinessIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidBusinessIdException = null;
      }
    }

    public TInvalidDateException getTInvalidDateException() {
      return this.tInvalidDateException;
    }

    public void setTInvalidDateException(TInvalidDateException tInvalidDateException) {
      this.tInvalidDateException = tInvalidDateException;
    }

    public void unsetTInvalidDateException() {
      this.tInvalidDateException = null;
    }

    /** Returns true if field tInvalidDateException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidDateException() {
      return this.tInvalidDateException != null;
    }

    public void setTInvalidDateExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidDateException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TWorkLoadResponse)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      case T_INVALID_TIME_RANGE_EXCEPTION:
        if (value == null) {
          unsetTInvalidTimeRangeException();
        } else {
          setTInvalidTimeRangeException((TInvalidTimeRangeException)value);
        }
        break;

      case T_INVALID_BUSINESS_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidBusinessIdException();
        } else {
          setTInvalidBusinessIdException((TInvalidBusinessIdException)value);
        }
        break;

      case T_INVALID_DATE_EXCEPTION:
        if (value == null) {
          unsetTInvalidDateException();
        } else {
          setTInvalidDateException((TInvalidDateException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      case T_INVALID_TIME_RANGE_EXCEPTION:
        return getTInvalidTimeRangeException();

      case T_INVALID_BUSINESS_ID_EXCEPTION:
        return getTInvalidBusinessIdException();

      case T_INVALID_DATE_EXCEPTION:
        return getTInvalidDateException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      case T_INVALID_TIME_RANGE_EXCEPTION:
        return isSetTInvalidTimeRangeException();
      case T_INVALID_BUSINESS_ID_EXCEPTION:
        return isSetTInvalidBusinessIdException();
      case T_INVALID_DATE_EXCEPTION:
        return isSetTInvalidDateException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoad_result)
        return this.equals((getLoad_result)that);
      return false;
    }

    public boolean equals(getLoad_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      boolean this_present_tInvalidTimeRangeException = true && this.isSetTInvalidTimeRangeException();
      boolean that_present_tInvalidTimeRangeException = true && that.isSetTInvalidTimeRangeException();
      if (this_present_tInvalidTimeRangeException || that_present_tInvalidTimeRangeException) {
        if (!(this_present_tInvalidTimeRangeException && that_present_tInvalidTimeRangeException))
          return false;
        if (!this.tInvalidTimeRangeException.equals(that.tInvalidTimeRangeException))
          return false;
      }

      boolean this_present_tInvalidBusinessIdException = true && this.isSetTInvalidBusinessIdException();
      boolean that_present_tInvalidBusinessIdException = true && that.isSetTInvalidBusinessIdException();
      if (this_present_tInvalidBusinessIdException || that_present_tInvalidBusinessIdException) {
        if (!(this_present_tInvalidBusinessIdException && that_present_tInvalidBusinessIdException))
          return false;
        if (!this.tInvalidBusinessIdException.equals(that.tInvalidBusinessIdException))
          return false;
      }

      boolean this_present_tInvalidDateException = true && this.isSetTInvalidDateException();
      boolean that_present_tInvalidDateException = true && that.isSetTInvalidDateException();
      if (this_present_tInvalidDateException || that_present_tInvalidDateException) {
        if (!(this_present_tInvalidDateException && that_present_tInvalidDateException))
          return false;
        if (!this.tInvalidDateException.equals(that.tInvalidDateException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidTimeRangeException()) ? 131071 : 524287);
      if (isSetTInvalidTimeRangeException())
        hashCode = hashCode * 8191 + tInvalidTimeRangeException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidBusinessIdException()) ? 131071 : 524287);
      if (isSetTInvalidBusinessIdException())
        hashCode = hashCode * 8191 + tInvalidBusinessIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidDateException()) ? 131071 : 524287);
      if (isSetTInvalidDateException())
        hashCode = hashCode * 8191 + tInvalidDateException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLoad_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidTimeRangeException()).compareTo(other.isSetTInvalidTimeRangeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidTimeRangeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidTimeRangeException, other.tInvalidTimeRangeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidBusinessIdException()).compareTo(other.isSetTInvalidBusinessIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidBusinessIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidBusinessIdException, other.tInvalidBusinessIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidDateException()).compareTo(other.isSetTInvalidDateException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidDateException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidDateException, other.tInvalidDateException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLoad_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidTimeRangeException:");
      if (this.tInvalidTimeRangeException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidTimeRangeException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidBusinessIdException:");
      if (this.tInvalidBusinessIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidBusinessIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidDateException:");
      if (this.tInvalidDateException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidDateException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoad_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoad_resultStandardScheme getScheme() {
        return new getLoad_resultStandardScheme();
      }
    }

    private static class getLoad_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLoad_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TWorkLoadResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_INVALID_TIME_RANGE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidTimeRangeException = new TInvalidTimeRangeException();
                struct.tInvalidTimeRangeException.read(iprot);
                struct.setTInvalidTimeRangeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // T_INVALID_BUSINESS_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidBusinessIdException = new TInvalidBusinessIdException();
                struct.tInvalidBusinessIdException.read(iprot);
                struct.setTInvalidBusinessIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // T_INVALID_DATE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidDateException = new TInvalidDateException();
                struct.tInvalidDateException.read(iprot);
                struct.setTInvalidDateExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoad_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidTimeRangeException != null) {
          oprot.writeFieldBegin(T_INVALID_TIME_RANGE_EXCEPTION_FIELD_DESC);
          struct.tInvalidTimeRangeException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidBusinessIdException != null) {
          oprot.writeFieldBegin(T_INVALID_BUSINESS_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidBusinessIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidDateException != null) {
          oprot.writeFieldBegin(T_INVALID_DATE_EXCEPTION_FIELD_DESC);
          struct.tInvalidDateException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoad_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLoad_resultTupleScheme getScheme() {
        return new getLoad_resultTupleScheme();
      }
    }

    private static class getLoad_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLoad_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        if (struct.isSetTInvalidTimeRangeException()) {
          optionals.set(3);
        }
        if (struct.isSetTInvalidBusinessIdException()) {
          optionals.set(4);
        }
        if (struct.isSetTInvalidDateException()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
        if (struct.isSetTInvalidTimeRangeException()) {
          struct.tInvalidTimeRangeException.write(oprot);
        }
        if (struct.isSetTInvalidBusinessIdException()) {
          struct.tInvalidBusinessIdException.write(oprot);
        }
        if (struct.isSetTInvalidDateException()) {
          struct.tInvalidDateException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = new TWorkLoadResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tInvalidTimeRangeException = new TInvalidTimeRangeException();
          struct.tInvalidTimeRangeException.read(iprot);
          struct.setTInvalidTimeRangeExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tInvalidBusinessIdException = new TInvalidBusinessIdException();
          struct.tInvalidBusinessIdException.read(iprot);
          struct.setTInvalidBusinessIdExceptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.tInvalidDateException = new TInvalidDateException();
          struct.tInvalidDateException.read(iprot);
          struct.setTInvalidDateExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
