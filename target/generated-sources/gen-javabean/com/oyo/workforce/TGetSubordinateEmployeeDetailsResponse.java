/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.workforce;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-26")
public class TGetSubordinateEmployeeDetailsResponse implements org.apache.thrift.TBase<TGetSubordinateEmployeeDetailsResponse, TGetSubordinateEmployeeDetailsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TGetSubordinateEmployeeDetailsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetSubordinateEmployeeDetailsResponse");

  private static final org.apache.thrift.protocol.TField SUBORDINATE_EMPLOYEE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("subordinateEmployeeList", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGetSubordinateEmployeeDetailsResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGetSubordinateEmployeeDetailsResponseTupleSchemeFactory();

  private java.util.List<java.lang.Long> subordinateEmployeeList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBORDINATE_EMPLOYEE_LIST((short)1, "subordinateEmployeeList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBORDINATE_EMPLOYEE_LIST
          return SUBORDINATE_EMPLOYEE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBORDINATE_EMPLOYEE_LIST, new org.apache.thrift.meta_data.FieldMetaData("subordinateEmployeeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetSubordinateEmployeeDetailsResponse.class, metaDataMap);
  }

  public TGetSubordinateEmployeeDetailsResponse() {
  }

  public TGetSubordinateEmployeeDetailsResponse(
    java.util.List<java.lang.Long> subordinateEmployeeList)
  {
    this();
    this.subordinateEmployeeList = subordinateEmployeeList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetSubordinateEmployeeDetailsResponse(TGetSubordinateEmployeeDetailsResponse other) {
    if (other.isSetSubordinateEmployeeList()) {
      java.util.List<java.lang.Long> __this__subordinateEmployeeList = new java.util.ArrayList<java.lang.Long>(other.subordinateEmployeeList);
      this.subordinateEmployeeList = __this__subordinateEmployeeList;
    }
  }

  public TGetSubordinateEmployeeDetailsResponse deepCopy() {
    return new TGetSubordinateEmployeeDetailsResponse(this);
  }

  @Override
  public void clear() {
    this.subordinateEmployeeList = null;
  }

  public int getSubordinateEmployeeListSize() {
    return (this.subordinateEmployeeList == null) ? 0 : this.subordinateEmployeeList.size();
  }

  public java.util.Iterator<java.lang.Long> getSubordinateEmployeeListIterator() {
    return (this.subordinateEmployeeList == null) ? null : this.subordinateEmployeeList.iterator();
  }

  public void addToSubordinateEmployeeList(long elem) {
    if (this.subordinateEmployeeList == null) {
      this.subordinateEmployeeList = new java.util.ArrayList<java.lang.Long>();
    }
    this.subordinateEmployeeList.add(elem);
  }

  public java.util.List<java.lang.Long> getSubordinateEmployeeList() {
    return this.subordinateEmployeeList;
  }

  public void setSubordinateEmployeeList(java.util.List<java.lang.Long> subordinateEmployeeList) {
    this.subordinateEmployeeList = subordinateEmployeeList;
  }

  public void unsetSubordinateEmployeeList() {
    this.subordinateEmployeeList = null;
  }

  /** Returns true if field subordinateEmployeeList is set (has been assigned a value) and false otherwise */
  public boolean isSetSubordinateEmployeeList() {
    return this.subordinateEmployeeList != null;
  }

  public void setSubordinateEmployeeListIsSet(boolean value) {
    if (!value) {
      this.subordinateEmployeeList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SUBORDINATE_EMPLOYEE_LIST:
      if (value == null) {
        unsetSubordinateEmployeeList();
      } else {
        setSubordinateEmployeeList((java.util.List<java.lang.Long>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBORDINATE_EMPLOYEE_LIST:
      return getSubordinateEmployeeList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUBORDINATE_EMPLOYEE_LIST:
      return isSetSubordinateEmployeeList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TGetSubordinateEmployeeDetailsResponse)
      return this.equals((TGetSubordinateEmployeeDetailsResponse)that);
    return false;
  }

  public boolean equals(TGetSubordinateEmployeeDetailsResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_subordinateEmployeeList = true && this.isSetSubordinateEmployeeList();
    boolean that_present_subordinateEmployeeList = true && that.isSetSubordinateEmployeeList();
    if (this_present_subordinateEmployeeList || that_present_subordinateEmployeeList) {
      if (!(this_present_subordinateEmployeeList && that_present_subordinateEmployeeList))
        return false;
      if (!this.subordinateEmployeeList.equals(that.subordinateEmployeeList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSubordinateEmployeeList()) ? 131071 : 524287);
    if (isSetSubordinateEmployeeList())
      hashCode = hashCode * 8191 + subordinateEmployeeList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TGetSubordinateEmployeeDetailsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSubordinateEmployeeList()).compareTo(other.isSetSubordinateEmployeeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubordinateEmployeeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subordinateEmployeeList, other.subordinateEmployeeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGetSubordinateEmployeeDetailsResponse(");
    boolean first = true;

    sb.append("subordinateEmployeeList:");
    if (this.subordinateEmployeeList == null) {
      sb.append("null");
    } else {
      sb.append(this.subordinateEmployeeList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetSubordinateEmployeeList()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subordinateEmployeeList' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetSubordinateEmployeeDetailsResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TGetSubordinateEmployeeDetailsResponseStandardScheme getScheme() {
      return new TGetSubordinateEmployeeDetailsResponseStandardScheme();
    }
  }

  private static class TGetSubordinateEmployeeDetailsResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGetSubordinateEmployeeDetailsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetSubordinateEmployeeDetailsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBORDINATE_EMPLOYEE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.subordinateEmployeeList = new java.util.ArrayList<java.lang.Long>(_list8.size);
                long _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readI64();
                  struct.subordinateEmployeeList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setSubordinateEmployeeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetSubordinateEmployeeDetailsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subordinateEmployeeList != null) {
        oprot.writeFieldBegin(SUBORDINATE_EMPLOYEE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.subordinateEmployeeList.size()));
          for (long _iter11 : struct.subordinateEmployeeList)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetSubordinateEmployeeDetailsResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TGetSubordinateEmployeeDetailsResponseTupleScheme getScheme() {
      return new TGetSubordinateEmployeeDetailsResponseTupleScheme();
    }
  }

  private static class TGetSubordinateEmployeeDetailsResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGetSubordinateEmployeeDetailsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetSubordinateEmployeeDetailsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.subordinateEmployeeList.size());
        for (long _iter12 : struct.subordinateEmployeeList)
        {
          oprot.writeI64(_iter12);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetSubordinateEmployeeDetailsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.subordinateEmployeeList = new java.util.ArrayList<java.lang.Long>(_list13.size);
        long _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = iprot.readI64();
          struct.subordinateEmployeeList.add(_elem14);
        }
      }
      struct.setSubordinateEmployeeListIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

