/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.workforce;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-23")
public class TRosterService {

  public interface Iface {

    public TResponseStatus markAvailable(TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException;

    public TResponseStatus markUnavailable(TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException;

    public TRoasterAvailabilityResponse isAvailable(TRoasterAvailabilityRequest tRoasterAvailabilityRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void markAvailable(TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException;

    public void markUnavailable(TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException;

    public void isAvailable(TRoasterAvailabilityRequest tRoasterAvailabilityRequest, org.apache.thrift.async.AsyncMethodCallback<TRoasterAvailabilityResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TResponseStatus markAvailable(TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException
    {
      send_markAvailable(tRoasterMarkAvailableRequest);
      return recv_markAvailable();
    }

    public void send_markAvailable(TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest) throws org.apache.thrift.TException
    {
      markAvailable_args args = new markAvailable_args();
      args.setTRoasterMarkAvailableRequest(tRoasterMarkAvailableRequest);
      sendBase("markAvailable", args);
    }

    public TResponseStatus recv_markAvailable() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException
    {
      markAvailable_result result = new markAvailable_result();
      receiveBase(result, "markAvailable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      if (result.tInvalidEpochTimeException != null) {
        throw result.tInvalidEpochTimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markAvailable failed: unknown result");
    }

    public TResponseStatus markUnavailable(TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException
    {
      send_markUnavailable(tRoasterMarkUnAvailableRequest);
      return recv_markUnavailable();
    }

    public void send_markUnavailable(TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest) throws org.apache.thrift.TException
    {
      markUnavailable_args args = new markUnavailable_args();
      args.setTRoasterMarkUnAvailableRequest(tRoasterMarkUnAvailableRequest);
      sendBase("markUnavailable", args);
    }

    public TResponseStatus recv_markUnavailable() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException
    {
      markUnavailable_result result = new markUnavailable_result();
      receiveBase(result, "markUnavailable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      if (result.tInvalidEpochTimeException != null) {
        throw result.tInvalidEpochTimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markUnavailable failed: unknown result");
    }

    public TRoasterAvailabilityResponse isAvailable(TRoasterAvailabilityRequest tRoasterAvailabilityRequest) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException
    {
      send_isAvailable(tRoasterAvailabilityRequest);
      return recv_isAvailable();
    }

    public void send_isAvailable(TRoasterAvailabilityRequest tRoasterAvailabilityRequest) throws org.apache.thrift.TException
    {
      isAvailable_args args = new isAvailable_args();
      args.setTRoasterAvailabilityRequest(tRoasterAvailabilityRequest);
      sendBase("isAvailable", args);
    }

    public TRoasterAvailabilityResponse recv_isAvailable() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException
    {
      isAvailable_result result = new isAvailable_result();
      receiveBase(result, "isAvailable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      if (result.tInvalidEpochTimeException != null) {
        throw result.tInvalidEpochTimeException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isAvailable failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void markAvailable(TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markAvailable_call method_call = new markAvailable_call(tRoasterMarkAvailableRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markAvailable_call extends org.apache.thrift.async.TAsyncMethodCall<TResponseStatus> {
      private TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest;
      public markAvailable_call(TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tRoasterMarkAvailableRequest = tRoasterMarkAvailableRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markAvailable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markAvailable_args args = new markAvailable_args();
        args.setTRoasterMarkAvailableRequest(tRoasterMarkAvailableRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResponseStatus getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markAvailable();
      }
    }

    public void markUnavailable(TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markUnavailable_call method_call = new markUnavailable_call(tRoasterMarkUnAvailableRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markUnavailable_call extends org.apache.thrift.async.TAsyncMethodCall<TResponseStatus> {
      private TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest;
      public markUnavailable_call(TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tRoasterMarkUnAvailableRequest = tRoasterMarkUnAvailableRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markUnavailable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markUnavailable_args args = new markUnavailable_args();
        args.setTRoasterMarkUnAvailableRequest(tRoasterMarkUnAvailableRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResponseStatus getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markUnavailable();
      }
    }

    public void isAvailable(TRoasterAvailabilityRequest tRoasterAvailabilityRequest, org.apache.thrift.async.AsyncMethodCallback<TRoasterAvailabilityResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isAvailable_call method_call = new isAvailable_call(tRoasterAvailabilityRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isAvailable_call extends org.apache.thrift.async.TAsyncMethodCall<TRoasterAvailabilityResponse> {
      private TRoasterAvailabilityRequest tRoasterAvailabilityRequest;
      public isAvailable_call(TRoasterAvailabilityRequest tRoasterAvailabilityRequest, org.apache.thrift.async.AsyncMethodCallback<TRoasterAvailabilityResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tRoasterAvailabilityRequest = tRoasterAvailabilityRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isAvailable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isAvailable_args args = new isAvailable_args();
        args.setTRoasterAvailabilityRequest(tRoasterAvailabilityRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TRoasterAvailabilityResponse getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInvalidEpochTimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isAvailable();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("markAvailable", new markAvailable());
      processMap.put("markUnavailable", new markUnavailable());
      processMap.put("isAvailable", new isAvailable());
      return processMap;
    }

    public static class markAvailable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markAvailable_args> {
      public markAvailable() {
        super("markAvailable");
      }

      public markAvailable_args getEmptyArgsInstance() {
        return new markAvailable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public markAvailable_result getResult(I iface, markAvailable_args args) throws org.apache.thrift.TException {
        markAvailable_result result = new markAvailable_result();
        try {
          result.success = iface.markAvailable(args.tRoasterMarkAvailableRequest);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        } catch (TInvalidEpochTimeException tInvalidEpochTimeException) {
          result.tInvalidEpochTimeException = tInvalidEpochTimeException;
        }
        return result;
      }
    }

    public static class markUnavailable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markUnavailable_args> {
      public markUnavailable() {
        super("markUnavailable");
      }

      public markUnavailable_args getEmptyArgsInstance() {
        return new markUnavailable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public markUnavailable_result getResult(I iface, markUnavailable_args args) throws org.apache.thrift.TException {
        markUnavailable_result result = new markUnavailable_result();
        try {
          result.success = iface.markUnavailable(args.tRoasterMarkUnAvailableRequest);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        } catch (TInvalidEpochTimeException tInvalidEpochTimeException) {
          result.tInvalidEpochTimeException = tInvalidEpochTimeException;
        }
        return result;
      }
    }

    public static class isAvailable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isAvailable_args> {
      public isAvailable() {
        super("isAvailable");
      }

      public isAvailable_args getEmptyArgsInstance() {
        return new isAvailable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isAvailable_result getResult(I iface, isAvailable_args args) throws org.apache.thrift.TException {
        isAvailable_result result = new isAvailable_result();
        try {
          result.success = iface.isAvailable(args.tRoasterAvailabilityRequest);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        } catch (TInvalidEpochTimeException tInvalidEpochTimeException) {
          result.tInvalidEpochTimeException = tInvalidEpochTimeException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("markAvailable", new markAvailable());
      processMap.put("markUnavailable", new markUnavailable());
      processMap.put("isAvailable", new isAvailable());
      return processMap;
    }

    public static class markAvailable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markAvailable_args, TResponseStatus> {
      public markAvailable() {
        super("markAvailable");
      }

      public markAvailable_args getEmptyArgsInstance() {
        return new markAvailable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TResponseStatus>() { 
          public void onComplete(TResponseStatus o) {
            markAvailable_result result = new markAvailable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            markAvailable_result result = new markAvailable_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidEpochTimeException) {
              result.tInvalidEpochTimeException = (TInvalidEpochTimeException) e;
              result.setTInvalidEpochTimeExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markAvailable_args args, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
        iface.markAvailable(args.tRoasterMarkAvailableRequest,resultHandler);
      }
    }

    public static class markUnavailable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markUnavailable_args, TResponseStatus> {
      public markUnavailable() {
        super("markUnavailable");
      }

      public markUnavailable_args getEmptyArgsInstance() {
        return new markUnavailable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TResponseStatus>() { 
          public void onComplete(TResponseStatus o) {
            markUnavailable_result result = new markUnavailable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            markUnavailable_result result = new markUnavailable_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidEpochTimeException) {
              result.tInvalidEpochTimeException = (TInvalidEpochTimeException) e;
              result.setTInvalidEpochTimeExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markUnavailable_args args, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
        iface.markUnavailable(args.tRoasterMarkUnAvailableRequest,resultHandler);
      }
    }

    public static class isAvailable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isAvailable_args, TRoasterAvailabilityResponse> {
      public isAvailable() {
        super("isAvailable");
      }

      public isAvailable_args getEmptyArgsInstance() {
        return new isAvailable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TRoasterAvailabilityResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TRoasterAvailabilityResponse>() { 
          public void onComplete(TRoasterAvailabilityResponse o) {
            isAvailable_result result = new isAvailable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isAvailable_result result = new isAvailable_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidEpochTimeException) {
              result.tInvalidEpochTimeException = (TInvalidEpochTimeException) e;
              result.setTInvalidEpochTimeExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isAvailable_args args, org.apache.thrift.async.AsyncMethodCallback<TRoasterAvailabilityResponse> resultHandler) throws org.apache.thrift.TException {
        iface.isAvailable(args.tRoasterAvailabilityRequest,resultHandler);
      }
    }

  }

  public static class markAvailable_args implements org.apache.thrift.TBase<markAvailable_args, markAvailable_args._Fields>, java.io.Serializable, Cloneable, Comparable<markAvailable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markAvailable_args");

    private static final org.apache.thrift.protocol.TField T_ROASTER_MARK_AVAILABLE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tRoasterMarkAvailableRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new markAvailable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new markAvailable_argsTupleSchemeFactory();

    private TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_ROASTER_MARK_AVAILABLE_REQUEST((short)1, "tRoasterMarkAvailableRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_ROASTER_MARK_AVAILABLE_REQUEST
            return T_ROASTER_MARK_AVAILABLE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_ROASTER_MARK_AVAILABLE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tRoasterMarkAvailableRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRoasterMarkAvailableRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markAvailable_args.class, metaDataMap);
    }

    public markAvailable_args() {
    }

    public markAvailable_args(
      TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest)
    {
      this();
      this.tRoasterMarkAvailableRequest = tRoasterMarkAvailableRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markAvailable_args(markAvailable_args other) {
      if (other.isSetTRoasterMarkAvailableRequest()) {
        this.tRoasterMarkAvailableRequest = new TRoasterMarkAvailableRequest(other.tRoasterMarkAvailableRequest);
      }
    }

    public markAvailable_args deepCopy() {
      return new markAvailable_args(this);
    }

    @Override
    public void clear() {
      this.tRoasterMarkAvailableRequest = null;
    }

    public TRoasterMarkAvailableRequest getTRoasterMarkAvailableRequest() {
      return this.tRoasterMarkAvailableRequest;
    }

    public void setTRoasterMarkAvailableRequest(TRoasterMarkAvailableRequest tRoasterMarkAvailableRequest) {
      this.tRoasterMarkAvailableRequest = tRoasterMarkAvailableRequest;
    }

    public void unsetTRoasterMarkAvailableRequest() {
      this.tRoasterMarkAvailableRequest = null;
    }

    /** Returns true if field tRoasterMarkAvailableRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTRoasterMarkAvailableRequest() {
      return this.tRoasterMarkAvailableRequest != null;
    }

    public void setTRoasterMarkAvailableRequestIsSet(boolean value) {
      if (!value) {
        this.tRoasterMarkAvailableRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_ROASTER_MARK_AVAILABLE_REQUEST:
        if (value == null) {
          unsetTRoasterMarkAvailableRequest();
        } else {
          setTRoasterMarkAvailableRequest((TRoasterMarkAvailableRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_ROASTER_MARK_AVAILABLE_REQUEST:
        return getTRoasterMarkAvailableRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_ROASTER_MARK_AVAILABLE_REQUEST:
        return isSetTRoasterMarkAvailableRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof markAvailable_args)
        return this.equals((markAvailable_args)that);
      return false;
    }

    public boolean equals(markAvailable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tRoasterMarkAvailableRequest = true && this.isSetTRoasterMarkAvailableRequest();
      boolean that_present_tRoasterMarkAvailableRequest = true && that.isSetTRoasterMarkAvailableRequest();
      if (this_present_tRoasterMarkAvailableRequest || that_present_tRoasterMarkAvailableRequest) {
        if (!(this_present_tRoasterMarkAvailableRequest && that_present_tRoasterMarkAvailableRequest))
          return false;
        if (!this.tRoasterMarkAvailableRequest.equals(that.tRoasterMarkAvailableRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTRoasterMarkAvailableRequest()) ? 131071 : 524287);
      if (isSetTRoasterMarkAvailableRequest())
        hashCode = hashCode * 8191 + tRoasterMarkAvailableRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(markAvailable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTRoasterMarkAvailableRequest()).compareTo(other.isSetTRoasterMarkAvailableRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTRoasterMarkAvailableRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tRoasterMarkAvailableRequest, other.tRoasterMarkAvailableRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("markAvailable_args(");
      boolean first = true;

      sb.append("tRoasterMarkAvailableRequest:");
      if (this.tRoasterMarkAvailableRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tRoasterMarkAvailableRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tRoasterMarkAvailableRequest != null) {
        tRoasterMarkAvailableRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markAvailable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markAvailable_argsStandardScheme getScheme() {
        return new markAvailable_argsStandardScheme();
      }
    }

    private static class markAvailable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<markAvailable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markAvailable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_ROASTER_MARK_AVAILABLE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tRoasterMarkAvailableRequest = new TRoasterMarkAvailableRequest();
                struct.tRoasterMarkAvailableRequest.read(iprot);
                struct.setTRoasterMarkAvailableRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markAvailable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tRoasterMarkAvailableRequest != null) {
          oprot.writeFieldBegin(T_ROASTER_MARK_AVAILABLE_REQUEST_FIELD_DESC);
          struct.tRoasterMarkAvailableRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markAvailable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markAvailable_argsTupleScheme getScheme() {
        return new markAvailable_argsTupleScheme();
      }
    }

    private static class markAvailable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<markAvailable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markAvailable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTRoasterMarkAvailableRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTRoasterMarkAvailableRequest()) {
          struct.tRoasterMarkAvailableRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markAvailable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tRoasterMarkAvailableRequest = new TRoasterMarkAvailableRequest();
          struct.tRoasterMarkAvailableRequest.read(iprot);
          struct.setTRoasterMarkAvailableRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class markAvailable_result implements org.apache.thrift.TBase<markAvailable_result, markAvailable_result._Fields>, java.io.Serializable, Cloneable, Comparable<markAvailable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markAvailable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_INVALID_EPOCH_TIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidEpochTimeException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new markAvailable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new markAvailable_resultTupleSchemeFactory();

    private TResponseStatus success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required
    private TInvalidEpochTimeException tInvalidEpochTimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TResponseStatus
       */
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException"),
      T_INVALID_EPOCH_TIME_EXCEPTION((short)3, "tInvalidEpochTimeException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          case 3: // T_INVALID_EPOCH_TIME_EXCEPTION
            return T_INVALID_EPOCH_TIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResponseStatus.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      tmpMap.put(_Fields.T_INVALID_EPOCH_TIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidEpochTimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidEpochTimeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markAvailable_result.class, metaDataMap);
    }

    public markAvailable_result() {
    }

    public markAvailable_result(
      TResponseStatus success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException,
      TInvalidEpochTimeException tInvalidEpochTimeException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
      this.tInvalidEpochTimeException = tInvalidEpochTimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markAvailable_result(markAvailable_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
      if (other.isSetTInvalidEpochTimeException()) {
        this.tInvalidEpochTimeException = new TInvalidEpochTimeException(other.tInvalidEpochTimeException);
      }
    }

    public markAvailable_result deepCopy() {
      return new markAvailable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
      this.tInvalidEpochTimeException = null;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public TResponseStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public void setSuccess(TResponseStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public TInvalidEpochTimeException getTInvalidEpochTimeException() {
      return this.tInvalidEpochTimeException;
    }

    public void setTInvalidEpochTimeException(TInvalidEpochTimeException tInvalidEpochTimeException) {
      this.tInvalidEpochTimeException = tInvalidEpochTimeException;
    }

    public void unsetTInvalidEpochTimeException() {
      this.tInvalidEpochTimeException = null;
    }

    /** Returns true if field tInvalidEpochTimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidEpochTimeException() {
      return this.tInvalidEpochTimeException != null;
    }

    public void setTInvalidEpochTimeExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidEpochTimeException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResponseStatus)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      case T_INVALID_EPOCH_TIME_EXCEPTION:
        if (value == null) {
          unsetTInvalidEpochTimeException();
        } else {
          setTInvalidEpochTimeException((TInvalidEpochTimeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      case T_INVALID_EPOCH_TIME_EXCEPTION:
        return getTInvalidEpochTimeException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      case T_INVALID_EPOCH_TIME_EXCEPTION:
        return isSetTInvalidEpochTimeException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof markAvailable_result)
        return this.equals((markAvailable_result)that);
      return false;
    }

    public boolean equals(markAvailable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      boolean this_present_tInvalidEpochTimeException = true && this.isSetTInvalidEpochTimeException();
      boolean that_present_tInvalidEpochTimeException = true && that.isSetTInvalidEpochTimeException();
      if (this_present_tInvalidEpochTimeException || that_present_tInvalidEpochTimeException) {
        if (!(this_present_tInvalidEpochTimeException && that_present_tInvalidEpochTimeException))
          return false;
        if (!this.tInvalidEpochTimeException.equals(that.tInvalidEpochTimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidEpochTimeException()) ? 131071 : 524287);
      if (isSetTInvalidEpochTimeException())
        hashCode = hashCode * 8191 + tInvalidEpochTimeException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(markAvailable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidEpochTimeException()).compareTo(other.isSetTInvalidEpochTimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidEpochTimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidEpochTimeException, other.tInvalidEpochTimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("markAvailable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidEpochTimeException:");
      if (this.tInvalidEpochTimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidEpochTimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markAvailable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markAvailable_resultStandardScheme getScheme() {
        return new markAvailable_resultStandardScheme();
      }
    }

    private static class markAvailable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<markAvailable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markAvailable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_INVALID_EPOCH_TIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidEpochTimeException = new TInvalidEpochTimeException();
                struct.tInvalidEpochTimeException.read(iprot);
                struct.setTInvalidEpochTimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markAvailable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidEpochTimeException != null) {
          oprot.writeFieldBegin(T_INVALID_EPOCH_TIME_EXCEPTION_FIELD_DESC);
          struct.tInvalidEpochTimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markAvailable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markAvailable_resultTupleScheme getScheme() {
        return new markAvailable_resultTupleScheme();
      }
    }

    private static class markAvailable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<markAvailable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markAvailable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        if (struct.isSetTInvalidEpochTimeException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
        if (struct.isSetTInvalidEpochTimeException()) {
          struct.tInvalidEpochTimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markAvailable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tInvalidEpochTimeException = new TInvalidEpochTimeException();
          struct.tInvalidEpochTimeException.read(iprot);
          struct.setTInvalidEpochTimeExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class markUnavailable_args implements org.apache.thrift.TBase<markUnavailable_args, markUnavailable_args._Fields>, java.io.Serializable, Cloneable, Comparable<markUnavailable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markUnavailable_args");

    private static final org.apache.thrift.protocol.TField T_ROASTER_MARK_UN_AVAILABLE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tRoasterMarkUnAvailableRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new markUnavailable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new markUnavailable_argsTupleSchemeFactory();

    private TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_ROASTER_MARK_UN_AVAILABLE_REQUEST((short)1, "tRoasterMarkUnAvailableRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_ROASTER_MARK_UN_AVAILABLE_REQUEST
            return T_ROASTER_MARK_UN_AVAILABLE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_ROASTER_MARK_UN_AVAILABLE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tRoasterMarkUnAvailableRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRoasterMarkUnAvailableRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markUnavailable_args.class, metaDataMap);
    }

    public markUnavailable_args() {
    }

    public markUnavailable_args(
      TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest)
    {
      this();
      this.tRoasterMarkUnAvailableRequest = tRoasterMarkUnAvailableRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markUnavailable_args(markUnavailable_args other) {
      if (other.isSetTRoasterMarkUnAvailableRequest()) {
        this.tRoasterMarkUnAvailableRequest = new TRoasterMarkUnAvailableRequest(other.tRoasterMarkUnAvailableRequest);
      }
    }

    public markUnavailable_args deepCopy() {
      return new markUnavailable_args(this);
    }

    @Override
    public void clear() {
      this.tRoasterMarkUnAvailableRequest = null;
    }

    public TRoasterMarkUnAvailableRequest getTRoasterMarkUnAvailableRequest() {
      return this.tRoasterMarkUnAvailableRequest;
    }

    public void setTRoasterMarkUnAvailableRequest(TRoasterMarkUnAvailableRequest tRoasterMarkUnAvailableRequest) {
      this.tRoasterMarkUnAvailableRequest = tRoasterMarkUnAvailableRequest;
    }

    public void unsetTRoasterMarkUnAvailableRequest() {
      this.tRoasterMarkUnAvailableRequest = null;
    }

    /** Returns true if field tRoasterMarkUnAvailableRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTRoasterMarkUnAvailableRequest() {
      return this.tRoasterMarkUnAvailableRequest != null;
    }

    public void setTRoasterMarkUnAvailableRequestIsSet(boolean value) {
      if (!value) {
        this.tRoasterMarkUnAvailableRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_ROASTER_MARK_UN_AVAILABLE_REQUEST:
        if (value == null) {
          unsetTRoasterMarkUnAvailableRequest();
        } else {
          setTRoasterMarkUnAvailableRequest((TRoasterMarkUnAvailableRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_ROASTER_MARK_UN_AVAILABLE_REQUEST:
        return getTRoasterMarkUnAvailableRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_ROASTER_MARK_UN_AVAILABLE_REQUEST:
        return isSetTRoasterMarkUnAvailableRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof markUnavailable_args)
        return this.equals((markUnavailable_args)that);
      return false;
    }

    public boolean equals(markUnavailable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tRoasterMarkUnAvailableRequest = true && this.isSetTRoasterMarkUnAvailableRequest();
      boolean that_present_tRoasterMarkUnAvailableRequest = true && that.isSetTRoasterMarkUnAvailableRequest();
      if (this_present_tRoasterMarkUnAvailableRequest || that_present_tRoasterMarkUnAvailableRequest) {
        if (!(this_present_tRoasterMarkUnAvailableRequest && that_present_tRoasterMarkUnAvailableRequest))
          return false;
        if (!this.tRoasterMarkUnAvailableRequest.equals(that.tRoasterMarkUnAvailableRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTRoasterMarkUnAvailableRequest()) ? 131071 : 524287);
      if (isSetTRoasterMarkUnAvailableRequest())
        hashCode = hashCode * 8191 + tRoasterMarkUnAvailableRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(markUnavailable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTRoasterMarkUnAvailableRequest()).compareTo(other.isSetTRoasterMarkUnAvailableRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTRoasterMarkUnAvailableRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tRoasterMarkUnAvailableRequest, other.tRoasterMarkUnAvailableRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("markUnavailable_args(");
      boolean first = true;

      sb.append("tRoasterMarkUnAvailableRequest:");
      if (this.tRoasterMarkUnAvailableRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tRoasterMarkUnAvailableRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tRoasterMarkUnAvailableRequest != null) {
        tRoasterMarkUnAvailableRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markUnavailable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markUnavailable_argsStandardScheme getScheme() {
        return new markUnavailable_argsStandardScheme();
      }
    }

    private static class markUnavailable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<markUnavailable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markUnavailable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_ROASTER_MARK_UN_AVAILABLE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tRoasterMarkUnAvailableRequest = new TRoasterMarkUnAvailableRequest();
                struct.tRoasterMarkUnAvailableRequest.read(iprot);
                struct.setTRoasterMarkUnAvailableRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markUnavailable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tRoasterMarkUnAvailableRequest != null) {
          oprot.writeFieldBegin(T_ROASTER_MARK_UN_AVAILABLE_REQUEST_FIELD_DESC);
          struct.tRoasterMarkUnAvailableRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markUnavailable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markUnavailable_argsTupleScheme getScheme() {
        return new markUnavailable_argsTupleScheme();
      }
    }

    private static class markUnavailable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<markUnavailable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markUnavailable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTRoasterMarkUnAvailableRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTRoasterMarkUnAvailableRequest()) {
          struct.tRoasterMarkUnAvailableRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markUnavailable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tRoasterMarkUnAvailableRequest = new TRoasterMarkUnAvailableRequest();
          struct.tRoasterMarkUnAvailableRequest.read(iprot);
          struct.setTRoasterMarkUnAvailableRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class markUnavailable_result implements org.apache.thrift.TBase<markUnavailable_result, markUnavailable_result._Fields>, java.io.Serializable, Cloneable, Comparable<markUnavailable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markUnavailable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_INVALID_EPOCH_TIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidEpochTimeException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new markUnavailable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new markUnavailable_resultTupleSchemeFactory();

    private TResponseStatus success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required
    private TInvalidEpochTimeException tInvalidEpochTimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TResponseStatus
       */
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException"),
      T_INVALID_EPOCH_TIME_EXCEPTION((short)3, "tInvalidEpochTimeException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          case 3: // T_INVALID_EPOCH_TIME_EXCEPTION
            return T_INVALID_EPOCH_TIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResponseStatus.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      tmpMap.put(_Fields.T_INVALID_EPOCH_TIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidEpochTimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidEpochTimeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markUnavailable_result.class, metaDataMap);
    }

    public markUnavailable_result() {
    }

    public markUnavailable_result(
      TResponseStatus success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException,
      TInvalidEpochTimeException tInvalidEpochTimeException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
      this.tInvalidEpochTimeException = tInvalidEpochTimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markUnavailable_result(markUnavailable_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
      if (other.isSetTInvalidEpochTimeException()) {
        this.tInvalidEpochTimeException = new TInvalidEpochTimeException(other.tInvalidEpochTimeException);
      }
    }

    public markUnavailable_result deepCopy() {
      return new markUnavailable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
      this.tInvalidEpochTimeException = null;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public TResponseStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public void setSuccess(TResponseStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public TInvalidEpochTimeException getTInvalidEpochTimeException() {
      return this.tInvalidEpochTimeException;
    }

    public void setTInvalidEpochTimeException(TInvalidEpochTimeException tInvalidEpochTimeException) {
      this.tInvalidEpochTimeException = tInvalidEpochTimeException;
    }

    public void unsetTInvalidEpochTimeException() {
      this.tInvalidEpochTimeException = null;
    }

    /** Returns true if field tInvalidEpochTimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidEpochTimeException() {
      return this.tInvalidEpochTimeException != null;
    }

    public void setTInvalidEpochTimeExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidEpochTimeException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResponseStatus)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      case T_INVALID_EPOCH_TIME_EXCEPTION:
        if (value == null) {
          unsetTInvalidEpochTimeException();
        } else {
          setTInvalidEpochTimeException((TInvalidEpochTimeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      case T_INVALID_EPOCH_TIME_EXCEPTION:
        return getTInvalidEpochTimeException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      case T_INVALID_EPOCH_TIME_EXCEPTION:
        return isSetTInvalidEpochTimeException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof markUnavailable_result)
        return this.equals((markUnavailable_result)that);
      return false;
    }

    public boolean equals(markUnavailable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      boolean this_present_tInvalidEpochTimeException = true && this.isSetTInvalidEpochTimeException();
      boolean that_present_tInvalidEpochTimeException = true && that.isSetTInvalidEpochTimeException();
      if (this_present_tInvalidEpochTimeException || that_present_tInvalidEpochTimeException) {
        if (!(this_present_tInvalidEpochTimeException && that_present_tInvalidEpochTimeException))
          return false;
        if (!this.tInvalidEpochTimeException.equals(that.tInvalidEpochTimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidEpochTimeException()) ? 131071 : 524287);
      if (isSetTInvalidEpochTimeException())
        hashCode = hashCode * 8191 + tInvalidEpochTimeException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(markUnavailable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidEpochTimeException()).compareTo(other.isSetTInvalidEpochTimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidEpochTimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidEpochTimeException, other.tInvalidEpochTimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("markUnavailable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidEpochTimeException:");
      if (this.tInvalidEpochTimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidEpochTimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markUnavailable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markUnavailable_resultStandardScheme getScheme() {
        return new markUnavailable_resultStandardScheme();
      }
    }

    private static class markUnavailable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<markUnavailable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markUnavailable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_INVALID_EPOCH_TIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidEpochTimeException = new TInvalidEpochTimeException();
                struct.tInvalidEpochTimeException.read(iprot);
                struct.setTInvalidEpochTimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markUnavailable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidEpochTimeException != null) {
          oprot.writeFieldBegin(T_INVALID_EPOCH_TIME_EXCEPTION_FIELD_DESC);
          struct.tInvalidEpochTimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markUnavailable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markUnavailable_resultTupleScheme getScheme() {
        return new markUnavailable_resultTupleScheme();
      }
    }

    private static class markUnavailable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<markUnavailable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markUnavailable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        if (struct.isSetTInvalidEpochTimeException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
        if (struct.isSetTInvalidEpochTimeException()) {
          struct.tInvalidEpochTimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markUnavailable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tInvalidEpochTimeException = new TInvalidEpochTimeException();
          struct.tInvalidEpochTimeException.read(iprot);
          struct.setTInvalidEpochTimeExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isAvailable_args implements org.apache.thrift.TBase<isAvailable_args, isAvailable_args._Fields>, java.io.Serializable, Cloneable, Comparable<isAvailable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isAvailable_args");

    private static final org.apache.thrift.protocol.TField T_ROASTER_AVAILABILITY_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tRoasterAvailabilityRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isAvailable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isAvailable_argsTupleSchemeFactory();

    private TRoasterAvailabilityRequest tRoasterAvailabilityRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_ROASTER_AVAILABILITY_REQUEST((short)1, "tRoasterAvailabilityRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_ROASTER_AVAILABILITY_REQUEST
            return T_ROASTER_AVAILABILITY_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_ROASTER_AVAILABILITY_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tRoasterAvailabilityRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRoasterAvailabilityRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isAvailable_args.class, metaDataMap);
    }

    public isAvailable_args() {
    }

    public isAvailable_args(
      TRoasterAvailabilityRequest tRoasterAvailabilityRequest)
    {
      this();
      this.tRoasterAvailabilityRequest = tRoasterAvailabilityRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isAvailable_args(isAvailable_args other) {
      if (other.isSetTRoasterAvailabilityRequest()) {
        this.tRoasterAvailabilityRequest = new TRoasterAvailabilityRequest(other.tRoasterAvailabilityRequest);
      }
    }

    public isAvailable_args deepCopy() {
      return new isAvailable_args(this);
    }

    @Override
    public void clear() {
      this.tRoasterAvailabilityRequest = null;
    }

    public TRoasterAvailabilityRequest getTRoasterAvailabilityRequest() {
      return this.tRoasterAvailabilityRequest;
    }

    public void setTRoasterAvailabilityRequest(TRoasterAvailabilityRequest tRoasterAvailabilityRequest) {
      this.tRoasterAvailabilityRequest = tRoasterAvailabilityRequest;
    }

    public void unsetTRoasterAvailabilityRequest() {
      this.tRoasterAvailabilityRequest = null;
    }

    /** Returns true if field tRoasterAvailabilityRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTRoasterAvailabilityRequest() {
      return this.tRoasterAvailabilityRequest != null;
    }

    public void setTRoasterAvailabilityRequestIsSet(boolean value) {
      if (!value) {
        this.tRoasterAvailabilityRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_ROASTER_AVAILABILITY_REQUEST:
        if (value == null) {
          unsetTRoasterAvailabilityRequest();
        } else {
          setTRoasterAvailabilityRequest((TRoasterAvailabilityRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_ROASTER_AVAILABILITY_REQUEST:
        return getTRoasterAvailabilityRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_ROASTER_AVAILABILITY_REQUEST:
        return isSetTRoasterAvailabilityRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isAvailable_args)
        return this.equals((isAvailable_args)that);
      return false;
    }

    public boolean equals(isAvailable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tRoasterAvailabilityRequest = true && this.isSetTRoasterAvailabilityRequest();
      boolean that_present_tRoasterAvailabilityRequest = true && that.isSetTRoasterAvailabilityRequest();
      if (this_present_tRoasterAvailabilityRequest || that_present_tRoasterAvailabilityRequest) {
        if (!(this_present_tRoasterAvailabilityRequest && that_present_tRoasterAvailabilityRequest))
          return false;
        if (!this.tRoasterAvailabilityRequest.equals(that.tRoasterAvailabilityRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTRoasterAvailabilityRequest()) ? 131071 : 524287);
      if (isSetTRoasterAvailabilityRequest())
        hashCode = hashCode * 8191 + tRoasterAvailabilityRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isAvailable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTRoasterAvailabilityRequest()).compareTo(other.isSetTRoasterAvailabilityRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTRoasterAvailabilityRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tRoasterAvailabilityRequest, other.tRoasterAvailabilityRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isAvailable_args(");
      boolean first = true;

      sb.append("tRoasterAvailabilityRequest:");
      if (this.tRoasterAvailabilityRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tRoasterAvailabilityRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tRoasterAvailabilityRequest != null) {
        tRoasterAvailabilityRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isAvailable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isAvailable_argsStandardScheme getScheme() {
        return new isAvailable_argsStandardScheme();
      }
    }

    private static class isAvailable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isAvailable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isAvailable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_ROASTER_AVAILABILITY_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tRoasterAvailabilityRequest = new TRoasterAvailabilityRequest();
                struct.tRoasterAvailabilityRequest.read(iprot);
                struct.setTRoasterAvailabilityRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isAvailable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tRoasterAvailabilityRequest != null) {
          oprot.writeFieldBegin(T_ROASTER_AVAILABILITY_REQUEST_FIELD_DESC);
          struct.tRoasterAvailabilityRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isAvailable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isAvailable_argsTupleScheme getScheme() {
        return new isAvailable_argsTupleScheme();
      }
    }

    private static class isAvailable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isAvailable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isAvailable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTRoasterAvailabilityRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTRoasterAvailabilityRequest()) {
          struct.tRoasterAvailabilityRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isAvailable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tRoasterAvailabilityRequest = new TRoasterAvailabilityRequest();
          struct.tRoasterAvailabilityRequest.read(iprot);
          struct.setTRoasterAvailabilityRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isAvailable_result implements org.apache.thrift.TBase<isAvailable_result, isAvailable_result._Fields>, java.io.Serializable, Cloneable, Comparable<isAvailable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isAvailable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_INVALID_EPOCH_TIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidEpochTimeException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isAvailable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isAvailable_resultTupleSchemeFactory();

    private TRoasterAvailabilityResponse success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required
    private TInvalidEpochTimeException tInvalidEpochTimeException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException"),
      T_INVALID_EPOCH_TIME_EXCEPTION((short)3, "tInvalidEpochTimeException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          case 3: // T_INVALID_EPOCH_TIME_EXCEPTION
            return T_INVALID_EPOCH_TIME_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRoasterAvailabilityResponse.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      tmpMap.put(_Fields.T_INVALID_EPOCH_TIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidEpochTimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidEpochTimeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isAvailable_result.class, metaDataMap);
    }

    public isAvailable_result() {
    }

    public isAvailable_result(
      TRoasterAvailabilityResponse success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException,
      TInvalidEpochTimeException tInvalidEpochTimeException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
      this.tInvalidEpochTimeException = tInvalidEpochTimeException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isAvailable_result(isAvailable_result other) {
      if (other.isSetSuccess()) {
        this.success = new TRoasterAvailabilityResponse(other.success);
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
      if (other.isSetTInvalidEpochTimeException()) {
        this.tInvalidEpochTimeException = new TInvalidEpochTimeException(other.tInvalidEpochTimeException);
      }
    }

    public isAvailable_result deepCopy() {
      return new isAvailable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
      this.tInvalidEpochTimeException = null;
    }

    public TRoasterAvailabilityResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TRoasterAvailabilityResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public TInvalidEpochTimeException getTInvalidEpochTimeException() {
      return this.tInvalidEpochTimeException;
    }

    public void setTInvalidEpochTimeException(TInvalidEpochTimeException tInvalidEpochTimeException) {
      this.tInvalidEpochTimeException = tInvalidEpochTimeException;
    }

    public void unsetTInvalidEpochTimeException() {
      this.tInvalidEpochTimeException = null;
    }

    /** Returns true if field tInvalidEpochTimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidEpochTimeException() {
      return this.tInvalidEpochTimeException != null;
    }

    public void setTInvalidEpochTimeExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidEpochTimeException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TRoasterAvailabilityResponse)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      case T_INVALID_EPOCH_TIME_EXCEPTION:
        if (value == null) {
          unsetTInvalidEpochTimeException();
        } else {
          setTInvalidEpochTimeException((TInvalidEpochTimeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      case T_INVALID_EPOCH_TIME_EXCEPTION:
        return getTInvalidEpochTimeException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      case T_INVALID_EPOCH_TIME_EXCEPTION:
        return isSetTInvalidEpochTimeException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isAvailable_result)
        return this.equals((isAvailable_result)that);
      return false;
    }

    public boolean equals(isAvailable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      boolean this_present_tInvalidEpochTimeException = true && this.isSetTInvalidEpochTimeException();
      boolean that_present_tInvalidEpochTimeException = true && that.isSetTInvalidEpochTimeException();
      if (this_present_tInvalidEpochTimeException || that_present_tInvalidEpochTimeException) {
        if (!(this_present_tInvalidEpochTimeException && that_present_tInvalidEpochTimeException))
          return false;
        if (!this.tInvalidEpochTimeException.equals(that.tInvalidEpochTimeException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidEpochTimeException()) ? 131071 : 524287);
      if (isSetTInvalidEpochTimeException())
        hashCode = hashCode * 8191 + tInvalidEpochTimeException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isAvailable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidEpochTimeException()).compareTo(other.isSetTInvalidEpochTimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidEpochTimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidEpochTimeException, other.tInvalidEpochTimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isAvailable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidEpochTimeException:");
      if (this.tInvalidEpochTimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidEpochTimeException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isAvailable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isAvailable_resultStandardScheme getScheme() {
        return new isAvailable_resultStandardScheme();
      }
    }

    private static class isAvailable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isAvailable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isAvailable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TRoasterAvailabilityResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_INVALID_EPOCH_TIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidEpochTimeException = new TInvalidEpochTimeException();
                struct.tInvalidEpochTimeException.read(iprot);
                struct.setTInvalidEpochTimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isAvailable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidEpochTimeException != null) {
          oprot.writeFieldBegin(T_INVALID_EPOCH_TIME_EXCEPTION_FIELD_DESC);
          struct.tInvalidEpochTimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isAvailable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isAvailable_resultTupleScheme getScheme() {
        return new isAvailable_resultTupleScheme();
      }
    }

    private static class isAvailable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isAvailable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isAvailable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        if (struct.isSetTInvalidEpochTimeException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
        if (struct.isSetTInvalidEpochTimeException()) {
          struct.tInvalidEpochTimeException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isAvailable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TRoasterAvailabilityResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tInvalidEpochTimeException = new TInvalidEpochTimeException();
          struct.tInvalidEpochTimeException.read(iprot);
          struct.setTInvalidEpochTimeExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
