/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.workforce;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-23")
public class TEmployeeOnBoardingService {

  public interface Iface {

    public TEmployeeResponse isEmployeeOnboarded(long userProfileId) throws org.apache.thrift.TException;

    public TResponseStatus onboardEmployee(TEmployeeOnboardRequest tEmployeesOnboardRequest) throws TEmployeeAlreadyOnboardedException, TEmployeeDoesntExistException, org.apache.thrift.TException;

    public TResponseStatus offboardEmployee(TEmployeeOffboardRequest tEmployeesOnboardRequest) throws TEmployeeNotOnboardedException, TInvalidBusinessIdException, org.apache.thrift.TException;

    public TEmployeeGetBusinessIdResponse getEmployeesBusinessId(long userProfileId) throws TEmployeeNotOnboardedException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void isEmployeeOnboarded(long userProfileId, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler) throws org.apache.thrift.TException;

    public void onboardEmployee(TEmployeeOnboardRequest tEmployeesOnboardRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException;

    public void offboardEmployee(TEmployeeOffboardRequest tEmployeesOnboardRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException;

    public void getEmployeesBusinessId(long userProfileId, org.apache.thrift.async.AsyncMethodCallback<TEmployeeGetBusinessIdResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TEmployeeResponse isEmployeeOnboarded(long userProfileId) throws org.apache.thrift.TException
    {
      send_isEmployeeOnboarded(userProfileId);
      return recv_isEmployeeOnboarded();
    }

    public void send_isEmployeeOnboarded(long userProfileId) throws org.apache.thrift.TException
    {
      isEmployeeOnboarded_args args = new isEmployeeOnboarded_args();
      args.setUserProfileId(userProfileId);
      sendBase("isEmployeeOnboarded", args);
    }

    public TEmployeeResponse recv_isEmployeeOnboarded() throws org.apache.thrift.TException
    {
      isEmployeeOnboarded_result result = new isEmployeeOnboarded_result();
      receiveBase(result, "isEmployeeOnboarded");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isEmployeeOnboarded failed: unknown result");
    }

    public TResponseStatus onboardEmployee(TEmployeeOnboardRequest tEmployeesOnboardRequest) throws TEmployeeAlreadyOnboardedException, TEmployeeDoesntExistException, org.apache.thrift.TException
    {
      send_onboardEmployee(tEmployeesOnboardRequest);
      return recv_onboardEmployee();
    }

    public void send_onboardEmployee(TEmployeeOnboardRequest tEmployeesOnboardRequest) throws org.apache.thrift.TException
    {
      onboardEmployee_args args = new onboardEmployee_args();
      args.setTEmployeesOnboardRequest(tEmployeesOnboardRequest);
      sendBase("onboardEmployee", args);
    }

    public TResponseStatus recv_onboardEmployee() throws TEmployeeAlreadyOnboardedException, TEmployeeDoesntExistException, org.apache.thrift.TException
    {
      onboardEmployee_result result = new onboardEmployee_result();
      receiveBase(result, "onboardEmployee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tEmployeeAlreadyOnboardedException != null) {
        throw result.tEmployeeAlreadyOnboardedException;
      }
      if (result.tEmployeeDoesntExistException != null) {
        throw result.tEmployeeDoesntExistException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "onboardEmployee failed: unknown result");
    }

    public TResponseStatus offboardEmployee(TEmployeeOffboardRequest tEmployeesOnboardRequest) throws TEmployeeNotOnboardedException, TInvalidBusinessIdException, org.apache.thrift.TException
    {
      send_offboardEmployee(tEmployeesOnboardRequest);
      return recv_offboardEmployee();
    }

    public void send_offboardEmployee(TEmployeeOffboardRequest tEmployeesOnboardRequest) throws org.apache.thrift.TException
    {
      offboardEmployee_args args = new offboardEmployee_args();
      args.setTEmployeesOnboardRequest(tEmployeesOnboardRequest);
      sendBase("offboardEmployee", args);
    }

    public TResponseStatus recv_offboardEmployee() throws TEmployeeNotOnboardedException, TInvalidBusinessIdException, org.apache.thrift.TException
    {
      offboardEmployee_result result = new offboardEmployee_result();
      receiveBase(result, "offboardEmployee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      if (result.tInvalidBusinessIdException != null) {
        throw result.tInvalidBusinessIdException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "offboardEmployee failed: unknown result");
    }

    public TEmployeeGetBusinessIdResponse getEmployeesBusinessId(long userProfileId) throws TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      send_getEmployeesBusinessId(userProfileId);
      return recv_getEmployeesBusinessId();
    }

    public void send_getEmployeesBusinessId(long userProfileId) throws org.apache.thrift.TException
    {
      getEmployeesBusinessId_args args = new getEmployeesBusinessId_args();
      args.setUserProfileId(userProfileId);
      sendBase("getEmployeesBusinessId", args);
    }

    public TEmployeeGetBusinessIdResponse recv_getEmployeesBusinessId() throws TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      getEmployeesBusinessId_result result = new getEmployeesBusinessId_result();
      receiveBase(result, "getEmployeesBusinessId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmployeesBusinessId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void isEmployeeOnboarded(long userProfileId, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isEmployeeOnboarded_call method_call = new isEmployeeOnboarded_call(userProfileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isEmployeeOnboarded_call extends org.apache.thrift.async.TAsyncMethodCall<TEmployeeResponse> {
      private long userProfileId;
      public isEmployeeOnboarded_call(long userProfileId, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userProfileId = userProfileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isEmployeeOnboarded", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isEmployeeOnboarded_args args = new isEmployeeOnboarded_args();
        args.setUserProfileId(userProfileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEmployeeResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isEmployeeOnboarded();
      }
    }

    public void onboardEmployee(TEmployeeOnboardRequest tEmployeesOnboardRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onboardEmployee_call method_call = new onboardEmployee_call(tEmployeesOnboardRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onboardEmployee_call extends org.apache.thrift.async.TAsyncMethodCall<TResponseStatus> {
      private TEmployeeOnboardRequest tEmployeesOnboardRequest;
      public onboardEmployee_call(TEmployeeOnboardRequest tEmployeesOnboardRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tEmployeesOnboardRequest = tEmployeesOnboardRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onboardEmployee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onboardEmployee_args args = new onboardEmployee_args();
        args.setTEmployeesOnboardRequest(tEmployeesOnboardRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResponseStatus getResult() throws TEmployeeAlreadyOnboardedException, TEmployeeDoesntExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_onboardEmployee();
      }
    }

    public void offboardEmployee(TEmployeeOffboardRequest tEmployeesOnboardRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      offboardEmployee_call method_call = new offboardEmployee_call(tEmployeesOnboardRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class offboardEmployee_call extends org.apache.thrift.async.TAsyncMethodCall<TResponseStatus> {
      private TEmployeeOffboardRequest tEmployeesOnboardRequest;
      public offboardEmployee_call(TEmployeeOffboardRequest tEmployeesOnboardRequest, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tEmployeesOnboardRequest = tEmployeesOnboardRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("offboardEmployee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        offboardEmployee_args args = new offboardEmployee_args();
        args.setTEmployeesOnboardRequest(tEmployeesOnboardRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TResponseStatus getResult() throws TEmployeeNotOnboardedException, TInvalidBusinessIdException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_offboardEmployee();
      }
    }

    public void getEmployeesBusinessId(long userProfileId, org.apache.thrift.async.AsyncMethodCallback<TEmployeeGetBusinessIdResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEmployeesBusinessId_call method_call = new getEmployeesBusinessId_call(userProfileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEmployeesBusinessId_call extends org.apache.thrift.async.TAsyncMethodCall<TEmployeeGetBusinessIdResponse> {
      private long userProfileId;
      public getEmployeesBusinessId_call(long userProfileId, org.apache.thrift.async.AsyncMethodCallback<TEmployeeGetBusinessIdResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userProfileId = userProfileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmployeesBusinessId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEmployeesBusinessId_args args = new getEmployeesBusinessId_args();
        args.setUserProfileId(userProfileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEmployeeGetBusinessIdResponse getResult() throws TEmployeeNotOnboardedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEmployeesBusinessId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("isEmployeeOnboarded", new isEmployeeOnboarded());
      processMap.put("onboardEmployee", new onboardEmployee());
      processMap.put("offboardEmployee", new offboardEmployee());
      processMap.put("getEmployeesBusinessId", new getEmployeesBusinessId());
      return processMap;
    }

    public static class isEmployeeOnboarded<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isEmployeeOnboarded_args> {
      public isEmployeeOnboarded() {
        super("isEmployeeOnboarded");
      }

      public isEmployeeOnboarded_args getEmptyArgsInstance() {
        return new isEmployeeOnboarded_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isEmployeeOnboarded_result getResult(I iface, isEmployeeOnboarded_args args) throws org.apache.thrift.TException {
        isEmployeeOnboarded_result result = new isEmployeeOnboarded_result();
        result.success = iface.isEmployeeOnboarded(args.userProfileId);
        return result;
      }
    }

    public static class onboardEmployee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onboardEmployee_args> {
      public onboardEmployee() {
        super("onboardEmployee");
      }

      public onboardEmployee_args getEmptyArgsInstance() {
        return new onboardEmployee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onboardEmployee_result getResult(I iface, onboardEmployee_args args) throws org.apache.thrift.TException {
        onboardEmployee_result result = new onboardEmployee_result();
        try {
          result.success = iface.onboardEmployee(args.tEmployeesOnboardRequest);
        } catch (TEmployeeAlreadyOnboardedException tEmployeeAlreadyOnboardedException) {
          result.tEmployeeAlreadyOnboardedException = tEmployeeAlreadyOnboardedException;
        } catch (TEmployeeDoesntExistException tEmployeeDoesntExistException) {
          result.tEmployeeDoesntExistException = tEmployeeDoesntExistException;
        }
        return result;
      }
    }

    public static class offboardEmployee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, offboardEmployee_args> {
      public offboardEmployee() {
        super("offboardEmployee");
      }

      public offboardEmployee_args getEmptyArgsInstance() {
        return new offboardEmployee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public offboardEmployee_result getResult(I iface, offboardEmployee_args args) throws org.apache.thrift.TException {
        offboardEmployee_result result = new offboardEmployee_result();
        try {
          result.success = iface.offboardEmployee(args.tEmployeesOnboardRequest);
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        } catch (TInvalidBusinessIdException tInvalidBusinessIdException) {
          result.tInvalidBusinessIdException = tInvalidBusinessIdException;
        }
        return result;
      }
    }

    public static class getEmployeesBusinessId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmployeesBusinessId_args> {
      public getEmployeesBusinessId() {
        super("getEmployeesBusinessId");
      }

      public getEmployeesBusinessId_args getEmptyArgsInstance() {
        return new getEmployeesBusinessId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEmployeesBusinessId_result getResult(I iface, getEmployeesBusinessId_args args) throws org.apache.thrift.TException {
        getEmployeesBusinessId_result result = new getEmployeesBusinessId_result();
        try {
          result.success = iface.getEmployeesBusinessId(args.userProfileId);
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("isEmployeeOnboarded", new isEmployeeOnboarded());
      processMap.put("onboardEmployee", new onboardEmployee());
      processMap.put("offboardEmployee", new offboardEmployee());
      processMap.put("getEmployeesBusinessId", new getEmployeesBusinessId());
      return processMap;
    }

    public static class isEmployeeOnboarded<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isEmployeeOnboarded_args, TEmployeeResponse> {
      public isEmployeeOnboarded() {
        super("isEmployeeOnboarded");
      }

      public isEmployeeOnboarded_args getEmptyArgsInstance() {
        return new isEmployeeOnboarded_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse>() { 
          public void onComplete(TEmployeeResponse o) {
            isEmployeeOnboarded_result result = new isEmployeeOnboarded_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isEmployeeOnboarded_result result = new isEmployeeOnboarded_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isEmployeeOnboarded_args args, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler) throws org.apache.thrift.TException {
        iface.isEmployeeOnboarded(args.userProfileId,resultHandler);
      }
    }

    public static class onboardEmployee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onboardEmployee_args, TResponseStatus> {
      public onboardEmployee() {
        super("onboardEmployee");
      }

      public onboardEmployee_args getEmptyArgsInstance() {
        return new onboardEmployee_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TResponseStatus>() { 
          public void onComplete(TResponseStatus o) {
            onboardEmployee_result result = new onboardEmployee_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            onboardEmployee_result result = new onboardEmployee_result();
            if (e instanceof TEmployeeAlreadyOnboardedException) {
              result.tEmployeeAlreadyOnboardedException = (TEmployeeAlreadyOnboardedException) e;
              result.setTEmployeeAlreadyOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeDoesntExistException) {
              result.tEmployeeDoesntExistException = (TEmployeeDoesntExistException) e;
              result.setTEmployeeDoesntExistExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onboardEmployee_args args, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
        iface.onboardEmployee(args.tEmployeesOnboardRequest,resultHandler);
      }
    }

    public static class offboardEmployee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, offboardEmployee_args, TResponseStatus> {
      public offboardEmployee() {
        super("offboardEmployee");
      }

      public offboardEmployee_args getEmptyArgsInstance() {
        return new offboardEmployee_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TResponseStatus>() { 
          public void onComplete(TResponseStatus o) {
            offboardEmployee_result result = new offboardEmployee_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            offboardEmployee_result result = new offboardEmployee_result();
            if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInvalidBusinessIdException) {
              result.tInvalidBusinessIdException = (TInvalidBusinessIdException) e;
              result.setTInvalidBusinessIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, offboardEmployee_args args, org.apache.thrift.async.AsyncMethodCallback<TResponseStatus> resultHandler) throws org.apache.thrift.TException {
        iface.offboardEmployee(args.tEmployeesOnboardRequest,resultHandler);
      }
    }

    public static class getEmployeesBusinessId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmployeesBusinessId_args, TEmployeeGetBusinessIdResponse> {
      public getEmployeesBusinessId() {
        super("getEmployeesBusinessId");
      }

      public getEmployeesBusinessId_args getEmptyArgsInstance() {
        return new getEmployeesBusinessId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TEmployeeGetBusinessIdResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TEmployeeGetBusinessIdResponse>() { 
          public void onComplete(TEmployeeGetBusinessIdResponse o) {
            getEmployeesBusinessId_result result = new getEmployeesBusinessId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getEmployeesBusinessId_result result = new getEmployeesBusinessId_result();
            if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEmployeesBusinessId_args args, org.apache.thrift.async.AsyncMethodCallback<TEmployeeGetBusinessIdResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getEmployeesBusinessId(args.userProfileId,resultHandler);
      }
    }

  }

  public static class isEmployeeOnboarded_args implements org.apache.thrift.TBase<isEmployeeOnboarded_args, isEmployeeOnboarded_args._Fields>, java.io.Serializable, Cloneable, Comparable<isEmployeeOnboarded_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isEmployeeOnboarded_args");

    private static final org.apache.thrift.protocol.TField USER_PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isEmployeeOnboarded_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isEmployeeOnboarded_argsTupleSchemeFactory();

    private long userProfileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_PROFILE_ID((short)1, "userProfileId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_PROFILE_ID
            return USER_PROFILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERPROFILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("userProfileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isEmployeeOnboarded_args.class, metaDataMap);
    }

    public isEmployeeOnboarded_args() {
    }

    public isEmployeeOnboarded_args(
      long userProfileId)
    {
      this();
      this.userProfileId = userProfileId;
      setUserProfileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isEmployeeOnboarded_args(isEmployeeOnboarded_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userProfileId = other.userProfileId;
    }

    public isEmployeeOnboarded_args deepCopy() {
      return new isEmployeeOnboarded_args(this);
    }

    @Override
    public void clear() {
      setUserProfileIdIsSet(false);
      this.userProfileId = 0;
    }

    public long getUserProfileId() {
      return this.userProfileId;
    }

    public void setUserProfileId(long userProfileId) {
      this.userProfileId = userProfileId;
      setUserProfileIdIsSet(true);
    }

    public void unsetUserProfileId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERPROFILEID_ISSET_ID);
    }

    /** Returns true if field userProfileId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserProfileId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERPROFILEID_ISSET_ID);
    }

    public void setUserProfileIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERPROFILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_PROFILE_ID:
        if (value == null) {
          unsetUserProfileId();
        } else {
          setUserProfileId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_PROFILE_ID:
        return getUserProfileId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_PROFILE_ID:
        return isSetUserProfileId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isEmployeeOnboarded_args)
        return this.equals((isEmployeeOnboarded_args)that);
      return false;
    }

    public boolean equals(isEmployeeOnboarded_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userProfileId = true;
      boolean that_present_userProfileId = true;
      if (this_present_userProfileId || that_present_userProfileId) {
        if (!(this_present_userProfileId && that_present_userProfileId))
          return false;
        if (this.userProfileId != that.userProfileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userProfileId);

      return hashCode;
    }

    @Override
    public int compareTo(isEmployeeOnboarded_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserProfileId()).compareTo(other.isSetUserProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfileId, other.userProfileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isEmployeeOnboarded_args(");
      boolean first = true;

      sb.append("userProfileId:");
      sb.append(this.userProfileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isEmployeeOnboarded_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeOnboarded_argsStandardScheme getScheme() {
        return new isEmployeeOnboarded_argsStandardScheme();
      }
    }

    private static class isEmployeeOnboarded_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isEmployeeOnboarded_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isEmployeeOnboarded_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userProfileId = iprot.readI64();
                struct.setUserProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isEmployeeOnboarded_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_PROFILE_ID_FIELD_DESC);
        oprot.writeI64(struct.userProfileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isEmployeeOnboarded_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeOnboarded_argsTupleScheme getScheme() {
        return new isEmployeeOnboarded_argsTupleScheme();
      }
    }

    private static class isEmployeeOnboarded_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isEmployeeOnboarded_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isEmployeeOnboarded_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserProfileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserProfileId()) {
          oprot.writeI64(struct.userProfileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isEmployeeOnboarded_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userProfileId = iprot.readI64();
          struct.setUserProfileIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isEmployeeOnboarded_result implements org.apache.thrift.TBase<isEmployeeOnboarded_result, isEmployeeOnboarded_result._Fields>, java.io.Serializable, Cloneable, Comparable<isEmployeeOnboarded_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isEmployeeOnboarded_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isEmployeeOnboarded_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isEmployeeOnboarded_resultTupleSchemeFactory();

    private TEmployeeResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isEmployeeOnboarded_result.class, metaDataMap);
    }

    public isEmployeeOnboarded_result() {
    }

    public isEmployeeOnboarded_result(
      TEmployeeResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isEmployeeOnboarded_result(isEmployeeOnboarded_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEmployeeResponse(other.success);
      }
    }

    public isEmployeeOnboarded_result deepCopy() {
      return new isEmployeeOnboarded_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TEmployeeResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TEmployeeResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEmployeeResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isEmployeeOnboarded_result)
        return this.equals((isEmployeeOnboarded_result)that);
      return false;
    }

    public boolean equals(isEmployeeOnboarded_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isEmployeeOnboarded_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isEmployeeOnboarded_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isEmployeeOnboarded_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeOnboarded_resultStandardScheme getScheme() {
        return new isEmployeeOnboarded_resultStandardScheme();
      }
    }

    private static class isEmployeeOnboarded_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isEmployeeOnboarded_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isEmployeeOnboarded_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEmployeeResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isEmployeeOnboarded_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isEmployeeOnboarded_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeOnboarded_resultTupleScheme getScheme() {
        return new isEmployeeOnboarded_resultTupleScheme();
      }
    }

    private static class isEmployeeOnboarded_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isEmployeeOnboarded_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isEmployeeOnboarded_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isEmployeeOnboarded_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TEmployeeResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class onboardEmployee_args implements org.apache.thrift.TBase<onboardEmployee_args, onboardEmployee_args._Fields>, java.io.Serializable, Cloneable, Comparable<onboardEmployee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onboardEmployee_args");

    private static final org.apache.thrift.protocol.TField T_EMPLOYEES_ONBOARD_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeesOnboardRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onboardEmployee_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onboardEmployee_argsTupleSchemeFactory();

    private TEmployeeOnboardRequest tEmployeesOnboardRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_EMPLOYEES_ONBOARD_REQUEST((short)1, "tEmployeesOnboardRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_EMPLOYEES_ONBOARD_REQUEST
            return T_EMPLOYEES_ONBOARD_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_EMPLOYEES_ONBOARD_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tEmployeesOnboardRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeOnboardRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onboardEmployee_args.class, metaDataMap);
    }

    public onboardEmployee_args() {
    }

    public onboardEmployee_args(
      TEmployeeOnboardRequest tEmployeesOnboardRequest)
    {
      this();
      this.tEmployeesOnboardRequest = tEmployeesOnboardRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onboardEmployee_args(onboardEmployee_args other) {
      if (other.isSetTEmployeesOnboardRequest()) {
        this.tEmployeesOnboardRequest = new TEmployeeOnboardRequest(other.tEmployeesOnboardRequest);
      }
    }

    public onboardEmployee_args deepCopy() {
      return new onboardEmployee_args(this);
    }

    @Override
    public void clear() {
      this.tEmployeesOnboardRequest = null;
    }

    public TEmployeeOnboardRequest getTEmployeesOnboardRequest() {
      return this.tEmployeesOnboardRequest;
    }

    public void setTEmployeesOnboardRequest(TEmployeeOnboardRequest tEmployeesOnboardRequest) {
      this.tEmployeesOnboardRequest = tEmployeesOnboardRequest;
    }

    public void unsetTEmployeesOnboardRequest() {
      this.tEmployeesOnboardRequest = null;
    }

    /** Returns true if field tEmployeesOnboardRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeesOnboardRequest() {
      return this.tEmployeesOnboardRequest != null;
    }

    public void setTEmployeesOnboardRequestIsSet(boolean value) {
      if (!value) {
        this.tEmployeesOnboardRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_EMPLOYEES_ONBOARD_REQUEST:
        if (value == null) {
          unsetTEmployeesOnboardRequest();
        } else {
          setTEmployeesOnboardRequest((TEmployeeOnboardRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_EMPLOYEES_ONBOARD_REQUEST:
        return getTEmployeesOnboardRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_EMPLOYEES_ONBOARD_REQUEST:
        return isSetTEmployeesOnboardRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof onboardEmployee_args)
        return this.equals((onboardEmployee_args)that);
      return false;
    }

    public boolean equals(onboardEmployee_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tEmployeesOnboardRequest = true && this.isSetTEmployeesOnboardRequest();
      boolean that_present_tEmployeesOnboardRequest = true && that.isSetTEmployeesOnboardRequest();
      if (this_present_tEmployeesOnboardRequest || that_present_tEmployeesOnboardRequest) {
        if (!(this_present_tEmployeesOnboardRequest && that_present_tEmployeesOnboardRequest))
          return false;
        if (!this.tEmployeesOnboardRequest.equals(that.tEmployeesOnboardRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTEmployeesOnboardRequest()) ? 131071 : 524287);
      if (isSetTEmployeesOnboardRequest())
        hashCode = hashCode * 8191 + tEmployeesOnboardRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onboardEmployee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeesOnboardRequest()).compareTo(other.isSetTEmployeesOnboardRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeesOnboardRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeesOnboardRequest, other.tEmployeesOnboardRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onboardEmployee_args(");
      boolean first = true;

      sb.append("tEmployeesOnboardRequest:");
      if (this.tEmployeesOnboardRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeesOnboardRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tEmployeesOnboardRequest != null) {
        tEmployeesOnboardRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onboardEmployee_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public onboardEmployee_argsStandardScheme getScheme() {
        return new onboardEmployee_argsStandardScheme();
      }
    }

    private static class onboardEmployee_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<onboardEmployee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onboardEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_EMPLOYEES_ONBOARD_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeesOnboardRequest = new TEmployeeOnboardRequest();
                struct.tEmployeesOnboardRequest.read(iprot);
                struct.setTEmployeesOnboardRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onboardEmployee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tEmployeesOnboardRequest != null) {
          oprot.writeFieldBegin(T_EMPLOYEES_ONBOARD_REQUEST_FIELD_DESC);
          struct.tEmployeesOnboardRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onboardEmployee_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public onboardEmployee_argsTupleScheme getScheme() {
        return new onboardEmployee_argsTupleScheme();
      }
    }

    private static class onboardEmployee_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<onboardEmployee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onboardEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTEmployeesOnboardRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTEmployeesOnboardRequest()) {
          struct.tEmployeesOnboardRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onboardEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tEmployeesOnboardRequest = new TEmployeeOnboardRequest();
          struct.tEmployeesOnboardRequest.read(iprot);
          struct.setTEmployeesOnboardRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class onboardEmployee_result implements org.apache.thrift.TBase<onboardEmployee_result, onboardEmployee_result._Fields>, java.io.Serializable, Cloneable, Comparable<onboardEmployee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onboardEmployee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeAlreadyOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_DOESNT_EXIST_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeDoesntExistException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new onboardEmployee_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new onboardEmployee_resultTupleSchemeFactory();

    private TResponseStatus success; // required
    private TEmployeeAlreadyOnboardedException tEmployeeAlreadyOnboardedException; // required
    private TEmployeeDoesntExistException tEmployeeDoesntExistException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TResponseStatus
       */
      SUCCESS((short)0, "success"),
      T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION((short)1, "tEmployeeAlreadyOnboardedException"),
      T_EMPLOYEE_DOESNT_EXIST_EXCEPTION((short)2, "tEmployeeDoesntExistException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION;
          case 2: // T_EMPLOYEE_DOESNT_EXIST_EXCEPTION
            return T_EMPLOYEE_DOESNT_EXIST_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResponseStatus.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeAlreadyOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeAlreadyOnboardedException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_DOESNT_EXIST_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeDoesntExistException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeDoesntExistException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onboardEmployee_result.class, metaDataMap);
    }

    public onboardEmployee_result() {
    }

    public onboardEmployee_result(
      TResponseStatus success,
      TEmployeeAlreadyOnboardedException tEmployeeAlreadyOnboardedException,
      TEmployeeDoesntExistException tEmployeeDoesntExistException)
    {
      this();
      this.success = success;
      this.tEmployeeAlreadyOnboardedException = tEmployeeAlreadyOnboardedException;
      this.tEmployeeDoesntExistException = tEmployeeDoesntExistException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onboardEmployee_result(onboardEmployee_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetTEmployeeAlreadyOnboardedException()) {
        this.tEmployeeAlreadyOnboardedException = new TEmployeeAlreadyOnboardedException(other.tEmployeeAlreadyOnboardedException);
      }
      if (other.isSetTEmployeeDoesntExistException()) {
        this.tEmployeeDoesntExistException = new TEmployeeDoesntExistException(other.tEmployeeDoesntExistException);
      }
    }

    public onboardEmployee_result deepCopy() {
      return new onboardEmployee_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tEmployeeAlreadyOnboardedException = null;
      this.tEmployeeDoesntExistException = null;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public TResponseStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public void setSuccess(TResponseStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TEmployeeAlreadyOnboardedException getTEmployeeAlreadyOnboardedException() {
      return this.tEmployeeAlreadyOnboardedException;
    }

    public void setTEmployeeAlreadyOnboardedException(TEmployeeAlreadyOnboardedException tEmployeeAlreadyOnboardedException) {
      this.tEmployeeAlreadyOnboardedException = tEmployeeAlreadyOnboardedException;
    }

    public void unsetTEmployeeAlreadyOnboardedException() {
      this.tEmployeeAlreadyOnboardedException = null;
    }

    /** Returns true if field tEmployeeAlreadyOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeAlreadyOnboardedException() {
      return this.tEmployeeAlreadyOnboardedException != null;
    }

    public void setTEmployeeAlreadyOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeAlreadyOnboardedException = null;
      }
    }

    public TEmployeeDoesntExistException getTEmployeeDoesntExistException() {
      return this.tEmployeeDoesntExistException;
    }

    public void setTEmployeeDoesntExistException(TEmployeeDoesntExistException tEmployeeDoesntExistException) {
      this.tEmployeeDoesntExistException = tEmployeeDoesntExistException;
    }

    public void unsetTEmployeeDoesntExistException() {
      this.tEmployeeDoesntExistException = null;
    }

    /** Returns true if field tEmployeeDoesntExistException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeDoesntExistException() {
      return this.tEmployeeDoesntExistException != null;
    }

    public void setTEmployeeDoesntExistExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeDoesntExistException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResponseStatus)value);
        }
        break;

      case T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeAlreadyOnboardedException();
        } else {
          setTEmployeeAlreadyOnboardedException((TEmployeeAlreadyOnboardedException)value);
        }
        break;

      case T_EMPLOYEE_DOESNT_EXIST_EXCEPTION:
        if (value == null) {
          unsetTEmployeeDoesntExistException();
        } else {
          setTEmployeeDoesntExistException((TEmployeeDoesntExistException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION:
        return getTEmployeeAlreadyOnboardedException();

      case T_EMPLOYEE_DOESNT_EXIST_EXCEPTION:
        return getTEmployeeDoesntExistException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION:
        return isSetTEmployeeAlreadyOnboardedException();
      case T_EMPLOYEE_DOESNT_EXIST_EXCEPTION:
        return isSetTEmployeeDoesntExistException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof onboardEmployee_result)
        return this.equals((onboardEmployee_result)that);
      return false;
    }

    public boolean equals(onboardEmployee_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tEmployeeAlreadyOnboardedException = true && this.isSetTEmployeeAlreadyOnboardedException();
      boolean that_present_tEmployeeAlreadyOnboardedException = true && that.isSetTEmployeeAlreadyOnboardedException();
      if (this_present_tEmployeeAlreadyOnboardedException || that_present_tEmployeeAlreadyOnboardedException) {
        if (!(this_present_tEmployeeAlreadyOnboardedException && that_present_tEmployeeAlreadyOnboardedException))
          return false;
        if (!this.tEmployeeAlreadyOnboardedException.equals(that.tEmployeeAlreadyOnboardedException))
          return false;
      }

      boolean this_present_tEmployeeDoesntExistException = true && this.isSetTEmployeeDoesntExistException();
      boolean that_present_tEmployeeDoesntExistException = true && that.isSetTEmployeeDoesntExistException();
      if (this_present_tEmployeeDoesntExistException || that_present_tEmployeeDoesntExistException) {
        if (!(this_present_tEmployeeDoesntExistException && that_present_tEmployeeDoesntExistException))
          return false;
        if (!this.tEmployeeDoesntExistException.equals(that.tEmployeeDoesntExistException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetTEmployeeAlreadyOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeAlreadyOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeAlreadyOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeDoesntExistException()) ? 131071 : 524287);
      if (isSetTEmployeeDoesntExistException())
        hashCode = hashCode * 8191 + tEmployeeDoesntExistException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(onboardEmployee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeAlreadyOnboardedException()).compareTo(other.isSetTEmployeeAlreadyOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeAlreadyOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeAlreadyOnboardedException, other.tEmployeeAlreadyOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeDoesntExistException()).compareTo(other.isSetTEmployeeDoesntExistException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeDoesntExistException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeDoesntExistException, other.tEmployeeDoesntExistException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("onboardEmployee_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeAlreadyOnboardedException:");
      if (this.tEmployeeAlreadyOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeAlreadyOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeDoesntExistException:");
      if (this.tEmployeeDoesntExistException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeDoesntExistException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onboardEmployee_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public onboardEmployee_resultStandardScheme getScheme() {
        return new onboardEmployee_resultStandardScheme();
      }
    }

    private static class onboardEmployee_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<onboardEmployee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onboardEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeAlreadyOnboardedException = new TEmployeeAlreadyOnboardedException();
                struct.tEmployeeAlreadyOnboardedException.read(iprot);
                struct.setTEmployeeAlreadyOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_DOESNT_EXIST_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeDoesntExistException = new TEmployeeDoesntExistException();
                struct.tEmployeeDoesntExistException.read(iprot);
                struct.setTEmployeeDoesntExistExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onboardEmployee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeAlreadyOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_ALREADY_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeAlreadyOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeDoesntExistException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_DOESNT_EXIST_EXCEPTION_FIELD_DESC);
          struct.tEmployeeDoesntExistException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onboardEmployee_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public onboardEmployee_resultTupleScheme getScheme() {
        return new onboardEmployee_resultTupleScheme();
      }
    }

    private static class onboardEmployee_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<onboardEmployee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onboardEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTEmployeeAlreadyOnboardedException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeDoesntExistException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetTEmployeeAlreadyOnboardedException()) {
          struct.tEmployeeAlreadyOnboardedException.write(oprot);
        }
        if (struct.isSetTEmployeeDoesntExistException()) {
          struct.tEmployeeDoesntExistException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onboardEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tEmployeeAlreadyOnboardedException = new TEmployeeAlreadyOnboardedException();
          struct.tEmployeeAlreadyOnboardedException.read(iprot);
          struct.setTEmployeeAlreadyOnboardedExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeDoesntExistException = new TEmployeeDoesntExistException();
          struct.tEmployeeDoesntExistException.read(iprot);
          struct.setTEmployeeDoesntExistExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class offboardEmployee_args implements org.apache.thrift.TBase<offboardEmployee_args, offboardEmployee_args._Fields>, java.io.Serializable, Cloneable, Comparable<offboardEmployee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offboardEmployee_args");

    private static final org.apache.thrift.protocol.TField T_EMPLOYEES_ONBOARD_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeesOnboardRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new offboardEmployee_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new offboardEmployee_argsTupleSchemeFactory();

    private TEmployeeOffboardRequest tEmployeesOnboardRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_EMPLOYEES_ONBOARD_REQUEST((short)1, "tEmployeesOnboardRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_EMPLOYEES_ONBOARD_REQUEST
            return T_EMPLOYEES_ONBOARD_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_EMPLOYEES_ONBOARD_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tEmployeesOnboardRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeOffboardRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offboardEmployee_args.class, metaDataMap);
    }

    public offboardEmployee_args() {
    }

    public offboardEmployee_args(
      TEmployeeOffboardRequest tEmployeesOnboardRequest)
    {
      this();
      this.tEmployeesOnboardRequest = tEmployeesOnboardRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offboardEmployee_args(offboardEmployee_args other) {
      if (other.isSetTEmployeesOnboardRequest()) {
        this.tEmployeesOnboardRequest = new TEmployeeOffboardRequest(other.tEmployeesOnboardRequest);
      }
    }

    public offboardEmployee_args deepCopy() {
      return new offboardEmployee_args(this);
    }

    @Override
    public void clear() {
      this.tEmployeesOnboardRequest = null;
    }

    public TEmployeeOffboardRequest getTEmployeesOnboardRequest() {
      return this.tEmployeesOnboardRequest;
    }

    public void setTEmployeesOnboardRequest(TEmployeeOffboardRequest tEmployeesOnboardRequest) {
      this.tEmployeesOnboardRequest = tEmployeesOnboardRequest;
    }

    public void unsetTEmployeesOnboardRequest() {
      this.tEmployeesOnboardRequest = null;
    }

    /** Returns true if field tEmployeesOnboardRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeesOnboardRequest() {
      return this.tEmployeesOnboardRequest != null;
    }

    public void setTEmployeesOnboardRequestIsSet(boolean value) {
      if (!value) {
        this.tEmployeesOnboardRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_EMPLOYEES_ONBOARD_REQUEST:
        if (value == null) {
          unsetTEmployeesOnboardRequest();
        } else {
          setTEmployeesOnboardRequest((TEmployeeOffboardRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_EMPLOYEES_ONBOARD_REQUEST:
        return getTEmployeesOnboardRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_EMPLOYEES_ONBOARD_REQUEST:
        return isSetTEmployeesOnboardRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof offboardEmployee_args)
        return this.equals((offboardEmployee_args)that);
      return false;
    }

    public boolean equals(offboardEmployee_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tEmployeesOnboardRequest = true && this.isSetTEmployeesOnboardRequest();
      boolean that_present_tEmployeesOnboardRequest = true && that.isSetTEmployeesOnboardRequest();
      if (this_present_tEmployeesOnboardRequest || that_present_tEmployeesOnboardRequest) {
        if (!(this_present_tEmployeesOnboardRequest && that_present_tEmployeesOnboardRequest))
          return false;
        if (!this.tEmployeesOnboardRequest.equals(that.tEmployeesOnboardRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTEmployeesOnboardRequest()) ? 131071 : 524287);
      if (isSetTEmployeesOnboardRequest())
        hashCode = hashCode * 8191 + tEmployeesOnboardRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(offboardEmployee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeesOnboardRequest()).compareTo(other.isSetTEmployeesOnboardRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeesOnboardRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeesOnboardRequest, other.tEmployeesOnboardRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("offboardEmployee_args(");
      boolean first = true;

      sb.append("tEmployeesOnboardRequest:");
      if (this.tEmployeesOnboardRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeesOnboardRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tEmployeesOnboardRequest != null) {
        tEmployeesOnboardRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class offboardEmployee_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public offboardEmployee_argsStandardScheme getScheme() {
        return new offboardEmployee_argsStandardScheme();
      }
    }

    private static class offboardEmployee_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<offboardEmployee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, offboardEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_EMPLOYEES_ONBOARD_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeesOnboardRequest = new TEmployeeOffboardRequest();
                struct.tEmployeesOnboardRequest.read(iprot);
                struct.setTEmployeesOnboardRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, offboardEmployee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tEmployeesOnboardRequest != null) {
          oprot.writeFieldBegin(T_EMPLOYEES_ONBOARD_REQUEST_FIELD_DESC);
          struct.tEmployeesOnboardRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class offboardEmployee_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public offboardEmployee_argsTupleScheme getScheme() {
        return new offboardEmployee_argsTupleScheme();
      }
    }

    private static class offboardEmployee_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<offboardEmployee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, offboardEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTEmployeesOnboardRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTEmployeesOnboardRequest()) {
          struct.tEmployeesOnboardRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, offboardEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tEmployeesOnboardRequest = new TEmployeeOffboardRequest();
          struct.tEmployeesOnboardRequest.read(iprot);
          struct.setTEmployeesOnboardRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class offboardEmployee_result implements org.apache.thrift.TBase<offboardEmployee_result, offboardEmployee_result._Fields>, java.io.Serializable, Cloneable, Comparable<offboardEmployee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offboardEmployee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_INVALID_BUSINESS_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidBusinessIdException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new offboardEmployee_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new offboardEmployee_resultTupleSchemeFactory();

    private TResponseStatus success; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required
    private TInvalidBusinessIdException tInvalidBusinessIdException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TResponseStatus
       */
      SUCCESS((short)0, "success"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)1, "tEmployeeNotOnboardedException"),
      T_INVALID_BUSINESS_ID_EXCEPTION((short)2, "tInvalidBusinessIdException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          case 2: // T_INVALID_BUSINESS_ID_EXCEPTION
            return T_INVALID_BUSINESS_ID_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResponseStatus.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      tmpMap.put(_Fields.T_INVALID_BUSINESS_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidBusinessIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidBusinessIdException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offboardEmployee_result.class, metaDataMap);
    }

    public offboardEmployee_result() {
    }

    public offboardEmployee_result(
      TResponseStatus success,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException,
      TInvalidBusinessIdException tInvalidBusinessIdException)
    {
      this();
      this.success = success;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
      this.tInvalidBusinessIdException = tInvalidBusinessIdException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offboardEmployee_result(offboardEmployee_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
      if (other.isSetTInvalidBusinessIdException()) {
        this.tInvalidBusinessIdException = new TInvalidBusinessIdException(other.tInvalidBusinessIdException);
      }
    }

    public offboardEmployee_result deepCopy() {
      return new offboardEmployee_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tEmployeeNotOnboardedException = null;
      this.tInvalidBusinessIdException = null;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public TResponseStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TResponseStatus
     */
    public void setSuccess(TResponseStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public TInvalidBusinessIdException getTInvalidBusinessIdException() {
      return this.tInvalidBusinessIdException;
    }

    public void setTInvalidBusinessIdException(TInvalidBusinessIdException tInvalidBusinessIdException) {
      this.tInvalidBusinessIdException = tInvalidBusinessIdException;
    }

    public void unsetTInvalidBusinessIdException() {
      this.tInvalidBusinessIdException = null;
    }

    /** Returns true if field tInvalidBusinessIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidBusinessIdException() {
      return this.tInvalidBusinessIdException != null;
    }

    public void setTInvalidBusinessIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidBusinessIdException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TResponseStatus)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      case T_INVALID_BUSINESS_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidBusinessIdException();
        } else {
          setTInvalidBusinessIdException((TInvalidBusinessIdException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      case T_INVALID_BUSINESS_ID_EXCEPTION:
        return getTInvalidBusinessIdException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      case T_INVALID_BUSINESS_ID_EXCEPTION:
        return isSetTInvalidBusinessIdException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof offboardEmployee_result)
        return this.equals((offboardEmployee_result)that);
      return false;
    }

    public boolean equals(offboardEmployee_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      boolean this_present_tInvalidBusinessIdException = true && this.isSetTInvalidBusinessIdException();
      boolean that_present_tInvalidBusinessIdException = true && that.isSetTInvalidBusinessIdException();
      if (this_present_tInvalidBusinessIdException || that_present_tInvalidBusinessIdException) {
        if (!(this_present_tInvalidBusinessIdException && that_present_tInvalidBusinessIdException))
          return false;
        if (!this.tInvalidBusinessIdException.equals(that.tInvalidBusinessIdException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidBusinessIdException()) ? 131071 : 524287);
      if (isSetTInvalidBusinessIdException())
        hashCode = hashCode * 8191 + tInvalidBusinessIdException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(offboardEmployee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidBusinessIdException()).compareTo(other.isSetTInvalidBusinessIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidBusinessIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidBusinessIdException, other.tInvalidBusinessIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("offboardEmployee_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidBusinessIdException:");
      if (this.tInvalidBusinessIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidBusinessIdException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class offboardEmployee_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public offboardEmployee_resultStandardScheme getScheme() {
        return new offboardEmployee_resultStandardScheme();
      }
    }

    private static class offboardEmployee_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<offboardEmployee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, offboardEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_INVALID_BUSINESS_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidBusinessIdException = new TInvalidBusinessIdException();
                struct.tInvalidBusinessIdException.read(iprot);
                struct.setTInvalidBusinessIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, offboardEmployee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidBusinessIdException != null) {
          oprot.writeFieldBegin(T_INVALID_BUSINESS_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidBusinessIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class offboardEmployee_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public offboardEmployee_resultTupleScheme getScheme() {
        return new offboardEmployee_resultTupleScheme();
      }
    }

    private static class offboardEmployee_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<offboardEmployee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, offboardEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(1);
        }
        if (struct.isSetTInvalidBusinessIdException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
        if (struct.isSetTInvalidBusinessIdException()) {
          struct.tInvalidBusinessIdException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, offboardEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.oyo.workforce.TResponseStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tInvalidBusinessIdException = new TInvalidBusinessIdException();
          struct.tInvalidBusinessIdException.read(iprot);
          struct.setTInvalidBusinessIdExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEmployeesBusinessId_args implements org.apache.thrift.TBase<getEmployeesBusinessId_args, getEmployeesBusinessId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmployeesBusinessId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmployeesBusinessId_args");

    private static final org.apache.thrift.protocol.TField USER_PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmployeesBusinessId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmployeesBusinessId_argsTupleSchemeFactory();

    private long userProfileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_PROFILE_ID((short)1, "userProfileId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_PROFILE_ID
            return USER_PROFILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERPROFILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("userProfileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmployeesBusinessId_args.class, metaDataMap);
    }

    public getEmployeesBusinessId_args() {
    }

    public getEmployeesBusinessId_args(
      long userProfileId)
    {
      this();
      this.userProfileId = userProfileId;
      setUserProfileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmployeesBusinessId_args(getEmployeesBusinessId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userProfileId = other.userProfileId;
    }

    public getEmployeesBusinessId_args deepCopy() {
      return new getEmployeesBusinessId_args(this);
    }

    @Override
    public void clear() {
      setUserProfileIdIsSet(false);
      this.userProfileId = 0;
    }

    public long getUserProfileId() {
      return this.userProfileId;
    }

    public void setUserProfileId(long userProfileId) {
      this.userProfileId = userProfileId;
      setUserProfileIdIsSet(true);
    }

    public void unsetUserProfileId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERPROFILEID_ISSET_ID);
    }

    /** Returns true if field userProfileId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserProfileId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERPROFILEID_ISSET_ID);
    }

    public void setUserProfileIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERPROFILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_PROFILE_ID:
        if (value == null) {
          unsetUserProfileId();
        } else {
          setUserProfileId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_PROFILE_ID:
        return getUserProfileId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_PROFILE_ID:
        return isSetUserProfileId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmployeesBusinessId_args)
        return this.equals((getEmployeesBusinessId_args)that);
      return false;
    }

    public boolean equals(getEmployeesBusinessId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userProfileId = true;
      boolean that_present_userProfileId = true;
      if (this_present_userProfileId || that_present_userProfileId) {
        if (!(this_present_userProfileId && that_present_userProfileId))
          return false;
        if (this.userProfileId != that.userProfileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userProfileId);

      return hashCode;
    }

    @Override
    public int compareTo(getEmployeesBusinessId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserProfileId()).compareTo(other.isSetUserProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfileId, other.userProfileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmployeesBusinessId_args(");
      boolean first = true;

      sb.append("userProfileId:");
      sb.append(this.userProfileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmployeesBusinessId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmployeesBusinessId_argsStandardScheme getScheme() {
        return new getEmployeesBusinessId_argsStandardScheme();
      }
    }

    private static class getEmployeesBusinessId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmployeesBusinessId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmployeesBusinessId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userProfileId = iprot.readI64();
                struct.setUserProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmployeesBusinessId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_PROFILE_ID_FIELD_DESC);
        oprot.writeI64(struct.userProfileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmployeesBusinessId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmployeesBusinessId_argsTupleScheme getScheme() {
        return new getEmployeesBusinessId_argsTupleScheme();
      }
    }

    private static class getEmployeesBusinessId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmployeesBusinessId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmployeesBusinessId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserProfileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserProfileId()) {
          oprot.writeI64(struct.userProfileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmployeesBusinessId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userProfileId = iprot.readI64();
          struct.setUserProfileIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEmployeesBusinessId_result implements org.apache.thrift.TBase<getEmployeesBusinessId_result, getEmployeesBusinessId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmployeesBusinessId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmployeesBusinessId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmployeesBusinessId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmployeesBusinessId_resultTupleSchemeFactory();

    private TEmployeeGetBusinessIdResponse success; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)1, "tEmployeeNotOnboardedException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeGetBusinessIdResponse.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmployeesBusinessId_result.class, metaDataMap);
    }

    public getEmployeesBusinessId_result() {
    }

    public getEmployeesBusinessId_result(
      TEmployeeGetBusinessIdResponse success,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException)
    {
      this();
      this.success = success;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmployeesBusinessId_result(getEmployeesBusinessId_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEmployeeGetBusinessIdResponse(other.success);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
    }

    public getEmployeesBusinessId_result deepCopy() {
      return new getEmployeesBusinessId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tEmployeeNotOnboardedException = null;
    }

    public TEmployeeGetBusinessIdResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TEmployeeGetBusinessIdResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEmployeeGetBusinessIdResponse)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmployeesBusinessId_result)
        return this.equals((getEmployeesBusinessId_result)that);
      return false;
    }

    public boolean equals(getEmployeesBusinessId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEmployeesBusinessId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmployeesBusinessId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmployeesBusinessId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmployeesBusinessId_resultStandardScheme getScheme() {
        return new getEmployeesBusinessId_resultStandardScheme();
      }
    }

    private static class getEmployeesBusinessId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmployeesBusinessId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmployeesBusinessId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEmployeeGetBusinessIdResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmployeesBusinessId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmployeesBusinessId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmployeesBusinessId_resultTupleScheme getScheme() {
        return new getEmployeesBusinessId_resultTupleScheme();
      }
    }

    private static class getEmployeesBusinessId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmployeesBusinessId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmployeesBusinessId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmployeesBusinessId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TEmployeeGetBusinessIdResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
