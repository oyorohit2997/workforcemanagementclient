/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.workforce;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-03-11")
public class TWorkForceService {

  public interface Iface {

    public TGetEmployeesResponse getEmployees(TGetEmployeesRequest tGetEmployeesRequest) throws org.apache.thrift.TException;

    public TEmployeeResponse isEmployeeAvailableNow(long userProfileId) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInternalErrorException, org.apache.thrift.TException;

    public TEmployeeResponse isEmployeeAvailableInRange(long userProfileId, long startTime, long endTime) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInternalErrorException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getEmployees(TGetEmployeesRequest tGetEmployeesRequest, org.apache.thrift.async.AsyncMethodCallback<TGetEmployeesResponse> resultHandler) throws org.apache.thrift.TException;

    public void isEmployeeAvailableNow(long userProfileId, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler) throws org.apache.thrift.TException;

    public void isEmployeeAvailableInRange(long userProfileId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TGetEmployeesResponse getEmployees(TGetEmployeesRequest tGetEmployeesRequest) throws org.apache.thrift.TException
    {
      send_getEmployees(tGetEmployeesRequest);
      return recv_getEmployees();
    }

    public void send_getEmployees(TGetEmployeesRequest tGetEmployeesRequest) throws org.apache.thrift.TException
    {
      getEmployees_args args = new getEmployees_args();
      args.setTGetEmployeesRequest(tGetEmployeesRequest);
      sendBase("getEmployees", args);
    }

    public TGetEmployeesResponse recv_getEmployees() throws org.apache.thrift.TException
    {
      getEmployees_result result = new getEmployees_result();
      receiveBase(result, "getEmployees");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmployees failed: unknown result");
    }

    public TEmployeeResponse isEmployeeAvailableNow(long userProfileId) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInternalErrorException, org.apache.thrift.TException
    {
      send_isEmployeeAvailableNow(userProfileId);
      return recv_isEmployeeAvailableNow();
    }

    public void send_isEmployeeAvailableNow(long userProfileId) throws org.apache.thrift.TException
    {
      isEmployeeAvailableNow_args args = new isEmployeeAvailableNow_args();
      args.setUserProfileId(userProfileId);
      sendBase("isEmployeeAvailableNow", args);
    }

    public TEmployeeResponse recv_isEmployeeAvailableNow() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInternalErrorException, org.apache.thrift.TException
    {
      isEmployeeAvailableNow_result result = new isEmployeeAvailableNow_result();
      receiveBase(result, "isEmployeeAvailableNow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      if (result.tInternalErrorException != null) {
        throw result.tInternalErrorException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isEmployeeAvailableNow failed: unknown result");
    }

    public TEmployeeResponse isEmployeeAvailableInRange(long userProfileId, long startTime, long endTime) throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInternalErrorException, org.apache.thrift.TException
    {
      send_isEmployeeAvailableInRange(userProfileId, startTime, endTime);
      return recv_isEmployeeAvailableInRange();
    }

    public void send_isEmployeeAvailableInRange(long userProfileId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      isEmployeeAvailableInRange_args args = new isEmployeeAvailableInRange_args();
      args.setUserProfileId(userProfileId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("isEmployeeAvailableInRange", args);
    }

    public TEmployeeResponse recv_isEmployeeAvailableInRange() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInternalErrorException, org.apache.thrift.TException
    {
      isEmployeeAvailableInRange_result result = new isEmployeeAvailableInRange_result();
      receiveBase(result, "isEmployeeAvailableInRange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidUserProfileIdException != null) {
        throw result.tInvalidUserProfileIdException;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      if (result.tInternalErrorException != null) {
        throw result.tInternalErrorException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isEmployeeAvailableInRange failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getEmployees(TGetEmployeesRequest tGetEmployeesRequest, org.apache.thrift.async.AsyncMethodCallback<TGetEmployeesResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEmployees_call method_call = new getEmployees_call(tGetEmployeesRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEmployees_call extends org.apache.thrift.async.TAsyncMethodCall<TGetEmployeesResponse> {
      private TGetEmployeesRequest tGetEmployeesRequest;
      public getEmployees_call(TGetEmployeesRequest tGetEmployeesRequest, org.apache.thrift.async.AsyncMethodCallback<TGetEmployeesResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tGetEmployeesRequest = tGetEmployeesRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmployees", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEmployees_args args = new getEmployees_args();
        args.setTGetEmployeesRequest(tGetEmployeesRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGetEmployeesResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEmployees();
      }
    }

    public void isEmployeeAvailableNow(long userProfileId, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isEmployeeAvailableNow_call method_call = new isEmployeeAvailableNow_call(userProfileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isEmployeeAvailableNow_call extends org.apache.thrift.async.TAsyncMethodCall<TEmployeeResponse> {
      private long userProfileId;
      public isEmployeeAvailableNow_call(long userProfileId, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userProfileId = userProfileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isEmployeeAvailableNow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isEmployeeAvailableNow_args args = new isEmployeeAvailableNow_args();
        args.setUserProfileId(userProfileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEmployeeResponse getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInternalErrorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isEmployeeAvailableNow();
      }
    }

    public void isEmployeeAvailableInRange(long userProfileId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isEmployeeAvailableInRange_call method_call = new isEmployeeAvailableInRange_call(userProfileId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isEmployeeAvailableInRange_call extends org.apache.thrift.async.TAsyncMethodCall<TEmployeeResponse> {
      private long userProfileId;
      private long startTime;
      private long endTime;
      public isEmployeeAvailableInRange_call(long userProfileId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userProfileId = userProfileId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isEmployeeAvailableInRange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isEmployeeAvailableInRange_args args = new isEmployeeAvailableInRange_args();
        args.setUserProfileId(userProfileId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEmployeeResponse getResult() throws TInvalidUserProfileIdException, TEmployeeNotOnboardedException, TInternalErrorException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isEmployeeAvailableInRange();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getEmployees", new getEmployees());
      processMap.put("isEmployeeAvailableNow", new isEmployeeAvailableNow());
      processMap.put("isEmployeeAvailableInRange", new isEmployeeAvailableInRange());
      return processMap;
    }

    public static class getEmployees<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmployees_args> {
      public getEmployees() {
        super("getEmployees");
      }

      public getEmployees_args getEmptyArgsInstance() {
        return new getEmployees_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEmployees_result getResult(I iface, getEmployees_args args) throws org.apache.thrift.TException {
        getEmployees_result result = new getEmployees_result();
        result.success = iface.getEmployees(args.tGetEmployeesRequest);
        return result;
      }
    }

    public static class isEmployeeAvailableNow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isEmployeeAvailableNow_args> {
      public isEmployeeAvailableNow() {
        super("isEmployeeAvailableNow");
      }

      public isEmployeeAvailableNow_args getEmptyArgsInstance() {
        return new isEmployeeAvailableNow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isEmployeeAvailableNow_result getResult(I iface, isEmployeeAvailableNow_args args) throws org.apache.thrift.TException {
        isEmployeeAvailableNow_result result = new isEmployeeAvailableNow_result();
        try {
          result.success = iface.isEmployeeAvailableNow(args.userProfileId);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        } catch (TInternalErrorException tInternalErrorException) {
          result.tInternalErrorException = tInternalErrorException;
        }
        return result;
      }
    }

    public static class isEmployeeAvailableInRange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isEmployeeAvailableInRange_args> {
      public isEmployeeAvailableInRange() {
        super("isEmployeeAvailableInRange");
      }

      public isEmployeeAvailableInRange_args getEmptyArgsInstance() {
        return new isEmployeeAvailableInRange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isEmployeeAvailableInRange_result getResult(I iface, isEmployeeAvailableInRange_args args) throws org.apache.thrift.TException {
        isEmployeeAvailableInRange_result result = new isEmployeeAvailableInRange_result();
        try {
          result.success = iface.isEmployeeAvailableInRange(args.userProfileId, args.startTime, args.endTime);
        } catch (TInvalidUserProfileIdException tInvalidUserProfileIdException) {
          result.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        } catch (TInternalErrorException tInternalErrorException) {
          result.tInternalErrorException = tInternalErrorException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getEmployees", new getEmployees());
      processMap.put("isEmployeeAvailableNow", new isEmployeeAvailableNow());
      processMap.put("isEmployeeAvailableInRange", new isEmployeeAvailableInRange());
      return processMap;
    }

    public static class getEmployees<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmployees_args, TGetEmployeesResponse> {
      public getEmployees() {
        super("getEmployees");
      }

      public getEmployees_args getEmptyArgsInstance() {
        return new getEmployees_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TGetEmployeesResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TGetEmployeesResponse>() { 
          public void onComplete(TGetEmployeesResponse o) {
            getEmployees_result result = new getEmployees_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getEmployees_result result = new getEmployees_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEmployees_args args, org.apache.thrift.async.AsyncMethodCallback<TGetEmployeesResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getEmployees(args.tGetEmployeesRequest,resultHandler);
      }
    }

    public static class isEmployeeAvailableNow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isEmployeeAvailableNow_args, TEmployeeResponse> {
      public isEmployeeAvailableNow() {
        super("isEmployeeAvailableNow");
      }

      public isEmployeeAvailableNow_args getEmptyArgsInstance() {
        return new isEmployeeAvailableNow_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse>() { 
          public void onComplete(TEmployeeResponse o) {
            isEmployeeAvailableNow_result result = new isEmployeeAvailableNow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isEmployeeAvailableNow_result result = new isEmployeeAvailableNow_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInternalErrorException) {
              result.tInternalErrorException = (TInternalErrorException) e;
              result.setTInternalErrorExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isEmployeeAvailableNow_args args, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler) throws org.apache.thrift.TException {
        iface.isEmployeeAvailableNow(args.userProfileId,resultHandler);
      }
    }

    public static class isEmployeeAvailableInRange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isEmployeeAvailableInRange_args, TEmployeeResponse> {
      public isEmployeeAvailableInRange() {
        super("isEmployeeAvailableInRange");
      }

      public isEmployeeAvailableInRange_args getEmptyArgsInstance() {
        return new isEmployeeAvailableInRange_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse>() { 
          public void onComplete(TEmployeeResponse o) {
            isEmployeeAvailableInRange_result result = new isEmployeeAvailableInRange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isEmployeeAvailableInRange_result result = new isEmployeeAvailableInRange_result();
            if (e instanceof TInvalidUserProfileIdException) {
              result.tInvalidUserProfileIdException = (TInvalidUserProfileIdException) e;
              result.setTInvalidUserProfileIdExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof TInternalErrorException) {
              result.tInternalErrorException = (TInternalErrorException) e;
              result.setTInternalErrorExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isEmployeeAvailableInRange_args args, org.apache.thrift.async.AsyncMethodCallback<TEmployeeResponse> resultHandler) throws org.apache.thrift.TException {
        iface.isEmployeeAvailableInRange(args.userProfileId, args.startTime, args.endTime,resultHandler);
      }
    }

  }

  public static class getEmployees_args implements org.apache.thrift.TBase<getEmployees_args, getEmployees_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmployees_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmployees_args");

    private static final org.apache.thrift.protocol.TField T_GET_EMPLOYEES_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tGetEmployeesRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmployees_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmployees_argsTupleSchemeFactory();

    private TGetEmployeesRequest tGetEmployeesRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_GET_EMPLOYEES_REQUEST((short)1, "tGetEmployeesRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_GET_EMPLOYEES_REQUEST
            return T_GET_EMPLOYEES_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_GET_EMPLOYEES_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tGetEmployeesRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetEmployeesRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmployees_args.class, metaDataMap);
    }

    public getEmployees_args() {
    }

    public getEmployees_args(
      TGetEmployeesRequest tGetEmployeesRequest)
    {
      this();
      this.tGetEmployeesRequest = tGetEmployeesRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmployees_args(getEmployees_args other) {
      if (other.isSetTGetEmployeesRequest()) {
        this.tGetEmployeesRequest = new TGetEmployeesRequest(other.tGetEmployeesRequest);
      }
    }

    public getEmployees_args deepCopy() {
      return new getEmployees_args(this);
    }

    @Override
    public void clear() {
      this.tGetEmployeesRequest = null;
    }

    public TGetEmployeesRequest getTGetEmployeesRequest() {
      return this.tGetEmployeesRequest;
    }

    public void setTGetEmployeesRequest(TGetEmployeesRequest tGetEmployeesRequest) {
      this.tGetEmployeesRequest = tGetEmployeesRequest;
    }

    public void unsetTGetEmployeesRequest() {
      this.tGetEmployeesRequest = null;
    }

    /** Returns true if field tGetEmployeesRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTGetEmployeesRequest() {
      return this.tGetEmployeesRequest != null;
    }

    public void setTGetEmployeesRequestIsSet(boolean value) {
      if (!value) {
        this.tGetEmployeesRequest = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_GET_EMPLOYEES_REQUEST:
        if (value == null) {
          unsetTGetEmployeesRequest();
        } else {
          setTGetEmployeesRequest((TGetEmployeesRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_GET_EMPLOYEES_REQUEST:
        return getTGetEmployeesRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_GET_EMPLOYEES_REQUEST:
        return isSetTGetEmployeesRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmployees_args)
        return this.equals((getEmployees_args)that);
      return false;
    }

    public boolean equals(getEmployees_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tGetEmployeesRequest = true && this.isSetTGetEmployeesRequest();
      boolean that_present_tGetEmployeesRequest = true && that.isSetTGetEmployeesRequest();
      if (this_present_tGetEmployeesRequest || that_present_tGetEmployeesRequest) {
        if (!(this_present_tGetEmployeesRequest && that_present_tGetEmployeesRequest))
          return false;
        if (!this.tGetEmployeesRequest.equals(that.tGetEmployeesRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTGetEmployeesRequest()) ? 131071 : 524287);
      if (isSetTGetEmployeesRequest())
        hashCode = hashCode * 8191 + tGetEmployeesRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEmployees_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTGetEmployeesRequest()).compareTo(other.isSetTGetEmployeesRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTGetEmployeesRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tGetEmployeesRequest, other.tGetEmployeesRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmployees_args(");
      boolean first = true;

      sb.append("tGetEmployeesRequest:");
      if (this.tGetEmployeesRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tGetEmployeesRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tGetEmployeesRequest != null) {
        tGetEmployeesRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmployees_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmployees_argsStandardScheme getScheme() {
        return new getEmployees_argsStandardScheme();
      }
    }

    private static class getEmployees_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmployees_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmployees_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_GET_EMPLOYEES_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tGetEmployeesRequest = new TGetEmployeesRequest();
                struct.tGetEmployeesRequest.read(iprot);
                struct.setTGetEmployeesRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmployees_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tGetEmployeesRequest != null) {
          oprot.writeFieldBegin(T_GET_EMPLOYEES_REQUEST_FIELD_DESC);
          struct.tGetEmployeesRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmployees_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmployees_argsTupleScheme getScheme() {
        return new getEmployees_argsTupleScheme();
      }
    }

    private static class getEmployees_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmployees_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmployees_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTGetEmployeesRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTGetEmployeesRequest()) {
          struct.tGetEmployeesRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmployees_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tGetEmployeesRequest = new TGetEmployeesRequest();
          struct.tGetEmployeesRequest.read(iprot);
          struct.setTGetEmployeesRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getEmployees_result implements org.apache.thrift.TBase<getEmployees_result, getEmployees_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmployees_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmployees_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmployees_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmployees_resultTupleSchemeFactory();

    private TGetEmployeesResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetEmployeesResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmployees_result.class, metaDataMap);
    }

    public getEmployees_result() {
    }

    public getEmployees_result(
      TGetEmployeesResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmployees_result(getEmployees_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGetEmployeesResponse(other.success);
      }
    }

    public getEmployees_result deepCopy() {
      return new getEmployees_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TGetEmployeesResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TGetEmployeesResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGetEmployeesResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmployees_result)
        return this.equals((getEmployees_result)that);
      return false;
    }

    public boolean equals(getEmployees_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getEmployees_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmployees_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmployees_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmployees_resultStandardScheme getScheme() {
        return new getEmployees_resultStandardScheme();
      }
    }

    private static class getEmployees_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmployees_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmployees_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGetEmployeesResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmployees_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmployees_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getEmployees_resultTupleScheme getScheme() {
        return new getEmployees_resultTupleScheme();
      }
    }

    private static class getEmployees_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmployees_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmployees_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmployees_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TGetEmployeesResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isEmployeeAvailableNow_args implements org.apache.thrift.TBase<isEmployeeAvailableNow_args, isEmployeeAvailableNow_args._Fields>, java.io.Serializable, Cloneable, Comparable<isEmployeeAvailableNow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isEmployeeAvailableNow_args");

    private static final org.apache.thrift.protocol.TField USER_PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isEmployeeAvailableNow_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isEmployeeAvailableNow_argsTupleSchemeFactory();

    private long userProfileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_PROFILE_ID((short)1, "userProfileId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_PROFILE_ID
            return USER_PROFILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERPROFILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("userProfileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isEmployeeAvailableNow_args.class, metaDataMap);
    }

    public isEmployeeAvailableNow_args() {
    }

    public isEmployeeAvailableNow_args(
      long userProfileId)
    {
      this();
      this.userProfileId = userProfileId;
      setUserProfileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isEmployeeAvailableNow_args(isEmployeeAvailableNow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userProfileId = other.userProfileId;
    }

    public isEmployeeAvailableNow_args deepCopy() {
      return new isEmployeeAvailableNow_args(this);
    }

    @Override
    public void clear() {
      setUserProfileIdIsSet(false);
      this.userProfileId = 0;
    }

    public long getUserProfileId() {
      return this.userProfileId;
    }

    public void setUserProfileId(long userProfileId) {
      this.userProfileId = userProfileId;
      setUserProfileIdIsSet(true);
    }

    public void unsetUserProfileId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERPROFILEID_ISSET_ID);
    }

    /** Returns true if field userProfileId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserProfileId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERPROFILEID_ISSET_ID);
    }

    public void setUserProfileIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERPROFILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_PROFILE_ID:
        if (value == null) {
          unsetUserProfileId();
        } else {
          setUserProfileId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_PROFILE_ID:
        return getUserProfileId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_PROFILE_ID:
        return isSetUserProfileId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isEmployeeAvailableNow_args)
        return this.equals((isEmployeeAvailableNow_args)that);
      return false;
    }

    public boolean equals(isEmployeeAvailableNow_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userProfileId = true;
      boolean that_present_userProfileId = true;
      if (this_present_userProfileId || that_present_userProfileId) {
        if (!(this_present_userProfileId && that_present_userProfileId))
          return false;
        if (this.userProfileId != that.userProfileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userProfileId);

      return hashCode;
    }

    @Override
    public int compareTo(isEmployeeAvailableNow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserProfileId()).compareTo(other.isSetUserProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfileId, other.userProfileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isEmployeeAvailableNow_args(");
      boolean first = true;

      sb.append("userProfileId:");
      sb.append(this.userProfileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isEmployeeAvailableNow_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeAvailableNow_argsStandardScheme getScheme() {
        return new isEmployeeAvailableNow_argsStandardScheme();
      }
    }

    private static class isEmployeeAvailableNow_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isEmployeeAvailableNow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isEmployeeAvailableNow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userProfileId = iprot.readI64();
                struct.setUserProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isEmployeeAvailableNow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_PROFILE_ID_FIELD_DESC);
        oprot.writeI64(struct.userProfileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isEmployeeAvailableNow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeAvailableNow_argsTupleScheme getScheme() {
        return new isEmployeeAvailableNow_argsTupleScheme();
      }
    }

    private static class isEmployeeAvailableNow_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isEmployeeAvailableNow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isEmployeeAvailableNow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserProfileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserProfileId()) {
          oprot.writeI64(struct.userProfileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isEmployeeAvailableNow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userProfileId = iprot.readI64();
          struct.setUserProfileIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isEmployeeAvailableNow_result implements org.apache.thrift.TBase<isEmployeeAvailableNow_result, isEmployeeAvailableNow_result._Fields>, java.io.Serializable, Cloneable, Comparable<isEmployeeAvailableNow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isEmployeeAvailableNow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_INTERNAL_ERROR_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInternalErrorException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isEmployeeAvailableNow_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isEmployeeAvailableNow_resultTupleSchemeFactory();

    private TEmployeeResponse success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required
    private TInternalErrorException tInternalErrorException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException"),
      T_INTERNAL_ERROR_EXCEPTION((short)3, "tInternalErrorException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          case 3: // T_INTERNAL_ERROR_EXCEPTION
            return T_INTERNAL_ERROR_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeResponse.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      tmpMap.put(_Fields.T_INTERNAL_ERROR_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInternalErrorException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalErrorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isEmployeeAvailableNow_result.class, metaDataMap);
    }

    public isEmployeeAvailableNow_result() {
    }

    public isEmployeeAvailableNow_result(
      TEmployeeResponse success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException,
      TInternalErrorException tInternalErrorException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
      this.tInternalErrorException = tInternalErrorException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isEmployeeAvailableNow_result(isEmployeeAvailableNow_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEmployeeResponse(other.success);
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
      if (other.isSetTInternalErrorException()) {
        this.tInternalErrorException = new TInternalErrorException(other.tInternalErrorException);
      }
    }

    public isEmployeeAvailableNow_result deepCopy() {
      return new isEmployeeAvailableNow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
      this.tInternalErrorException = null;
    }

    public TEmployeeResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TEmployeeResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public TInternalErrorException getTInternalErrorException() {
      return this.tInternalErrorException;
    }

    public void setTInternalErrorException(TInternalErrorException tInternalErrorException) {
      this.tInternalErrorException = tInternalErrorException;
    }

    public void unsetTInternalErrorException() {
      this.tInternalErrorException = null;
    }

    /** Returns true if field tInternalErrorException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInternalErrorException() {
      return this.tInternalErrorException != null;
    }

    public void setTInternalErrorExceptionIsSet(boolean value) {
      if (!value) {
        this.tInternalErrorException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEmployeeResponse)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      case T_INTERNAL_ERROR_EXCEPTION:
        if (value == null) {
          unsetTInternalErrorException();
        } else {
          setTInternalErrorException((TInternalErrorException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      case T_INTERNAL_ERROR_EXCEPTION:
        return getTInternalErrorException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      case T_INTERNAL_ERROR_EXCEPTION:
        return isSetTInternalErrorException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isEmployeeAvailableNow_result)
        return this.equals((isEmployeeAvailableNow_result)that);
      return false;
    }

    public boolean equals(isEmployeeAvailableNow_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      boolean this_present_tInternalErrorException = true && this.isSetTInternalErrorException();
      boolean that_present_tInternalErrorException = true && that.isSetTInternalErrorException();
      if (this_present_tInternalErrorException || that_present_tInternalErrorException) {
        if (!(this_present_tInternalErrorException && that_present_tInternalErrorException))
          return false;
        if (!this.tInternalErrorException.equals(that.tInternalErrorException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInternalErrorException()) ? 131071 : 524287);
      if (isSetTInternalErrorException())
        hashCode = hashCode * 8191 + tInternalErrorException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isEmployeeAvailableNow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInternalErrorException()).compareTo(other.isSetTInternalErrorException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInternalErrorException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInternalErrorException, other.tInternalErrorException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isEmployeeAvailableNow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInternalErrorException:");
      if (this.tInternalErrorException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInternalErrorException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isEmployeeAvailableNow_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeAvailableNow_resultStandardScheme getScheme() {
        return new isEmployeeAvailableNow_resultStandardScheme();
      }
    }

    private static class isEmployeeAvailableNow_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isEmployeeAvailableNow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isEmployeeAvailableNow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEmployeeResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_INTERNAL_ERROR_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInternalErrorException = new TInternalErrorException();
                struct.tInternalErrorException.read(iprot);
                struct.setTInternalErrorExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isEmployeeAvailableNow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInternalErrorException != null) {
          oprot.writeFieldBegin(T_INTERNAL_ERROR_EXCEPTION_FIELD_DESC);
          struct.tInternalErrorException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isEmployeeAvailableNow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeAvailableNow_resultTupleScheme getScheme() {
        return new isEmployeeAvailableNow_resultTupleScheme();
      }
    }

    private static class isEmployeeAvailableNow_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isEmployeeAvailableNow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isEmployeeAvailableNow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        if (struct.isSetTInternalErrorException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
        if (struct.isSetTInternalErrorException()) {
          struct.tInternalErrorException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isEmployeeAvailableNow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TEmployeeResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tInternalErrorException = new TInternalErrorException();
          struct.tInternalErrorException.read(iprot);
          struct.setTInternalErrorExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isEmployeeAvailableInRange_args implements org.apache.thrift.TBase<isEmployeeAvailableInRange_args, isEmployeeAvailableInRange_args._Fields>, java.io.Serializable, Cloneable, Comparable<isEmployeeAvailableInRange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isEmployeeAvailableInRange_args");

    private static final org.apache.thrift.protocol.TField USER_PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isEmployeeAvailableInRange_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isEmployeeAvailableInRange_argsTupleSchemeFactory();

    private long userProfileId; // required
    private long startTime; // required
    private long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_PROFILE_ID((short)1, "userProfileId"),
      START_TIME((short)2, "startTime"),
      END_TIME((short)3, "endTime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_PROFILE_ID
            return USER_PROFILE_ID;
          case 2: // START_TIME
            return START_TIME;
          case 3: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERPROFILEID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("userProfileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isEmployeeAvailableInRange_args.class, metaDataMap);
    }

    public isEmployeeAvailableInRange_args() {
    }

    public isEmployeeAvailableInRange_args(
      long userProfileId,
      long startTime,
      long endTime)
    {
      this();
      this.userProfileId = userProfileId;
      setUserProfileIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isEmployeeAvailableInRange_args(isEmployeeAvailableInRange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userProfileId = other.userProfileId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public isEmployeeAvailableInRange_args deepCopy() {
      return new isEmployeeAvailableInRange_args(this);
    }

    @Override
    public void clear() {
      setUserProfileIdIsSet(false);
      this.userProfileId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public long getUserProfileId() {
      return this.userProfileId;
    }

    public void setUserProfileId(long userProfileId) {
      this.userProfileId = userProfileId;
      setUserProfileIdIsSet(true);
    }

    public void unsetUserProfileId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERPROFILEID_ISSET_ID);
    }

    /** Returns true if field userProfileId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserProfileId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERPROFILEID_ISSET_ID);
    }

    public void setUserProfileIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERPROFILEID_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public void setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
    }

    public void unsetStartTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public void setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    public void unsetEndTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_PROFILE_ID:
        if (value == null) {
          unsetUserProfileId();
        } else {
          setUserProfileId((java.lang.Long)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((java.lang.Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_PROFILE_ID:
        return getUserProfileId();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_PROFILE_ID:
        return isSetUserProfileId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isEmployeeAvailableInRange_args)
        return this.equals((isEmployeeAvailableInRange_args)that);
      return false;
    }

    public boolean equals(isEmployeeAvailableInRange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userProfileId = true;
      boolean that_present_userProfileId = true;
      if (this_present_userProfileId || that_present_userProfileId) {
        if (!(this_present_userProfileId && that_present_userProfileId))
          return false;
        if (this.userProfileId != that.userProfileId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userProfileId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTime);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endTime);

      return hashCode;
    }

    @Override
    public int compareTo(isEmployeeAvailableInRange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserProfileId()).compareTo(other.isSetUserProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfileId, other.userProfileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isEmployeeAvailableInRange_args(");
      boolean first = true;

      sb.append("userProfileId:");
      sb.append(this.userProfileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isEmployeeAvailableInRange_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeAvailableInRange_argsStandardScheme getScheme() {
        return new isEmployeeAvailableInRange_argsStandardScheme();
      }
    }

    private static class isEmployeeAvailableInRange_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isEmployeeAvailableInRange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isEmployeeAvailableInRange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userProfileId = iprot.readI64();
                struct.setUserProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isEmployeeAvailableInRange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_PROFILE_ID_FIELD_DESC);
        oprot.writeI64(struct.userProfileId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isEmployeeAvailableInRange_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeAvailableInRange_argsTupleScheme getScheme() {
        return new isEmployeeAvailableInRange_argsTupleScheme();
      }
    }

    private static class isEmployeeAvailableInRange_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isEmployeeAvailableInRange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isEmployeeAvailableInRange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserProfileId()) {
          optionals.set(0);
        }
        if (struct.isSetStartTime()) {
          optionals.set(1);
        }
        if (struct.isSetEndTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserProfileId()) {
          oprot.writeI64(struct.userProfileId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isEmployeeAvailableInRange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userProfileId = iprot.readI64();
          struct.setUserProfileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isEmployeeAvailableInRange_result implements org.apache.thrift.TBase<isEmployeeAvailableInRange_result, isEmployeeAvailableInRange_result._Fields>, java.io.Serializable, Cloneable, Comparable<isEmployeeAvailableInRange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isEmployeeAvailableInRange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidUserProfileIdException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_INTERNAL_ERROR_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tInternalErrorException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isEmployeeAvailableInRange_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isEmployeeAvailableInRange_resultTupleSchemeFactory();

    private TEmployeeResponse success; // required
    private TInvalidUserProfileIdException tInvalidUserProfileIdException; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required
    private TInternalErrorException tInternalErrorException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_INVALID_USER_PROFILE_ID_EXCEPTION((short)1, "tInvalidUserProfileIdException"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)2, "tEmployeeNotOnboardedException"),
      T_INTERNAL_ERROR_EXCEPTION((short)3, "tInternalErrorException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
            return T_INVALID_USER_PROFILE_ID_EXCEPTION;
          case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          case 3: // T_INTERNAL_ERROR_EXCEPTION
            return T_INTERNAL_ERROR_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeResponse.class)));
      tmpMap.put(_Fields.T_INVALID_USER_PROFILE_ID_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInvalidUserProfileIdException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidUserProfileIdException.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      tmpMap.put(_Fields.T_INTERNAL_ERROR_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tInternalErrorException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInternalErrorException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isEmployeeAvailableInRange_result.class, metaDataMap);
    }

    public isEmployeeAvailableInRange_result() {
    }

    public isEmployeeAvailableInRange_result(
      TEmployeeResponse success,
      TInvalidUserProfileIdException tInvalidUserProfileIdException,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException,
      TInternalErrorException tInternalErrorException)
    {
      this();
      this.success = success;
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
      this.tInternalErrorException = tInternalErrorException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isEmployeeAvailableInRange_result(isEmployeeAvailableInRange_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEmployeeResponse(other.success);
      }
      if (other.isSetTInvalidUserProfileIdException()) {
        this.tInvalidUserProfileIdException = new TInvalidUserProfileIdException(other.tInvalidUserProfileIdException);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
      if (other.isSetTInternalErrorException()) {
        this.tInternalErrorException = new TInternalErrorException(other.tInternalErrorException);
      }
    }

    public isEmployeeAvailableInRange_result deepCopy() {
      return new isEmployeeAvailableInRange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidUserProfileIdException = null;
      this.tEmployeeNotOnboardedException = null;
      this.tInternalErrorException = null;
    }

    public TEmployeeResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TEmployeeResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidUserProfileIdException getTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException;
    }

    public void setTInvalidUserProfileIdException(TInvalidUserProfileIdException tInvalidUserProfileIdException) {
      this.tInvalidUserProfileIdException = tInvalidUserProfileIdException;
    }

    public void unsetTInvalidUserProfileIdException() {
      this.tInvalidUserProfileIdException = null;
    }

    /** Returns true if field tInvalidUserProfileIdException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidUserProfileIdException() {
      return this.tInvalidUserProfileIdException != null;
    }

    public void setTInvalidUserProfileIdExceptionIsSet(boolean value) {
      if (!value) {
        this.tInvalidUserProfileIdException = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public TInternalErrorException getTInternalErrorException() {
      return this.tInternalErrorException;
    }

    public void setTInternalErrorException(TInternalErrorException tInternalErrorException) {
      this.tInternalErrorException = tInternalErrorException;
    }

    public void unsetTInternalErrorException() {
      this.tInternalErrorException = null;
    }

    /** Returns true if field tInternalErrorException is set (has been assigned a value) and false otherwise */
    public boolean isSetTInternalErrorException() {
      return this.tInternalErrorException != null;
    }

    public void setTInternalErrorExceptionIsSet(boolean value) {
      if (!value) {
        this.tInternalErrorException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEmployeeResponse)value);
        }
        break;

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        if (value == null) {
          unsetTInvalidUserProfileIdException();
        } else {
          setTInvalidUserProfileIdException((TInvalidUserProfileIdException)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      case T_INTERNAL_ERROR_EXCEPTION:
        if (value == null) {
          unsetTInternalErrorException();
        } else {
          setTInternalErrorException((TInternalErrorException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return getTInvalidUserProfileIdException();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      case T_INTERNAL_ERROR_EXCEPTION:
        return getTInternalErrorException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_USER_PROFILE_ID_EXCEPTION:
        return isSetTInvalidUserProfileIdException();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      case T_INTERNAL_ERROR_EXCEPTION:
        return isSetTInternalErrorException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isEmployeeAvailableInRange_result)
        return this.equals((isEmployeeAvailableInRange_result)that);
      return false;
    }

    public boolean equals(isEmployeeAvailableInRange_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidUserProfileIdException = true && this.isSetTInvalidUserProfileIdException();
      boolean that_present_tInvalidUserProfileIdException = true && that.isSetTInvalidUserProfileIdException();
      if (this_present_tInvalidUserProfileIdException || that_present_tInvalidUserProfileIdException) {
        if (!(this_present_tInvalidUserProfileIdException && that_present_tInvalidUserProfileIdException))
          return false;
        if (!this.tInvalidUserProfileIdException.equals(that.tInvalidUserProfileIdException))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      boolean this_present_tInternalErrorException = true && this.isSetTInternalErrorException();
      boolean that_present_tInternalErrorException = true && that.isSetTInternalErrorException();
      if (this_present_tInternalErrorException || that_present_tInternalErrorException) {
        if (!(this_present_tInternalErrorException && that_present_tInternalErrorException))
          return false;
        if (!this.tInternalErrorException.equals(that.tInternalErrorException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidUserProfileIdException()) ? 131071 : 524287);
      if (isSetTInvalidUserProfileIdException())
        hashCode = hashCode * 8191 + tInvalidUserProfileIdException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInternalErrorException()) ? 131071 : 524287);
      if (isSetTInternalErrorException())
        hashCode = hashCode * 8191 + tInternalErrorException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isEmployeeAvailableInRange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidUserProfileIdException()).compareTo(other.isSetTInvalidUserProfileIdException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidUserProfileIdException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidUserProfileIdException, other.tInvalidUserProfileIdException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInternalErrorException()).compareTo(other.isSetTInternalErrorException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInternalErrorException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInternalErrorException, other.tInternalErrorException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isEmployeeAvailableInRange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidUserProfileIdException:");
      if (this.tInvalidUserProfileIdException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidUserProfileIdException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInternalErrorException:");
      if (this.tInternalErrorException == null) {
        sb.append("null");
      } else {
        sb.append(this.tInternalErrorException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isEmployeeAvailableInRange_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeAvailableInRange_resultStandardScheme getScheme() {
        return new isEmployeeAvailableInRange_resultStandardScheme();
      }
    }

    private static class isEmployeeAvailableInRange_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isEmployeeAvailableInRange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isEmployeeAvailableInRange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEmployeeResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_USER_PROFILE_ID_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
                struct.tInvalidUserProfileIdException.read(iprot);
                struct.setTInvalidUserProfileIdExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_INTERNAL_ERROR_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInternalErrorException = new TInternalErrorException();
                struct.tInternalErrorException.read(iprot);
                struct.setTInternalErrorExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isEmployeeAvailableInRange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidUserProfileIdException != null) {
          oprot.writeFieldBegin(T_INVALID_USER_PROFILE_ID_EXCEPTION_FIELD_DESC);
          struct.tInvalidUserProfileIdException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tInternalErrorException != null) {
          oprot.writeFieldBegin(T_INTERNAL_ERROR_EXCEPTION_FIELD_DESC);
          struct.tInternalErrorException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isEmployeeAvailableInRange_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isEmployeeAvailableInRange_resultTupleScheme getScheme() {
        return new isEmployeeAvailableInRange_resultTupleScheme();
      }
    }

    private static class isEmployeeAvailableInRange_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isEmployeeAvailableInRange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isEmployeeAvailableInRange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          optionals.set(1);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(2);
        }
        if (struct.isSetTInternalErrorException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTInvalidUserProfileIdException()) {
          struct.tInvalidUserProfileIdException.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
        if (struct.isSetTInternalErrorException()) {
          struct.tInternalErrorException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isEmployeeAvailableInRange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new TEmployeeResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidUserProfileIdException = new TInvalidUserProfileIdException();
          struct.tInvalidUserProfileIdException.read(iprot);
          struct.setTInvalidUserProfileIdExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tInternalErrorException = new TInternalErrorException();
          struct.tInternalErrorException.read(iprot);
          struct.setTInternalErrorExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
