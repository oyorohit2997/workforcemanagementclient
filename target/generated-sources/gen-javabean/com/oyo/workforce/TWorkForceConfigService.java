/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.workforce;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-27")
public class TWorkForceConfigService {

  public interface Iface {

    public java.util.List<TWorkforceConfig> getAgents(java.lang.String entityId, TType entityType) throws TInvalidRequest, TDataBaseError, org.apache.thrift.TException;

    public boolean createConfig(TWorkforceConfig tWorkForceConfig) throws TInvalidRequest, TDataAlreadyExist, TDataBaseError, TEmployeeNotOnboardedException, org.apache.thrift.TException;

    public boolean updateConfig(TWorkforceConfig tWorkForceConfig) throws TInvalidRequest, TDataBaseError, TConfigNotFound, TConfigDeactivated, TEmployeeNotOnboardedException, org.apache.thrift.TException;

    public boolean deactivateConfig(TActDeactRequestData tActDeactRequestData) throws TInvalidRequest, TDataBaseError, TConfigNotFound, TEmployeeNotOnboardedException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAgents(java.lang.String entityId, TType entityType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TWorkforceConfig>> resultHandler) throws org.apache.thrift.TException;

    public void createConfig(TWorkforceConfig tWorkForceConfig, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void updateConfig(TWorkforceConfig tWorkForceConfig, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void deactivateConfig(TActDeactRequestData tActDeactRequestData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<TWorkforceConfig> getAgents(java.lang.String entityId, TType entityType) throws TInvalidRequest, TDataBaseError, org.apache.thrift.TException
    {
      send_getAgents(entityId, entityType);
      return recv_getAgents();
    }

    public void send_getAgents(java.lang.String entityId, TType entityType) throws org.apache.thrift.TException
    {
      getAgents_args args = new getAgents_args();
      args.setEntityId(entityId);
      args.setEntityType(entityType);
      sendBase("getAgents", args);
    }

    public java.util.List<TWorkforceConfig> recv_getAgents() throws TInvalidRequest, TDataBaseError, org.apache.thrift.TException
    {
      getAgents_result result = new getAgents_result();
      receiveBase(result, "getAgents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidRequest != null) {
        throw result.tInvalidRequest;
      }
      if (result.tDataBaseError != null) {
        throw result.tDataBaseError;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAgents failed: unknown result");
    }

    public boolean createConfig(TWorkforceConfig tWorkForceConfig) throws TInvalidRequest, TDataAlreadyExist, TDataBaseError, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      send_createConfig(tWorkForceConfig);
      return recv_createConfig();
    }

    public void send_createConfig(TWorkforceConfig tWorkForceConfig) throws org.apache.thrift.TException
    {
      createConfig_args args = new createConfig_args();
      args.setTWorkForceConfig(tWorkForceConfig);
      sendBase("createConfig", args);
    }

    public boolean recv_createConfig() throws TInvalidRequest, TDataAlreadyExist, TDataBaseError, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      createConfig_result result = new createConfig_result();
      receiveBase(result, "createConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidRequest != null) {
        throw result.tInvalidRequest;
      }
      if (result.tDataAlreadyExist != null) {
        throw result.tDataAlreadyExist;
      }
      if (result.tDataBaseError != null) {
        throw result.tDataBaseError;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createConfig failed: unknown result");
    }

    public boolean updateConfig(TWorkforceConfig tWorkForceConfig) throws TInvalidRequest, TDataBaseError, TConfigNotFound, TConfigDeactivated, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      send_updateConfig(tWorkForceConfig);
      return recv_updateConfig();
    }

    public void send_updateConfig(TWorkforceConfig tWorkForceConfig) throws org.apache.thrift.TException
    {
      updateConfig_args args = new updateConfig_args();
      args.setTWorkForceConfig(tWorkForceConfig);
      sendBase("updateConfig", args);
    }

    public boolean recv_updateConfig() throws TInvalidRequest, TDataBaseError, TConfigNotFound, TConfigDeactivated, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      updateConfig_result result = new updateConfig_result();
      receiveBase(result, "updateConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidRequest != null) {
        throw result.tInvalidRequest;
      }
      if (result.tDataBaseError != null) {
        throw result.tDataBaseError;
      }
      if (result.tConfigNotFoundError != null) {
        throw result.tConfigNotFoundError;
      }
      if (result.tConfigDeactivatedError != null) {
        throw result.tConfigDeactivatedError;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateConfig failed: unknown result");
    }

    public boolean deactivateConfig(TActDeactRequestData tActDeactRequestData) throws TInvalidRequest, TDataBaseError, TConfigNotFound, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      send_deactivateConfig(tActDeactRequestData);
      return recv_deactivateConfig();
    }

    public void send_deactivateConfig(TActDeactRequestData tActDeactRequestData) throws org.apache.thrift.TException
    {
      deactivateConfig_args args = new deactivateConfig_args();
      args.setTActDeactRequestData(tActDeactRequestData);
      sendBase("deactivateConfig", args);
    }

    public boolean recv_deactivateConfig() throws TInvalidRequest, TDataBaseError, TConfigNotFound, TEmployeeNotOnboardedException, org.apache.thrift.TException
    {
      deactivateConfig_result result = new deactivateConfig_result();
      receiveBase(result, "deactivateConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tInvalidRequest != null) {
        throw result.tInvalidRequest;
      }
      if (result.tDataBaseError != null) {
        throw result.tDataBaseError;
      }
      if (result.tConfigNotFoundError != null) {
        throw result.tConfigNotFoundError;
      }
      if (result.tEmployeeNotOnboardedException != null) {
        throw result.tEmployeeNotOnboardedException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deactivateConfig failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAgents(java.lang.String entityId, TType entityType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TWorkforceConfig>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAgents_call method_call = new getAgents_call(entityId, entityType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAgents_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TWorkforceConfig>> {
      private java.lang.String entityId;
      private TType entityType;
      public getAgents_call(java.lang.String entityId, TType entityType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TWorkforceConfig>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entityId = entityId;
        this.entityType = entityType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAgents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAgents_args args = new getAgents_args();
        args.setEntityId(entityId);
        args.setEntityType(entityType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TWorkforceConfig> getResult() throws TInvalidRequest, TDataBaseError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAgents();
      }
    }

    public void createConfig(TWorkforceConfig tWorkForceConfig, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createConfig_call method_call = new createConfig_call(tWorkForceConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createConfig_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private TWorkforceConfig tWorkForceConfig;
      public createConfig_call(TWorkforceConfig tWorkForceConfig, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tWorkForceConfig = tWorkForceConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createConfig_args args = new createConfig_args();
        args.setTWorkForceConfig(tWorkForceConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws TInvalidRequest, TDataAlreadyExist, TDataBaseError, TEmployeeNotOnboardedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createConfig();
      }
    }

    public void updateConfig(TWorkforceConfig tWorkForceConfig, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateConfig_call method_call = new updateConfig_call(tWorkForceConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateConfig_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private TWorkforceConfig tWorkForceConfig;
      public updateConfig_call(TWorkforceConfig tWorkForceConfig, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tWorkForceConfig = tWorkForceConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateConfig_args args = new updateConfig_args();
        args.setTWorkForceConfig(tWorkForceConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws TInvalidRequest, TDataBaseError, TConfigNotFound, TConfigDeactivated, TEmployeeNotOnboardedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateConfig();
      }
    }

    public void deactivateConfig(TActDeactRequestData tActDeactRequestData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deactivateConfig_call method_call = new deactivateConfig_call(tActDeactRequestData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deactivateConfig_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private TActDeactRequestData tActDeactRequestData;
      public deactivateConfig_call(TActDeactRequestData tActDeactRequestData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tActDeactRequestData = tActDeactRequestData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deactivateConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deactivateConfig_args args = new deactivateConfig_args();
        args.setTActDeactRequestData(tActDeactRequestData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws TInvalidRequest, TDataBaseError, TConfigNotFound, TEmployeeNotOnboardedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deactivateConfig();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAgents", new getAgents());
      processMap.put("createConfig", new createConfig());
      processMap.put("updateConfig", new updateConfig());
      processMap.put("deactivateConfig", new deactivateConfig());
      return processMap;
    }

    public static class getAgents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAgents_args> {
      public getAgents() {
        super("getAgents");
      }

      public getAgents_args getEmptyArgsInstance() {
        return new getAgents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAgents_result getResult(I iface, getAgents_args args) throws org.apache.thrift.TException {
        getAgents_result result = new getAgents_result();
        try {
          result.success = iface.getAgents(args.entityId, args.entityType);
        } catch (TInvalidRequest tInvalidRequest) {
          result.tInvalidRequest = tInvalidRequest;
        } catch (TDataBaseError tDataBaseError) {
          result.tDataBaseError = tDataBaseError;
        }
        return result;
      }
    }

    public static class createConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createConfig_args> {
      public createConfig() {
        super("createConfig");
      }

      public createConfig_args getEmptyArgsInstance() {
        return new createConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createConfig_result getResult(I iface, createConfig_args args) throws org.apache.thrift.TException {
        createConfig_result result = new createConfig_result();
        try {
          result.success = iface.createConfig(args.tWorkForceConfig);
          result.setSuccessIsSet(true);
        } catch (TInvalidRequest tInvalidRequest) {
          result.tInvalidRequest = tInvalidRequest;
        } catch (TDataAlreadyExist tDataAlreadyExist) {
          result.tDataAlreadyExist = tDataAlreadyExist;
        } catch (TDataBaseError tDataBaseError) {
          result.tDataBaseError = tDataBaseError;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        }
        return result;
      }
    }

    public static class updateConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateConfig_args> {
      public updateConfig() {
        super("updateConfig");
      }

      public updateConfig_args getEmptyArgsInstance() {
        return new updateConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateConfig_result getResult(I iface, updateConfig_args args) throws org.apache.thrift.TException {
        updateConfig_result result = new updateConfig_result();
        try {
          result.success = iface.updateConfig(args.tWorkForceConfig);
          result.setSuccessIsSet(true);
        } catch (TInvalidRequest tInvalidRequest) {
          result.tInvalidRequest = tInvalidRequest;
        } catch (TDataBaseError tDataBaseError) {
          result.tDataBaseError = tDataBaseError;
        } catch (TConfigNotFound tConfigNotFoundError) {
          result.tConfigNotFoundError = tConfigNotFoundError;
        } catch (TConfigDeactivated tConfigDeactivatedError) {
          result.tConfigDeactivatedError = tConfigDeactivatedError;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        }
        return result;
      }
    }

    public static class deactivateConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deactivateConfig_args> {
      public deactivateConfig() {
        super("deactivateConfig");
      }

      public deactivateConfig_args getEmptyArgsInstance() {
        return new deactivateConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deactivateConfig_result getResult(I iface, deactivateConfig_args args) throws org.apache.thrift.TException {
        deactivateConfig_result result = new deactivateConfig_result();
        try {
          result.success = iface.deactivateConfig(args.tActDeactRequestData);
          result.setSuccessIsSet(true);
        } catch (TInvalidRequest tInvalidRequest) {
          result.tInvalidRequest = tInvalidRequest;
        } catch (TDataBaseError tDataBaseError) {
          result.tDataBaseError = tDataBaseError;
        } catch (TConfigNotFound tConfigNotFoundError) {
          result.tConfigNotFoundError = tConfigNotFoundError;
        } catch (TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
          result.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAgents", new getAgents());
      processMap.put("createConfig", new createConfig());
      processMap.put("updateConfig", new updateConfig());
      processMap.put("deactivateConfig", new deactivateConfig());
      return processMap;
    }

    public static class getAgents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAgents_args, java.util.List<TWorkforceConfig>> {
      public getAgents() {
        super("getAgents");
      }

      public getAgents_args getEmptyArgsInstance() {
        return new getAgents_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TWorkforceConfig>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TWorkforceConfig>>() { 
          public void onComplete(java.util.List<TWorkforceConfig> o) {
            getAgents_result result = new getAgents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAgents_result result = new getAgents_result();
            if (e instanceof TInvalidRequest) {
              result.tInvalidRequest = (TInvalidRequest) e;
              result.setTInvalidRequestIsSet(true);
              msg = result;
            } else if (e instanceof TDataBaseError) {
              result.tDataBaseError = (TDataBaseError) e;
              result.setTDataBaseErrorIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAgents_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TWorkforceConfig>> resultHandler) throws org.apache.thrift.TException {
        iface.getAgents(args.entityId, args.entityType,resultHandler);
      }
    }

    public static class createConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createConfig_args, java.lang.Boolean> {
      public createConfig() {
        super("createConfig");
      }

      public createConfig_args getEmptyArgsInstance() {
        return new createConfig_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            createConfig_result result = new createConfig_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createConfig_result result = new createConfig_result();
            if (e instanceof TInvalidRequest) {
              result.tInvalidRequest = (TInvalidRequest) e;
              result.setTInvalidRequestIsSet(true);
              msg = result;
            } else if (e instanceof TDataAlreadyExist) {
              result.tDataAlreadyExist = (TDataAlreadyExist) e;
              result.setTDataAlreadyExistIsSet(true);
              msg = result;
            } else if (e instanceof TDataBaseError) {
              result.tDataBaseError = (TDataBaseError) e;
              result.setTDataBaseErrorIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createConfig_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.createConfig(args.tWorkForceConfig,resultHandler);
      }
    }

    public static class updateConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateConfig_args, java.lang.Boolean> {
      public updateConfig() {
        super("updateConfig");
      }

      public updateConfig_args getEmptyArgsInstance() {
        return new updateConfig_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateConfig_result result = new updateConfig_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateConfig_result result = new updateConfig_result();
            if (e instanceof TInvalidRequest) {
              result.tInvalidRequest = (TInvalidRequest) e;
              result.setTInvalidRequestIsSet(true);
              msg = result;
            } else if (e instanceof TDataBaseError) {
              result.tDataBaseError = (TDataBaseError) e;
              result.setTDataBaseErrorIsSet(true);
              msg = result;
            } else if (e instanceof TConfigNotFound) {
              result.tConfigNotFoundError = (TConfigNotFound) e;
              result.setTConfigNotFoundErrorIsSet(true);
              msg = result;
            } else if (e instanceof TConfigDeactivated) {
              result.tConfigDeactivatedError = (TConfigDeactivated) e;
              result.setTConfigDeactivatedErrorIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateConfig_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateConfig(args.tWorkForceConfig,resultHandler);
      }
    }

    public static class deactivateConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deactivateConfig_args, java.lang.Boolean> {
      public deactivateConfig() {
        super("deactivateConfig");
      }

      public deactivateConfig_args getEmptyArgsInstance() {
        return new deactivateConfig_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            deactivateConfig_result result = new deactivateConfig_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deactivateConfig_result result = new deactivateConfig_result();
            if (e instanceof TInvalidRequest) {
              result.tInvalidRequest = (TInvalidRequest) e;
              result.setTInvalidRequestIsSet(true);
              msg = result;
            } else if (e instanceof TDataBaseError) {
              result.tDataBaseError = (TDataBaseError) e;
              result.setTDataBaseErrorIsSet(true);
              msg = result;
            } else if (e instanceof TConfigNotFound) {
              result.tConfigNotFoundError = (TConfigNotFound) e;
              result.setTConfigNotFoundErrorIsSet(true);
              msg = result;
            } else if (e instanceof TEmployeeNotOnboardedException) {
              result.tEmployeeNotOnboardedException = (TEmployeeNotOnboardedException) e;
              result.setTEmployeeNotOnboardedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deactivateConfig_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.deactivateConfig(args.tActDeactRequestData,resultHandler);
      }
    }

  }

  public static class getAgents_args implements org.apache.thrift.TBase<getAgents_args, getAgents_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAgents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgents_args");

    private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("entityType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAgents_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAgents_argsTupleSchemeFactory();

    private java.lang.String entityId; // required
    private TType entityType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY_ID((short)1, "entityId"),
      /**
       * 
       * @see TType
       */
      ENTITY_TYPE((short)2, "entityType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_ID
            return ENTITY_ID;
          case 2: // ENTITY_TYPE
            return ENTITY_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "EntitiyID")));
      tmpMap.put(_Fields.ENTITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("entityType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgents_args.class, metaDataMap);
    }

    public getAgents_args() {
    }

    public getAgents_args(
      java.lang.String entityId,
      TType entityType)
    {
      this();
      this.entityId = entityId;
      this.entityType = entityType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgents_args(getAgents_args other) {
      if (other.isSetEntityId()) {
        this.entityId = other.entityId;
      }
      if (other.isSetEntityType()) {
        this.entityType = other.entityType;
      }
    }

    public getAgents_args deepCopy() {
      return new getAgents_args(this);
    }

    @Override
    public void clear() {
      this.entityId = null;
      this.entityType = null;
    }

    public java.lang.String getEntityId() {
      return this.entityId;
    }

    public void setEntityId(java.lang.String entityId) {
      this.entityId = entityId;
    }

    public void unsetEntityId() {
      this.entityId = null;
    }

    /** Returns true if field entityId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityId() {
      return this.entityId != null;
    }

    public void setEntityIdIsSet(boolean value) {
      if (!value) {
        this.entityId = null;
      }
    }

    /**
     * 
     * @see TType
     */
    public TType getEntityType() {
      return this.entityType;
    }

    /**
     * 
     * @see TType
     */
    public void setEntityType(TType entityType) {
      this.entityType = entityType;
    }

    public void unsetEntityType() {
      this.entityType = null;
    }

    /** Returns true if field entityType is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityType() {
      return this.entityType != null;
    }

    public void setEntityTypeIsSet(boolean value) {
      if (!value) {
        this.entityType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ENTITY_ID:
        if (value == null) {
          unsetEntityId();
        } else {
          setEntityId((java.lang.String)value);
        }
        break;

      case ENTITY_TYPE:
        if (value == null) {
          unsetEntityType();
        } else {
          setEntityType((TType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_ID:
        return getEntityId();

      case ENTITY_TYPE:
        return getEntityType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_ID:
        return isSetEntityId();
      case ENTITY_TYPE:
        return isSetEntityType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgents_args)
        return this.equals((getAgents_args)that);
      return false;
    }

    public boolean equals(getAgents_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_entityId = true && this.isSetEntityId();
      boolean that_present_entityId = true && that.isSetEntityId();
      if (this_present_entityId || that_present_entityId) {
        if (!(this_present_entityId && that_present_entityId))
          return false;
        if (!this.entityId.equals(that.entityId))
          return false;
      }

      boolean this_present_entityType = true && this.isSetEntityType();
      boolean that_present_entityType = true && that.isSetEntityType();
      if (this_present_entityType || that_present_entityType) {
        if (!(this_present_entityType && that_present_entityType))
          return false;
        if (!this.entityType.equals(that.entityType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEntityId()) ? 131071 : 524287);
      if (isSetEntityId())
        hashCode = hashCode * 8191 + entityId.hashCode();

      hashCode = hashCode * 8191 + ((isSetEntityType()) ? 131071 : 524287);
      if (isSetEntityType())
        hashCode = hashCode * 8191 + entityType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(getAgents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEntityId()).compareTo(other.isSetEntityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityId, other.entityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEntityType()).compareTo(other.isSetEntityType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityType, other.entityType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAgents_args(");
      boolean first = true;

      sb.append("entityId:");
      if (this.entityId == null) {
        sb.append("null");
      } else {
        sb.append(this.entityId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityType:");
      if (this.entityType == null) {
        sb.append("null");
      } else {
        sb.append(this.entityType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgents_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAgents_argsStandardScheme getScheme() {
        return new getAgents_argsStandardScheme();
      }
    }

    private static class getAgents_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAgents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entityId = iprot.readString();
                struct.setEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entityType = com.oyo.workforce.TType.findByValue(iprot.readI32());
                struct.setEntityTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entityId != null) {
          oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
          oprot.writeString(struct.entityId);
          oprot.writeFieldEnd();
        }
        if (struct.entityType != null) {
          oprot.writeFieldBegin(ENTITY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.entityType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgents_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAgents_argsTupleScheme getScheme() {
        return new getAgents_argsTupleScheme();
      }
    }

    private static class getAgents_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAgents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEntityId()) {
          optionals.set(0);
        }
        if (struct.isSetEntityType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEntityId()) {
          oprot.writeString(struct.entityId);
        }
        if (struct.isSetEntityType()) {
          oprot.writeI32(struct.entityType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.entityId = iprot.readString();
          struct.setEntityIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.entityType = com.oyo.workforce.TType.findByValue(iprot.readI32());
          struct.setEntityTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAgents_result implements org.apache.thrift.TBase<getAgents_result, getAgents_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAgents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_DATA_BASE_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("tDataBaseError", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAgents_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAgents_resultTupleSchemeFactory();

    private java.util.List<TWorkforceConfig> success; // required
    private TInvalidRequest tInvalidRequest; // required
    private TDataBaseError tDataBaseError; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_INVALID_REQUEST((short)1, "tInvalidRequest"),
      T_DATA_BASE_ERROR((short)2, "tDataBaseError");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_REQUEST
            return T_INVALID_REQUEST;
          case 2: // T_DATA_BASE_ERROR
            return T_DATA_BASE_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWorkforceConfig.class))));
      tmpMap.put(_Fields.T_INVALID_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tInvalidRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidRequest.class)));
      tmpMap.put(_Fields.T_DATA_BASE_ERROR, new org.apache.thrift.meta_data.FieldMetaData("tDataBaseError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataBaseError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgents_result.class, metaDataMap);
    }

    public getAgents_result() {
    }

    public getAgents_result(
      java.util.List<TWorkforceConfig> success,
      TInvalidRequest tInvalidRequest,
      TDataBaseError tDataBaseError)
    {
      this();
      this.success = success;
      this.tInvalidRequest = tInvalidRequest;
      this.tDataBaseError = tDataBaseError;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgents_result(getAgents_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TWorkforceConfig> __this__success = new java.util.ArrayList<TWorkforceConfig>(other.success.size());
        for (TWorkforceConfig other_element : other.success) {
          __this__success.add(new TWorkforceConfig(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetTInvalidRequest()) {
        this.tInvalidRequest = new TInvalidRequest(other.tInvalidRequest);
      }
      if (other.isSetTDataBaseError()) {
        this.tDataBaseError = new TDataBaseError(other.tDataBaseError);
      }
    }

    public getAgents_result deepCopy() {
      return new getAgents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tInvalidRequest = null;
      this.tDataBaseError = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TWorkforceConfig> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TWorkforceConfig elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TWorkforceConfig>();
      }
      this.success.add(elem);
    }

    public java.util.List<TWorkforceConfig> getSuccess() {
      return this.success;
    }

    public void setSuccess(java.util.List<TWorkforceConfig> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TInvalidRequest getTInvalidRequest() {
      return this.tInvalidRequest;
    }

    public void setTInvalidRequest(TInvalidRequest tInvalidRequest) {
      this.tInvalidRequest = tInvalidRequest;
    }

    public void unsetTInvalidRequest() {
      this.tInvalidRequest = null;
    }

    /** Returns true if field tInvalidRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidRequest() {
      return this.tInvalidRequest != null;
    }

    public void setTInvalidRequestIsSet(boolean value) {
      if (!value) {
        this.tInvalidRequest = null;
      }
    }

    public TDataBaseError getTDataBaseError() {
      return this.tDataBaseError;
    }

    public void setTDataBaseError(TDataBaseError tDataBaseError) {
      this.tDataBaseError = tDataBaseError;
    }

    public void unsetTDataBaseError() {
      this.tDataBaseError = null;
    }

    /** Returns true if field tDataBaseError is set (has been assigned a value) and false otherwise */
    public boolean isSetTDataBaseError() {
      return this.tDataBaseError != null;
    }

    public void setTDataBaseErrorIsSet(boolean value) {
      if (!value) {
        this.tDataBaseError = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TWorkforceConfig>)value);
        }
        break;

      case T_INVALID_REQUEST:
        if (value == null) {
          unsetTInvalidRequest();
        } else {
          setTInvalidRequest((TInvalidRequest)value);
        }
        break;

      case T_DATA_BASE_ERROR:
        if (value == null) {
          unsetTDataBaseError();
        } else {
          setTDataBaseError((TDataBaseError)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case T_INVALID_REQUEST:
        return getTInvalidRequest();

      case T_DATA_BASE_ERROR:
        return getTDataBaseError();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_REQUEST:
        return isSetTInvalidRequest();
      case T_DATA_BASE_ERROR:
        return isSetTDataBaseError();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgents_result)
        return this.equals((getAgents_result)that);
      return false;
    }

    public boolean equals(getAgents_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tInvalidRequest = true && this.isSetTInvalidRequest();
      boolean that_present_tInvalidRequest = true && that.isSetTInvalidRequest();
      if (this_present_tInvalidRequest || that_present_tInvalidRequest) {
        if (!(this_present_tInvalidRequest && that_present_tInvalidRequest))
          return false;
        if (!this.tInvalidRequest.equals(that.tInvalidRequest))
          return false;
      }

      boolean this_present_tDataBaseError = true && this.isSetTDataBaseError();
      boolean that_present_tDataBaseError = true && that.isSetTDataBaseError();
      if (this_present_tDataBaseError || that_present_tDataBaseError) {
        if (!(this_present_tDataBaseError && that_present_tDataBaseError))
          return false;
        if (!this.tDataBaseError.equals(that.tDataBaseError))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetTInvalidRequest()) ? 131071 : 524287);
      if (isSetTInvalidRequest())
        hashCode = hashCode * 8191 + tInvalidRequest.hashCode();

      hashCode = hashCode * 8191 + ((isSetTDataBaseError()) ? 131071 : 524287);
      if (isSetTDataBaseError())
        hashCode = hashCode * 8191 + tDataBaseError.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAgents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidRequest()).compareTo(other.isSetTInvalidRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidRequest, other.tInvalidRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTDataBaseError()).compareTo(other.isSetTDataBaseError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTDataBaseError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tDataBaseError, other.tDataBaseError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAgents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidRequest:");
      if (this.tInvalidRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidRequest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tDataBaseError:");
      if (this.tDataBaseError == null) {
        sb.append("null");
      } else {
        sb.append(this.tDataBaseError);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgents_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAgents_resultStandardScheme getScheme() {
        return new getAgents_resultStandardScheme();
      }
    }

    private static class getAgents_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAgents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TWorkforceConfig>(_list8.size);
                  TWorkforceConfig _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new TWorkforceConfig();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidRequest = new TInvalidRequest();
                struct.tInvalidRequest.read(iprot);
                struct.setTInvalidRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_DATA_BASE_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tDataBaseError = new TDataBaseError();
                struct.tDataBaseError.read(iprot);
                struct.setTDataBaseErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TWorkforceConfig _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidRequest != null) {
          oprot.writeFieldBegin(T_INVALID_REQUEST_FIELD_DESC);
          struct.tInvalidRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tDataBaseError != null) {
          oprot.writeFieldBegin(T_DATA_BASE_ERROR_FIELD_DESC);
          struct.tDataBaseError.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgents_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAgents_resultTupleScheme getScheme() {
        return new getAgents_resultTupleScheme();
      }
    }

    private static class getAgents_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAgents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidRequest()) {
          optionals.set(1);
        }
        if (struct.isSetTDataBaseError()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TWorkforceConfig _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetTInvalidRequest()) {
          struct.tInvalidRequest.write(oprot);
        }
        if (struct.isSetTDataBaseError()) {
          struct.tDataBaseError.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TWorkforceConfig>(_list13.size);
            TWorkforceConfig _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new TWorkforceConfig();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidRequest = new TInvalidRequest();
          struct.tInvalidRequest.read(iprot);
          struct.setTInvalidRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tDataBaseError = new TDataBaseError();
          struct.tDataBaseError.read(iprot);
          struct.setTDataBaseErrorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createConfig_args implements org.apache.thrift.TBase<createConfig_args, createConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<createConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createConfig_args");

    private static final org.apache.thrift.protocol.TField T_WORK_FORCE_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("tWorkForceConfig", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createConfig_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createConfig_argsTupleSchemeFactory();

    private TWorkforceConfig tWorkForceConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_WORK_FORCE_CONFIG((short)1, "tWorkForceConfig");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_WORK_FORCE_CONFIG
            return T_WORK_FORCE_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_WORK_FORCE_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("tWorkForceConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWorkforceConfig.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createConfig_args.class, metaDataMap);
    }

    public createConfig_args() {
    }

    public createConfig_args(
      TWorkforceConfig tWorkForceConfig)
    {
      this();
      this.tWorkForceConfig = tWorkForceConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createConfig_args(createConfig_args other) {
      if (other.isSetTWorkForceConfig()) {
        this.tWorkForceConfig = new TWorkforceConfig(other.tWorkForceConfig);
      }
    }

    public createConfig_args deepCopy() {
      return new createConfig_args(this);
    }

    @Override
    public void clear() {
      this.tWorkForceConfig = null;
    }

    public TWorkforceConfig getTWorkForceConfig() {
      return this.tWorkForceConfig;
    }

    public void setTWorkForceConfig(TWorkforceConfig tWorkForceConfig) {
      this.tWorkForceConfig = tWorkForceConfig;
    }

    public void unsetTWorkForceConfig() {
      this.tWorkForceConfig = null;
    }

    /** Returns true if field tWorkForceConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetTWorkForceConfig() {
      return this.tWorkForceConfig != null;
    }

    public void setTWorkForceConfigIsSet(boolean value) {
      if (!value) {
        this.tWorkForceConfig = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_WORK_FORCE_CONFIG:
        if (value == null) {
          unsetTWorkForceConfig();
        } else {
          setTWorkForceConfig((TWorkforceConfig)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_WORK_FORCE_CONFIG:
        return getTWorkForceConfig();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_WORK_FORCE_CONFIG:
        return isSetTWorkForceConfig();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createConfig_args)
        return this.equals((createConfig_args)that);
      return false;
    }

    public boolean equals(createConfig_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tWorkForceConfig = true && this.isSetTWorkForceConfig();
      boolean that_present_tWorkForceConfig = true && that.isSetTWorkForceConfig();
      if (this_present_tWorkForceConfig || that_present_tWorkForceConfig) {
        if (!(this_present_tWorkForceConfig && that_present_tWorkForceConfig))
          return false;
        if (!this.tWorkForceConfig.equals(that.tWorkForceConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTWorkForceConfig()) ? 131071 : 524287);
      if (isSetTWorkForceConfig())
        hashCode = hashCode * 8191 + tWorkForceConfig.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTWorkForceConfig()).compareTo(other.isSetTWorkForceConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTWorkForceConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tWorkForceConfig, other.tWorkForceConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createConfig_args(");
      boolean first = true;

      sb.append("tWorkForceConfig:");
      if (this.tWorkForceConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.tWorkForceConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tWorkForceConfig != null) {
        tWorkForceConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createConfig_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createConfig_argsStandardScheme getScheme() {
        return new createConfig_argsStandardScheme();
      }
    }

    private static class createConfig_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_WORK_FORCE_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tWorkForceConfig = new TWorkforceConfig();
                struct.tWorkForceConfig.read(iprot);
                struct.setTWorkForceConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tWorkForceConfig != null) {
          oprot.writeFieldBegin(T_WORK_FORCE_CONFIG_FIELD_DESC);
          struct.tWorkForceConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createConfig_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createConfig_argsTupleScheme getScheme() {
        return new createConfig_argsTupleScheme();
      }
    }

    private static class createConfig_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTWorkForceConfig()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTWorkForceConfig()) {
          struct.tWorkForceConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tWorkForceConfig = new TWorkforceConfig();
          struct.tWorkForceConfig.read(iprot);
          struct.setTWorkForceConfigIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createConfig_result implements org.apache.thrift.TBase<createConfig_result, createConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<createConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_DATA_ALREADY_EXIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tDataAlreadyExist", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_DATA_BASE_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("tDataBaseError", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createConfig_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createConfig_resultTupleSchemeFactory();

    private boolean success; // required
    private TInvalidRequest tInvalidRequest; // required
    private TDataAlreadyExist tDataAlreadyExist; // required
    private TDataBaseError tDataBaseError; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_INVALID_REQUEST((short)1, "tInvalidRequest"),
      T_DATA_ALREADY_EXIST((short)2, "tDataAlreadyExist"),
      T_DATA_BASE_ERROR((short)3, "tDataBaseError"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)4, "tEmployeeNotOnboardedException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_REQUEST
            return T_INVALID_REQUEST;
          case 2: // T_DATA_ALREADY_EXIST
            return T_DATA_ALREADY_EXIST;
          case 3: // T_DATA_BASE_ERROR
            return T_DATA_BASE_ERROR;
          case 4: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL          , "Success")));
      tmpMap.put(_Fields.T_INVALID_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tInvalidRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidRequest.class)));
      tmpMap.put(_Fields.T_DATA_ALREADY_EXIST, new org.apache.thrift.meta_data.FieldMetaData("tDataAlreadyExist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataAlreadyExist.class)));
      tmpMap.put(_Fields.T_DATA_BASE_ERROR, new org.apache.thrift.meta_data.FieldMetaData("tDataBaseError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataBaseError.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createConfig_result.class, metaDataMap);
    }

    public createConfig_result() {
    }

    public createConfig_result(
      boolean success,
      TInvalidRequest tInvalidRequest,
      TDataAlreadyExist tDataAlreadyExist,
      TDataBaseError tDataBaseError,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.tInvalidRequest = tInvalidRequest;
      this.tDataAlreadyExist = tDataAlreadyExist;
      this.tDataBaseError = tDataBaseError;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createConfig_result(createConfig_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetTInvalidRequest()) {
        this.tInvalidRequest = new TInvalidRequest(other.tInvalidRequest);
      }
      if (other.isSetTDataAlreadyExist()) {
        this.tDataAlreadyExist = new TDataAlreadyExist(other.tDataAlreadyExist);
      }
      if (other.isSetTDataBaseError()) {
        this.tDataBaseError = new TDataBaseError(other.tDataBaseError);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
    }

    public createConfig_result deepCopy() {
      return new createConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.tInvalidRequest = null;
      this.tDataAlreadyExist = null;
      this.tDataBaseError = null;
      this.tEmployeeNotOnboardedException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TInvalidRequest getTInvalidRequest() {
      return this.tInvalidRequest;
    }

    public void setTInvalidRequest(TInvalidRequest tInvalidRequest) {
      this.tInvalidRequest = tInvalidRequest;
    }

    public void unsetTInvalidRequest() {
      this.tInvalidRequest = null;
    }

    /** Returns true if field tInvalidRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidRequest() {
      return this.tInvalidRequest != null;
    }

    public void setTInvalidRequestIsSet(boolean value) {
      if (!value) {
        this.tInvalidRequest = null;
      }
    }

    public TDataAlreadyExist getTDataAlreadyExist() {
      return this.tDataAlreadyExist;
    }

    public void setTDataAlreadyExist(TDataAlreadyExist tDataAlreadyExist) {
      this.tDataAlreadyExist = tDataAlreadyExist;
    }

    public void unsetTDataAlreadyExist() {
      this.tDataAlreadyExist = null;
    }

    /** Returns true if field tDataAlreadyExist is set (has been assigned a value) and false otherwise */
    public boolean isSetTDataAlreadyExist() {
      return this.tDataAlreadyExist != null;
    }

    public void setTDataAlreadyExistIsSet(boolean value) {
      if (!value) {
        this.tDataAlreadyExist = null;
      }
    }

    public TDataBaseError getTDataBaseError() {
      return this.tDataBaseError;
    }

    public void setTDataBaseError(TDataBaseError tDataBaseError) {
      this.tDataBaseError = tDataBaseError;
    }

    public void unsetTDataBaseError() {
      this.tDataBaseError = null;
    }

    /** Returns true if field tDataBaseError is set (has been assigned a value) and false otherwise */
    public boolean isSetTDataBaseError() {
      return this.tDataBaseError != null;
    }

    public void setTDataBaseErrorIsSet(boolean value) {
      if (!value) {
        this.tDataBaseError = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case T_INVALID_REQUEST:
        if (value == null) {
          unsetTInvalidRequest();
        } else {
          setTInvalidRequest((TInvalidRequest)value);
        }
        break;

      case T_DATA_ALREADY_EXIST:
        if (value == null) {
          unsetTDataAlreadyExist();
        } else {
          setTDataAlreadyExist((TDataAlreadyExist)value);
        }
        break;

      case T_DATA_BASE_ERROR:
        if (value == null) {
          unsetTDataBaseError();
        } else {
          setTDataBaseError((TDataBaseError)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case T_INVALID_REQUEST:
        return getTInvalidRequest();

      case T_DATA_ALREADY_EXIST:
        return getTDataAlreadyExist();

      case T_DATA_BASE_ERROR:
        return getTDataBaseError();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_REQUEST:
        return isSetTInvalidRequest();
      case T_DATA_ALREADY_EXIST:
        return isSetTDataAlreadyExist();
      case T_DATA_BASE_ERROR:
        return isSetTDataBaseError();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createConfig_result)
        return this.equals((createConfig_result)that);
      return false;
    }

    public boolean equals(createConfig_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_tInvalidRequest = true && this.isSetTInvalidRequest();
      boolean that_present_tInvalidRequest = true && that.isSetTInvalidRequest();
      if (this_present_tInvalidRequest || that_present_tInvalidRequest) {
        if (!(this_present_tInvalidRequest && that_present_tInvalidRequest))
          return false;
        if (!this.tInvalidRequest.equals(that.tInvalidRequest))
          return false;
      }

      boolean this_present_tDataAlreadyExist = true && this.isSetTDataAlreadyExist();
      boolean that_present_tDataAlreadyExist = true && that.isSetTDataAlreadyExist();
      if (this_present_tDataAlreadyExist || that_present_tDataAlreadyExist) {
        if (!(this_present_tDataAlreadyExist && that_present_tDataAlreadyExist))
          return false;
        if (!this.tDataAlreadyExist.equals(that.tDataAlreadyExist))
          return false;
      }

      boolean this_present_tDataBaseError = true && this.isSetTDataBaseError();
      boolean that_present_tDataBaseError = true && that.isSetTDataBaseError();
      if (this_present_tDataBaseError || that_present_tDataBaseError) {
        if (!(this_present_tDataBaseError && that_present_tDataBaseError))
          return false;
        if (!this.tDataBaseError.equals(that.tDataBaseError))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetTInvalidRequest()) ? 131071 : 524287);
      if (isSetTInvalidRequest())
        hashCode = hashCode * 8191 + tInvalidRequest.hashCode();

      hashCode = hashCode * 8191 + ((isSetTDataAlreadyExist()) ? 131071 : 524287);
      if (isSetTDataAlreadyExist())
        hashCode = hashCode * 8191 + tDataAlreadyExist.hashCode();

      hashCode = hashCode * 8191 + ((isSetTDataBaseError()) ? 131071 : 524287);
      if (isSetTDataBaseError())
        hashCode = hashCode * 8191 + tDataBaseError.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidRequest()).compareTo(other.isSetTInvalidRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidRequest, other.tInvalidRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTDataAlreadyExist()).compareTo(other.isSetTDataAlreadyExist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTDataAlreadyExist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tDataAlreadyExist, other.tDataAlreadyExist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTDataBaseError()).compareTo(other.isSetTDataBaseError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTDataBaseError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tDataBaseError, other.tDataBaseError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidRequest:");
      if (this.tInvalidRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidRequest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tDataAlreadyExist:");
      if (this.tDataAlreadyExist == null) {
        sb.append("null");
      } else {
        sb.append(this.tDataAlreadyExist);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tDataBaseError:");
      if (this.tDataBaseError == null) {
        sb.append("null");
      } else {
        sb.append(this.tDataBaseError);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createConfig_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createConfig_resultStandardScheme getScheme() {
        return new createConfig_resultStandardScheme();
      }
    }

    private static class createConfig_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidRequest = new TInvalidRequest();
                struct.tInvalidRequest.read(iprot);
                struct.setTInvalidRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_DATA_ALREADY_EXIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tDataAlreadyExist = new TDataAlreadyExist();
                struct.tDataAlreadyExist.read(iprot);
                struct.setTDataAlreadyExistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_DATA_BASE_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tDataBaseError = new TDataBaseError();
                struct.tDataBaseError.read(iprot);
                struct.setTDataBaseErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidRequest != null) {
          oprot.writeFieldBegin(T_INVALID_REQUEST_FIELD_DESC);
          struct.tInvalidRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tDataAlreadyExist != null) {
          oprot.writeFieldBegin(T_DATA_ALREADY_EXIST_FIELD_DESC);
          struct.tDataAlreadyExist.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tDataBaseError != null) {
          oprot.writeFieldBegin(T_DATA_BASE_ERROR_FIELD_DESC);
          struct.tDataBaseError.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createConfig_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createConfig_resultTupleScheme getScheme() {
        return new createConfig_resultTupleScheme();
      }
    }

    private static class createConfig_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidRequest()) {
          optionals.set(1);
        }
        if (struct.isSetTDataAlreadyExist()) {
          optionals.set(2);
        }
        if (struct.isSetTDataBaseError()) {
          optionals.set(3);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetTInvalidRequest()) {
          struct.tInvalidRequest.write(oprot);
        }
        if (struct.isSetTDataAlreadyExist()) {
          struct.tDataAlreadyExist.write(oprot);
        }
        if (struct.isSetTDataBaseError()) {
          struct.tDataBaseError.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidRequest = new TInvalidRequest();
          struct.tInvalidRequest.read(iprot);
          struct.setTInvalidRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tDataAlreadyExist = new TDataAlreadyExist();
          struct.tDataAlreadyExist.read(iprot);
          struct.setTDataAlreadyExistIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tDataBaseError = new TDataBaseError();
          struct.tDataBaseError.read(iprot);
          struct.setTDataBaseErrorIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateConfig_args implements org.apache.thrift.TBase<updateConfig_args, updateConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateConfig_args");

    private static final org.apache.thrift.protocol.TField T_WORK_FORCE_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("tWorkForceConfig", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateConfig_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateConfig_argsTupleSchemeFactory();

    private TWorkforceConfig tWorkForceConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_WORK_FORCE_CONFIG((short)1, "tWorkForceConfig");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_WORK_FORCE_CONFIG
            return T_WORK_FORCE_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_WORK_FORCE_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("tWorkForceConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWorkforceConfig.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateConfig_args.class, metaDataMap);
    }

    public updateConfig_args() {
    }

    public updateConfig_args(
      TWorkforceConfig tWorkForceConfig)
    {
      this();
      this.tWorkForceConfig = tWorkForceConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateConfig_args(updateConfig_args other) {
      if (other.isSetTWorkForceConfig()) {
        this.tWorkForceConfig = new TWorkforceConfig(other.tWorkForceConfig);
      }
    }

    public updateConfig_args deepCopy() {
      return new updateConfig_args(this);
    }

    @Override
    public void clear() {
      this.tWorkForceConfig = null;
    }

    public TWorkforceConfig getTWorkForceConfig() {
      return this.tWorkForceConfig;
    }

    public void setTWorkForceConfig(TWorkforceConfig tWorkForceConfig) {
      this.tWorkForceConfig = tWorkForceConfig;
    }

    public void unsetTWorkForceConfig() {
      this.tWorkForceConfig = null;
    }

    /** Returns true if field tWorkForceConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetTWorkForceConfig() {
      return this.tWorkForceConfig != null;
    }

    public void setTWorkForceConfigIsSet(boolean value) {
      if (!value) {
        this.tWorkForceConfig = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_WORK_FORCE_CONFIG:
        if (value == null) {
          unsetTWorkForceConfig();
        } else {
          setTWorkForceConfig((TWorkforceConfig)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_WORK_FORCE_CONFIG:
        return getTWorkForceConfig();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_WORK_FORCE_CONFIG:
        return isSetTWorkForceConfig();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateConfig_args)
        return this.equals((updateConfig_args)that);
      return false;
    }

    public boolean equals(updateConfig_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tWorkForceConfig = true && this.isSetTWorkForceConfig();
      boolean that_present_tWorkForceConfig = true && that.isSetTWorkForceConfig();
      if (this_present_tWorkForceConfig || that_present_tWorkForceConfig) {
        if (!(this_present_tWorkForceConfig && that_present_tWorkForceConfig))
          return false;
        if (!this.tWorkForceConfig.equals(that.tWorkForceConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTWorkForceConfig()) ? 131071 : 524287);
      if (isSetTWorkForceConfig())
        hashCode = hashCode * 8191 + tWorkForceConfig.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTWorkForceConfig()).compareTo(other.isSetTWorkForceConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTWorkForceConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tWorkForceConfig, other.tWorkForceConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateConfig_args(");
      boolean first = true;

      sb.append("tWorkForceConfig:");
      if (this.tWorkForceConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.tWorkForceConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tWorkForceConfig != null) {
        tWorkForceConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateConfig_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateConfig_argsStandardScheme getScheme() {
        return new updateConfig_argsStandardScheme();
      }
    }

    private static class updateConfig_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_WORK_FORCE_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tWorkForceConfig = new TWorkforceConfig();
                struct.tWorkForceConfig.read(iprot);
                struct.setTWorkForceConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tWorkForceConfig != null) {
          oprot.writeFieldBegin(T_WORK_FORCE_CONFIG_FIELD_DESC);
          struct.tWorkForceConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateConfig_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateConfig_argsTupleScheme getScheme() {
        return new updateConfig_argsTupleScheme();
      }
    }

    private static class updateConfig_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTWorkForceConfig()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTWorkForceConfig()) {
          struct.tWorkForceConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tWorkForceConfig = new TWorkforceConfig();
          struct.tWorkForceConfig.read(iprot);
          struct.setTWorkForceConfigIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateConfig_result implements org.apache.thrift.TBase<updateConfig_result, updateConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_DATA_BASE_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("tDataBaseError", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_CONFIG_NOT_FOUND_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("tConfigNotFoundError", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField T_CONFIG_DEACTIVATED_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("tConfigDeactivatedError", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateConfig_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateConfig_resultTupleSchemeFactory();

    private boolean success; // required
    private TInvalidRequest tInvalidRequest; // required
    private TDataBaseError tDataBaseError; // required
    private TConfigNotFound tConfigNotFoundError; // required
    private TConfigDeactivated tConfigDeactivatedError; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_INVALID_REQUEST((short)1, "tInvalidRequest"),
      T_DATA_BASE_ERROR((short)2, "tDataBaseError"),
      T_CONFIG_NOT_FOUND_ERROR((short)3, "tConfigNotFoundError"),
      T_CONFIG_DEACTIVATED_ERROR((short)4, "tConfigDeactivatedError"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)5, "tEmployeeNotOnboardedException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_REQUEST
            return T_INVALID_REQUEST;
          case 2: // T_DATA_BASE_ERROR
            return T_DATA_BASE_ERROR;
          case 3: // T_CONFIG_NOT_FOUND_ERROR
            return T_CONFIG_NOT_FOUND_ERROR;
          case 4: // T_CONFIG_DEACTIVATED_ERROR
            return T_CONFIG_DEACTIVATED_ERROR;
          case 5: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL          , "Success")));
      tmpMap.put(_Fields.T_INVALID_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tInvalidRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidRequest.class)));
      tmpMap.put(_Fields.T_DATA_BASE_ERROR, new org.apache.thrift.meta_data.FieldMetaData("tDataBaseError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataBaseError.class)));
      tmpMap.put(_Fields.T_CONFIG_NOT_FOUND_ERROR, new org.apache.thrift.meta_data.FieldMetaData("tConfigNotFoundError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TConfigNotFound.class)));
      tmpMap.put(_Fields.T_CONFIG_DEACTIVATED_ERROR, new org.apache.thrift.meta_data.FieldMetaData("tConfigDeactivatedError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TConfigDeactivated.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateConfig_result.class, metaDataMap);
    }

    public updateConfig_result() {
    }

    public updateConfig_result(
      boolean success,
      TInvalidRequest tInvalidRequest,
      TDataBaseError tDataBaseError,
      TConfigNotFound tConfigNotFoundError,
      TConfigDeactivated tConfigDeactivatedError,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.tInvalidRequest = tInvalidRequest;
      this.tDataBaseError = tDataBaseError;
      this.tConfigNotFoundError = tConfigNotFoundError;
      this.tConfigDeactivatedError = tConfigDeactivatedError;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateConfig_result(updateConfig_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetTInvalidRequest()) {
        this.tInvalidRequest = new TInvalidRequest(other.tInvalidRequest);
      }
      if (other.isSetTDataBaseError()) {
        this.tDataBaseError = new TDataBaseError(other.tDataBaseError);
      }
      if (other.isSetTConfigNotFoundError()) {
        this.tConfigNotFoundError = new TConfigNotFound(other.tConfigNotFoundError);
      }
      if (other.isSetTConfigDeactivatedError()) {
        this.tConfigDeactivatedError = new TConfigDeactivated(other.tConfigDeactivatedError);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
    }

    public updateConfig_result deepCopy() {
      return new updateConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.tInvalidRequest = null;
      this.tDataBaseError = null;
      this.tConfigNotFoundError = null;
      this.tConfigDeactivatedError = null;
      this.tEmployeeNotOnboardedException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TInvalidRequest getTInvalidRequest() {
      return this.tInvalidRequest;
    }

    public void setTInvalidRequest(TInvalidRequest tInvalidRequest) {
      this.tInvalidRequest = tInvalidRequest;
    }

    public void unsetTInvalidRequest() {
      this.tInvalidRequest = null;
    }

    /** Returns true if field tInvalidRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidRequest() {
      return this.tInvalidRequest != null;
    }

    public void setTInvalidRequestIsSet(boolean value) {
      if (!value) {
        this.tInvalidRequest = null;
      }
    }

    public TDataBaseError getTDataBaseError() {
      return this.tDataBaseError;
    }

    public void setTDataBaseError(TDataBaseError tDataBaseError) {
      this.tDataBaseError = tDataBaseError;
    }

    public void unsetTDataBaseError() {
      this.tDataBaseError = null;
    }

    /** Returns true if field tDataBaseError is set (has been assigned a value) and false otherwise */
    public boolean isSetTDataBaseError() {
      return this.tDataBaseError != null;
    }

    public void setTDataBaseErrorIsSet(boolean value) {
      if (!value) {
        this.tDataBaseError = null;
      }
    }

    public TConfigNotFound getTConfigNotFoundError() {
      return this.tConfigNotFoundError;
    }

    public void setTConfigNotFoundError(TConfigNotFound tConfigNotFoundError) {
      this.tConfigNotFoundError = tConfigNotFoundError;
    }

    public void unsetTConfigNotFoundError() {
      this.tConfigNotFoundError = null;
    }

    /** Returns true if field tConfigNotFoundError is set (has been assigned a value) and false otherwise */
    public boolean isSetTConfigNotFoundError() {
      return this.tConfigNotFoundError != null;
    }

    public void setTConfigNotFoundErrorIsSet(boolean value) {
      if (!value) {
        this.tConfigNotFoundError = null;
      }
    }

    public TConfigDeactivated getTConfigDeactivatedError() {
      return this.tConfigDeactivatedError;
    }

    public void setTConfigDeactivatedError(TConfigDeactivated tConfigDeactivatedError) {
      this.tConfigDeactivatedError = tConfigDeactivatedError;
    }

    public void unsetTConfigDeactivatedError() {
      this.tConfigDeactivatedError = null;
    }

    /** Returns true if field tConfigDeactivatedError is set (has been assigned a value) and false otherwise */
    public boolean isSetTConfigDeactivatedError() {
      return this.tConfigDeactivatedError != null;
    }

    public void setTConfigDeactivatedErrorIsSet(boolean value) {
      if (!value) {
        this.tConfigDeactivatedError = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case T_INVALID_REQUEST:
        if (value == null) {
          unsetTInvalidRequest();
        } else {
          setTInvalidRequest((TInvalidRequest)value);
        }
        break;

      case T_DATA_BASE_ERROR:
        if (value == null) {
          unsetTDataBaseError();
        } else {
          setTDataBaseError((TDataBaseError)value);
        }
        break;

      case T_CONFIG_NOT_FOUND_ERROR:
        if (value == null) {
          unsetTConfigNotFoundError();
        } else {
          setTConfigNotFoundError((TConfigNotFound)value);
        }
        break;

      case T_CONFIG_DEACTIVATED_ERROR:
        if (value == null) {
          unsetTConfigDeactivatedError();
        } else {
          setTConfigDeactivatedError((TConfigDeactivated)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case T_INVALID_REQUEST:
        return getTInvalidRequest();

      case T_DATA_BASE_ERROR:
        return getTDataBaseError();

      case T_CONFIG_NOT_FOUND_ERROR:
        return getTConfigNotFoundError();

      case T_CONFIG_DEACTIVATED_ERROR:
        return getTConfigDeactivatedError();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_REQUEST:
        return isSetTInvalidRequest();
      case T_DATA_BASE_ERROR:
        return isSetTDataBaseError();
      case T_CONFIG_NOT_FOUND_ERROR:
        return isSetTConfigNotFoundError();
      case T_CONFIG_DEACTIVATED_ERROR:
        return isSetTConfigDeactivatedError();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateConfig_result)
        return this.equals((updateConfig_result)that);
      return false;
    }

    public boolean equals(updateConfig_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_tInvalidRequest = true && this.isSetTInvalidRequest();
      boolean that_present_tInvalidRequest = true && that.isSetTInvalidRequest();
      if (this_present_tInvalidRequest || that_present_tInvalidRequest) {
        if (!(this_present_tInvalidRequest && that_present_tInvalidRequest))
          return false;
        if (!this.tInvalidRequest.equals(that.tInvalidRequest))
          return false;
      }

      boolean this_present_tDataBaseError = true && this.isSetTDataBaseError();
      boolean that_present_tDataBaseError = true && that.isSetTDataBaseError();
      if (this_present_tDataBaseError || that_present_tDataBaseError) {
        if (!(this_present_tDataBaseError && that_present_tDataBaseError))
          return false;
        if (!this.tDataBaseError.equals(that.tDataBaseError))
          return false;
      }

      boolean this_present_tConfigNotFoundError = true && this.isSetTConfigNotFoundError();
      boolean that_present_tConfigNotFoundError = true && that.isSetTConfigNotFoundError();
      if (this_present_tConfigNotFoundError || that_present_tConfigNotFoundError) {
        if (!(this_present_tConfigNotFoundError && that_present_tConfigNotFoundError))
          return false;
        if (!this.tConfigNotFoundError.equals(that.tConfigNotFoundError))
          return false;
      }

      boolean this_present_tConfigDeactivatedError = true && this.isSetTConfigDeactivatedError();
      boolean that_present_tConfigDeactivatedError = true && that.isSetTConfigDeactivatedError();
      if (this_present_tConfigDeactivatedError || that_present_tConfigDeactivatedError) {
        if (!(this_present_tConfigDeactivatedError && that_present_tConfigDeactivatedError))
          return false;
        if (!this.tConfigDeactivatedError.equals(that.tConfigDeactivatedError))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetTInvalidRequest()) ? 131071 : 524287);
      if (isSetTInvalidRequest())
        hashCode = hashCode * 8191 + tInvalidRequest.hashCode();

      hashCode = hashCode * 8191 + ((isSetTDataBaseError()) ? 131071 : 524287);
      if (isSetTDataBaseError())
        hashCode = hashCode * 8191 + tDataBaseError.hashCode();

      hashCode = hashCode * 8191 + ((isSetTConfigNotFoundError()) ? 131071 : 524287);
      if (isSetTConfigNotFoundError())
        hashCode = hashCode * 8191 + tConfigNotFoundError.hashCode();

      hashCode = hashCode * 8191 + ((isSetTConfigDeactivatedError()) ? 131071 : 524287);
      if (isSetTConfigDeactivatedError())
        hashCode = hashCode * 8191 + tConfigDeactivatedError.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidRequest()).compareTo(other.isSetTInvalidRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidRequest, other.tInvalidRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTDataBaseError()).compareTo(other.isSetTDataBaseError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTDataBaseError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tDataBaseError, other.tDataBaseError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTConfigNotFoundError()).compareTo(other.isSetTConfigNotFoundError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTConfigNotFoundError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tConfigNotFoundError, other.tConfigNotFoundError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTConfigDeactivatedError()).compareTo(other.isSetTConfigDeactivatedError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTConfigDeactivatedError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tConfigDeactivatedError, other.tConfigDeactivatedError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidRequest:");
      if (this.tInvalidRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidRequest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tDataBaseError:");
      if (this.tDataBaseError == null) {
        sb.append("null");
      } else {
        sb.append(this.tDataBaseError);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tConfigNotFoundError:");
      if (this.tConfigNotFoundError == null) {
        sb.append("null");
      } else {
        sb.append(this.tConfigNotFoundError);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tConfigDeactivatedError:");
      if (this.tConfigDeactivatedError == null) {
        sb.append("null");
      } else {
        sb.append(this.tConfigDeactivatedError);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateConfig_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateConfig_resultStandardScheme getScheme() {
        return new updateConfig_resultStandardScheme();
      }
    }

    private static class updateConfig_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidRequest = new TInvalidRequest();
                struct.tInvalidRequest.read(iprot);
                struct.setTInvalidRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_DATA_BASE_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tDataBaseError = new TDataBaseError();
                struct.tDataBaseError.read(iprot);
                struct.setTDataBaseErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_CONFIG_NOT_FOUND_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tConfigNotFoundError = new TConfigNotFound();
                struct.tConfigNotFoundError.read(iprot);
                struct.setTConfigNotFoundErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // T_CONFIG_DEACTIVATED_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tConfigDeactivatedError = new TConfigDeactivated();
                struct.tConfigDeactivatedError.read(iprot);
                struct.setTConfigDeactivatedErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidRequest != null) {
          oprot.writeFieldBegin(T_INVALID_REQUEST_FIELD_DESC);
          struct.tInvalidRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tDataBaseError != null) {
          oprot.writeFieldBegin(T_DATA_BASE_ERROR_FIELD_DESC);
          struct.tDataBaseError.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tConfigNotFoundError != null) {
          oprot.writeFieldBegin(T_CONFIG_NOT_FOUND_ERROR_FIELD_DESC);
          struct.tConfigNotFoundError.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tConfigDeactivatedError != null) {
          oprot.writeFieldBegin(T_CONFIG_DEACTIVATED_ERROR_FIELD_DESC);
          struct.tConfigDeactivatedError.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateConfig_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateConfig_resultTupleScheme getScheme() {
        return new updateConfig_resultTupleScheme();
      }
    }

    private static class updateConfig_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidRequest()) {
          optionals.set(1);
        }
        if (struct.isSetTDataBaseError()) {
          optionals.set(2);
        }
        if (struct.isSetTConfigNotFoundError()) {
          optionals.set(3);
        }
        if (struct.isSetTConfigDeactivatedError()) {
          optionals.set(4);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetTInvalidRequest()) {
          struct.tInvalidRequest.write(oprot);
        }
        if (struct.isSetTDataBaseError()) {
          struct.tDataBaseError.write(oprot);
        }
        if (struct.isSetTConfigNotFoundError()) {
          struct.tConfigNotFoundError.write(oprot);
        }
        if (struct.isSetTConfigDeactivatedError()) {
          struct.tConfigDeactivatedError.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidRequest = new TInvalidRequest();
          struct.tInvalidRequest.read(iprot);
          struct.setTInvalidRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tDataBaseError = new TDataBaseError();
          struct.tDataBaseError.read(iprot);
          struct.setTDataBaseErrorIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tConfigNotFoundError = new TConfigNotFound();
          struct.tConfigNotFoundError.read(iprot);
          struct.setTConfigNotFoundErrorIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tConfigDeactivatedError = new TConfigDeactivated();
          struct.tConfigDeactivatedError.read(iprot);
          struct.setTConfigDeactivatedErrorIsSet(true);
        }
        if (incoming.get(5)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deactivateConfig_args implements org.apache.thrift.TBase<deactivateConfig_args, deactivateConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateConfig_args");

    private static final org.apache.thrift.protocol.TField T_ACT_DEACT_REQUEST_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("tActDeactRequestData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deactivateConfig_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deactivateConfig_argsTupleSchemeFactory();

    private TActDeactRequestData tActDeactRequestData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_ACT_DEACT_REQUEST_DATA((short)1, "tActDeactRequestData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_ACT_DEACT_REQUEST_DATA
            return T_ACT_DEACT_REQUEST_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_ACT_DEACT_REQUEST_DATA, new org.apache.thrift.meta_data.FieldMetaData("tActDeactRequestData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TActDeactRequestData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateConfig_args.class, metaDataMap);
    }

    public deactivateConfig_args() {
    }

    public deactivateConfig_args(
      TActDeactRequestData tActDeactRequestData)
    {
      this();
      this.tActDeactRequestData = tActDeactRequestData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateConfig_args(deactivateConfig_args other) {
      if (other.isSetTActDeactRequestData()) {
        this.tActDeactRequestData = new TActDeactRequestData(other.tActDeactRequestData);
      }
    }

    public deactivateConfig_args deepCopy() {
      return new deactivateConfig_args(this);
    }

    @Override
    public void clear() {
      this.tActDeactRequestData = null;
    }

    public TActDeactRequestData getTActDeactRequestData() {
      return this.tActDeactRequestData;
    }

    public void setTActDeactRequestData(TActDeactRequestData tActDeactRequestData) {
      this.tActDeactRequestData = tActDeactRequestData;
    }

    public void unsetTActDeactRequestData() {
      this.tActDeactRequestData = null;
    }

    /** Returns true if field tActDeactRequestData is set (has been assigned a value) and false otherwise */
    public boolean isSetTActDeactRequestData() {
      return this.tActDeactRequestData != null;
    }

    public void setTActDeactRequestDataIsSet(boolean value) {
      if (!value) {
        this.tActDeactRequestData = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case T_ACT_DEACT_REQUEST_DATA:
        if (value == null) {
          unsetTActDeactRequestData();
        } else {
          setTActDeactRequestData((TActDeactRequestData)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case T_ACT_DEACT_REQUEST_DATA:
        return getTActDeactRequestData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case T_ACT_DEACT_REQUEST_DATA:
        return isSetTActDeactRequestData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateConfig_args)
        return this.equals((deactivateConfig_args)that);
      return false;
    }

    public boolean equals(deactivateConfig_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tActDeactRequestData = true && this.isSetTActDeactRequestData();
      boolean that_present_tActDeactRequestData = true && that.isSetTActDeactRequestData();
      if (this_present_tActDeactRequestData || that_present_tActDeactRequestData) {
        if (!(this_present_tActDeactRequestData && that_present_tActDeactRequestData))
          return false;
        if (!this.tActDeactRequestData.equals(that.tActDeactRequestData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTActDeactRequestData()) ? 131071 : 524287);
      if (isSetTActDeactRequestData())
        hashCode = hashCode * 8191 + tActDeactRequestData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deactivateConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTActDeactRequestData()).compareTo(other.isSetTActDeactRequestData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTActDeactRequestData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tActDeactRequestData, other.tActDeactRequestData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deactivateConfig_args(");
      boolean first = true;

      sb.append("tActDeactRequestData:");
      if (this.tActDeactRequestData == null) {
        sb.append("null");
      } else {
        sb.append(this.tActDeactRequestData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tActDeactRequestData != null) {
        tActDeactRequestData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateConfig_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deactivateConfig_argsStandardScheme getScheme() {
        return new deactivateConfig_argsStandardScheme();
      }
    }

    private static class deactivateConfig_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deactivateConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_ACT_DEACT_REQUEST_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tActDeactRequestData = new TActDeactRequestData();
                struct.tActDeactRequestData.read(iprot);
                struct.setTActDeactRequestDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tActDeactRequestData != null) {
          oprot.writeFieldBegin(T_ACT_DEACT_REQUEST_DATA_FIELD_DESC);
          struct.tActDeactRequestData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateConfig_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deactivateConfig_argsTupleScheme getScheme() {
        return new deactivateConfig_argsTupleScheme();
      }
    }

    private static class deactivateConfig_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deactivateConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTActDeactRequestData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTActDeactRequestData()) {
          struct.tActDeactRequestData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tActDeactRequestData = new TActDeactRequestData();
          struct.tActDeactRequestData.read(iprot);
          struct.setTActDeactRequestDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deactivateConfig_result implements org.apache.thrift.TBase<deactivateConfig_result, deactivateConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField T_INVALID_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("tInvalidRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField T_DATA_BASE_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("tDataBaseError", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField T_CONFIG_NOT_FOUND_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("tConfigNotFoundError", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tEmployeeNotOnboardedException", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deactivateConfig_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deactivateConfig_resultTupleSchemeFactory();

    private boolean success; // required
    private TInvalidRequest tInvalidRequest; // required
    private TDataBaseError tDataBaseError; // required
    private TConfigNotFound tConfigNotFoundError; // required
    private TEmployeeNotOnboardedException tEmployeeNotOnboardedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      T_INVALID_REQUEST((short)1, "tInvalidRequest"),
      T_DATA_BASE_ERROR((short)2, "tDataBaseError"),
      T_CONFIG_NOT_FOUND_ERROR((short)3, "tConfigNotFoundError"),
      T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION((short)4, "tEmployeeNotOnboardedException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // T_INVALID_REQUEST
            return T_INVALID_REQUEST;
          case 2: // T_DATA_BASE_ERROR
            return T_DATA_BASE_ERROR;
          case 3: // T_CONFIG_NOT_FOUND_ERROR
            return T_CONFIG_NOT_FOUND_ERROR;
          case 4: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
            return T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL          , "Success")));
      tmpMap.put(_Fields.T_INVALID_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("tInvalidRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvalidRequest.class)));
      tmpMap.put(_Fields.T_DATA_BASE_ERROR, new org.apache.thrift.meta_data.FieldMetaData("tDataBaseError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataBaseError.class)));
      tmpMap.put(_Fields.T_CONFIG_NOT_FOUND_ERROR, new org.apache.thrift.meta_data.FieldMetaData("tConfigNotFoundError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TConfigNotFound.class)));
      tmpMap.put(_Fields.T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tEmployeeNotOnboardedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmployeeNotOnboardedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateConfig_result.class, metaDataMap);
    }

    public deactivateConfig_result() {
    }

    public deactivateConfig_result(
      boolean success,
      TInvalidRequest tInvalidRequest,
      TDataBaseError tDataBaseError,
      TConfigNotFound tConfigNotFoundError,
      TEmployeeNotOnboardedException tEmployeeNotOnboardedException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.tInvalidRequest = tInvalidRequest;
      this.tDataBaseError = tDataBaseError;
      this.tConfigNotFoundError = tConfigNotFoundError;
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateConfig_result(deactivateConfig_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetTInvalidRequest()) {
        this.tInvalidRequest = new TInvalidRequest(other.tInvalidRequest);
      }
      if (other.isSetTDataBaseError()) {
        this.tDataBaseError = new TDataBaseError(other.tDataBaseError);
      }
      if (other.isSetTConfigNotFoundError()) {
        this.tConfigNotFoundError = new TConfigNotFound(other.tConfigNotFoundError);
      }
      if (other.isSetTEmployeeNotOnboardedException()) {
        this.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException(other.tEmployeeNotOnboardedException);
      }
    }

    public deactivateConfig_result deepCopy() {
      return new deactivateConfig_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.tInvalidRequest = null;
      this.tDataBaseError = null;
      this.tConfigNotFoundError = null;
      this.tEmployeeNotOnboardedException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TInvalidRequest getTInvalidRequest() {
      return this.tInvalidRequest;
    }

    public void setTInvalidRequest(TInvalidRequest tInvalidRequest) {
      this.tInvalidRequest = tInvalidRequest;
    }

    public void unsetTInvalidRequest() {
      this.tInvalidRequest = null;
    }

    /** Returns true if field tInvalidRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetTInvalidRequest() {
      return this.tInvalidRequest != null;
    }

    public void setTInvalidRequestIsSet(boolean value) {
      if (!value) {
        this.tInvalidRequest = null;
      }
    }

    public TDataBaseError getTDataBaseError() {
      return this.tDataBaseError;
    }

    public void setTDataBaseError(TDataBaseError tDataBaseError) {
      this.tDataBaseError = tDataBaseError;
    }

    public void unsetTDataBaseError() {
      this.tDataBaseError = null;
    }

    /** Returns true if field tDataBaseError is set (has been assigned a value) and false otherwise */
    public boolean isSetTDataBaseError() {
      return this.tDataBaseError != null;
    }

    public void setTDataBaseErrorIsSet(boolean value) {
      if (!value) {
        this.tDataBaseError = null;
      }
    }

    public TConfigNotFound getTConfigNotFoundError() {
      return this.tConfigNotFoundError;
    }

    public void setTConfigNotFoundError(TConfigNotFound tConfigNotFoundError) {
      this.tConfigNotFoundError = tConfigNotFoundError;
    }

    public void unsetTConfigNotFoundError() {
      this.tConfigNotFoundError = null;
    }

    /** Returns true if field tConfigNotFoundError is set (has been assigned a value) and false otherwise */
    public boolean isSetTConfigNotFoundError() {
      return this.tConfigNotFoundError != null;
    }

    public void setTConfigNotFoundErrorIsSet(boolean value) {
      if (!value) {
        this.tConfigNotFoundError = null;
      }
    }

    public TEmployeeNotOnboardedException getTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException;
    }

    public void setTEmployeeNotOnboardedException(TEmployeeNotOnboardedException tEmployeeNotOnboardedException) {
      this.tEmployeeNotOnboardedException = tEmployeeNotOnboardedException;
    }

    public void unsetTEmployeeNotOnboardedException() {
      this.tEmployeeNotOnboardedException = null;
    }

    /** Returns true if field tEmployeeNotOnboardedException is set (has been assigned a value) and false otherwise */
    public boolean isSetTEmployeeNotOnboardedException() {
      return this.tEmployeeNotOnboardedException != null;
    }

    public void setTEmployeeNotOnboardedExceptionIsSet(boolean value) {
      if (!value) {
        this.tEmployeeNotOnboardedException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case T_INVALID_REQUEST:
        if (value == null) {
          unsetTInvalidRequest();
        } else {
          setTInvalidRequest((TInvalidRequest)value);
        }
        break;

      case T_DATA_BASE_ERROR:
        if (value == null) {
          unsetTDataBaseError();
        } else {
          setTDataBaseError((TDataBaseError)value);
        }
        break;

      case T_CONFIG_NOT_FOUND_ERROR:
        if (value == null) {
          unsetTConfigNotFoundError();
        } else {
          setTConfigNotFoundError((TConfigNotFound)value);
        }
        break;

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        if (value == null) {
          unsetTEmployeeNotOnboardedException();
        } else {
          setTEmployeeNotOnboardedException((TEmployeeNotOnboardedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case T_INVALID_REQUEST:
        return getTInvalidRequest();

      case T_DATA_BASE_ERROR:
        return getTDataBaseError();

      case T_CONFIG_NOT_FOUND_ERROR:
        return getTConfigNotFoundError();

      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return getTEmployeeNotOnboardedException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case T_INVALID_REQUEST:
        return isSetTInvalidRequest();
      case T_DATA_BASE_ERROR:
        return isSetTDataBaseError();
      case T_CONFIG_NOT_FOUND_ERROR:
        return isSetTConfigNotFoundError();
      case T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION:
        return isSetTEmployeeNotOnboardedException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateConfig_result)
        return this.equals((deactivateConfig_result)that);
      return false;
    }

    public boolean equals(deactivateConfig_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_tInvalidRequest = true && this.isSetTInvalidRequest();
      boolean that_present_tInvalidRequest = true && that.isSetTInvalidRequest();
      if (this_present_tInvalidRequest || that_present_tInvalidRequest) {
        if (!(this_present_tInvalidRequest && that_present_tInvalidRequest))
          return false;
        if (!this.tInvalidRequest.equals(that.tInvalidRequest))
          return false;
      }

      boolean this_present_tDataBaseError = true && this.isSetTDataBaseError();
      boolean that_present_tDataBaseError = true && that.isSetTDataBaseError();
      if (this_present_tDataBaseError || that_present_tDataBaseError) {
        if (!(this_present_tDataBaseError && that_present_tDataBaseError))
          return false;
        if (!this.tDataBaseError.equals(that.tDataBaseError))
          return false;
      }

      boolean this_present_tConfigNotFoundError = true && this.isSetTConfigNotFoundError();
      boolean that_present_tConfigNotFoundError = true && that.isSetTConfigNotFoundError();
      if (this_present_tConfigNotFoundError || that_present_tConfigNotFoundError) {
        if (!(this_present_tConfigNotFoundError && that_present_tConfigNotFoundError))
          return false;
        if (!this.tConfigNotFoundError.equals(that.tConfigNotFoundError))
          return false;
      }

      boolean this_present_tEmployeeNotOnboardedException = true && this.isSetTEmployeeNotOnboardedException();
      boolean that_present_tEmployeeNotOnboardedException = true && that.isSetTEmployeeNotOnboardedException();
      if (this_present_tEmployeeNotOnboardedException || that_present_tEmployeeNotOnboardedException) {
        if (!(this_present_tEmployeeNotOnboardedException && that_present_tEmployeeNotOnboardedException))
          return false;
        if (!this.tEmployeeNotOnboardedException.equals(that.tEmployeeNotOnboardedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetTInvalidRequest()) ? 131071 : 524287);
      if (isSetTInvalidRequest())
        hashCode = hashCode * 8191 + tInvalidRequest.hashCode();

      hashCode = hashCode * 8191 + ((isSetTDataBaseError()) ? 131071 : 524287);
      if (isSetTDataBaseError())
        hashCode = hashCode * 8191 + tDataBaseError.hashCode();

      hashCode = hashCode * 8191 + ((isSetTConfigNotFoundError()) ? 131071 : 524287);
      if (isSetTConfigNotFoundError())
        hashCode = hashCode * 8191 + tConfigNotFoundError.hashCode();

      hashCode = hashCode * 8191 + ((isSetTEmployeeNotOnboardedException()) ? 131071 : 524287);
      if (isSetTEmployeeNotOnboardedException())
        hashCode = hashCode * 8191 + tEmployeeNotOnboardedException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deactivateConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTInvalidRequest()).compareTo(other.isSetTInvalidRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTInvalidRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tInvalidRequest, other.tInvalidRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTDataBaseError()).compareTo(other.isSetTDataBaseError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTDataBaseError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tDataBaseError, other.tDataBaseError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTConfigNotFoundError()).compareTo(other.isSetTConfigNotFoundError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTConfigNotFoundError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tConfigNotFoundError, other.tConfigNotFoundError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTEmployeeNotOnboardedException()).compareTo(other.isSetTEmployeeNotOnboardedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTEmployeeNotOnboardedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tEmployeeNotOnboardedException, other.tEmployeeNotOnboardedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deactivateConfig_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tInvalidRequest:");
      if (this.tInvalidRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.tInvalidRequest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tDataBaseError:");
      if (this.tDataBaseError == null) {
        sb.append("null");
      } else {
        sb.append(this.tDataBaseError);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tConfigNotFoundError:");
      if (this.tConfigNotFoundError == null) {
        sb.append("null");
      } else {
        sb.append(this.tConfigNotFoundError);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tEmployeeNotOnboardedException:");
      if (this.tEmployeeNotOnboardedException == null) {
        sb.append("null");
      } else {
        sb.append(this.tEmployeeNotOnboardedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateConfig_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deactivateConfig_resultStandardScheme getScheme() {
        return new deactivateConfig_resultStandardScheme();
      }
    }

    private static class deactivateConfig_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deactivateConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // T_INVALID_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tInvalidRequest = new TInvalidRequest();
                struct.tInvalidRequest.read(iprot);
                struct.setTInvalidRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_DATA_BASE_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tDataBaseError = new TDataBaseError();
                struct.tDataBaseError.read(iprot);
                struct.setTDataBaseErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_CONFIG_NOT_FOUND_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tConfigNotFoundError = new TConfigNotFound();
                struct.tConfigNotFoundError.read(iprot);
                struct.setTConfigNotFoundErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
                struct.tEmployeeNotOnboardedException.read(iprot);
                struct.setTEmployeeNotOnboardedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.tInvalidRequest != null) {
          oprot.writeFieldBegin(T_INVALID_REQUEST_FIELD_DESC);
          struct.tInvalidRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tDataBaseError != null) {
          oprot.writeFieldBegin(T_DATA_BASE_ERROR_FIELD_DESC);
          struct.tDataBaseError.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tConfigNotFoundError != null) {
          oprot.writeFieldBegin(T_CONFIG_NOT_FOUND_ERROR_FIELD_DESC);
          struct.tConfigNotFoundError.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tEmployeeNotOnboardedException != null) {
          oprot.writeFieldBegin(T_EMPLOYEE_NOT_ONBOARDED_EXCEPTION_FIELD_DESC);
          struct.tEmployeeNotOnboardedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateConfig_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deactivateConfig_resultTupleScheme getScheme() {
        return new deactivateConfig_resultTupleScheme();
      }
    }

    private static class deactivateConfig_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deactivateConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTInvalidRequest()) {
          optionals.set(1);
        }
        if (struct.isSetTDataBaseError()) {
          optionals.set(2);
        }
        if (struct.isSetTConfigNotFoundError()) {
          optionals.set(3);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetTInvalidRequest()) {
          struct.tInvalidRequest.write(oprot);
        }
        if (struct.isSetTDataBaseError()) {
          struct.tDataBaseError.write(oprot);
        }
        if (struct.isSetTConfigNotFoundError()) {
          struct.tConfigNotFoundError.write(oprot);
        }
        if (struct.isSetTEmployeeNotOnboardedException()) {
          struct.tEmployeeNotOnboardedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tInvalidRequest = new TInvalidRequest();
          struct.tInvalidRequest.read(iprot);
          struct.setTInvalidRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tDataBaseError = new TDataBaseError();
          struct.tDataBaseError.read(iprot);
          struct.setTDataBaseErrorIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tConfigNotFoundError = new TConfigNotFound();
          struct.tConfigNotFoundError.read(iprot);
          struct.setTConfigNotFoundErrorIsSet(true);
        }
        if (incoming.get(4)) {
          struct.tEmployeeNotOnboardedException = new TEmployeeNotOnboardedException();
          struct.tEmployeeNotOnboardedException.read(iprot);
          struct.setTEmployeeNotOnboardedExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
