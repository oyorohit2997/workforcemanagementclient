/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.oyo.calendar;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-02-27")
public class TDeleteEventRequest implements org.apache.thrift.TBase<TDeleteEventRequest, TDeleteEventRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TDeleteEventRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDeleteEventRequest");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_REFERENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientReferenceId", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDeleteEventRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDeleteEventRequestTupleSchemeFactory();

  private java.lang.String userId; // required
  private java.lang.String serviceId; // required
  private long eventDate; // required
  private java.lang.String clientReferenceId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    SERVICE_ID((short)2, "serviceId"),
    EVENT_DATE((short)3, "eventDate"),
    CLIENT_REFERENCE_ID((short)4, "clientReferenceId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // SERVICE_ID
          return SERVICE_ID;
        case 3: // EVENT_DATE
          return EVENT_DATE;
        case 4: // CLIENT_REFERENCE_ID
          return CLIENT_REFERENCE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTDATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("eventDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_REFERENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("clientReferenceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDeleteEventRequest.class, metaDataMap);
  }

  public TDeleteEventRequest() {
  }

  public TDeleteEventRequest(
    java.lang.String userId,
    java.lang.String serviceId,
    long eventDate,
    java.lang.String clientReferenceId)
  {
    this();
    this.userId = userId;
    this.serviceId = serviceId;
    this.eventDate = eventDate;
    setEventDateIsSet(true);
    this.clientReferenceId = clientReferenceId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDeleteEventRequest(TDeleteEventRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetServiceId()) {
      this.serviceId = other.serviceId;
    }
    this.eventDate = other.eventDate;
    if (other.isSetClientReferenceId()) {
      this.clientReferenceId = other.clientReferenceId;
    }
  }

  public TDeleteEventRequest deepCopy() {
    return new TDeleteEventRequest(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.serviceId = null;
    setEventDateIsSet(false);
    this.eventDate = 0;
    this.clientReferenceId = null;
  }

  public java.lang.String getUserId() {
    return this.userId;
  }

  public void setUserId(java.lang.String userId) {
    this.userId = userId;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public java.lang.String getServiceId() {
    return this.serviceId;
  }

  public void setServiceId(java.lang.String serviceId) {
    this.serviceId = serviceId;
  }

  public void unsetServiceId() {
    this.serviceId = null;
  }

  /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceId() {
    return this.serviceId != null;
  }

  public void setServiceIdIsSet(boolean value) {
    if (!value) {
      this.serviceId = null;
    }
  }

  public long getEventDate() {
    return this.eventDate;
  }

  public void setEventDate(long eventDate) {
    this.eventDate = eventDate;
    setEventDateIsSet(true);
  }

  public void unsetEventDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENTDATE_ISSET_ID);
  }

  /** Returns true if field eventDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEventDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENTDATE_ISSET_ID);
  }

  public void setEventDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENTDATE_ISSET_ID, value);
  }

  public java.lang.String getClientReferenceId() {
    return this.clientReferenceId;
  }

  public void setClientReferenceId(java.lang.String clientReferenceId) {
    this.clientReferenceId = clientReferenceId;
  }

  public void unsetClientReferenceId() {
    this.clientReferenceId = null;
  }

  /** Returns true if field clientReferenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientReferenceId() {
    return this.clientReferenceId != null;
  }

  public void setClientReferenceIdIsSet(boolean value) {
    if (!value) {
      this.clientReferenceId = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.String)value);
      }
      break;

    case SERVICE_ID:
      if (value == null) {
        unsetServiceId();
      } else {
        setServiceId((java.lang.String)value);
      }
      break;

    case EVENT_DATE:
      if (value == null) {
        unsetEventDate();
      } else {
        setEventDate((java.lang.Long)value);
      }
      break;

    case CLIENT_REFERENCE_ID:
      if (value == null) {
        unsetClientReferenceId();
      } else {
        setClientReferenceId((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case SERVICE_ID:
      return getServiceId();

    case EVENT_DATE:
      return getEventDate();

    case CLIENT_REFERENCE_ID:
      return getClientReferenceId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case SERVICE_ID:
      return isSetServiceId();
    case EVENT_DATE:
      return isSetEventDate();
    case CLIENT_REFERENCE_ID:
      return isSetClientReferenceId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDeleteEventRequest)
      return this.equals((TDeleteEventRequest)that);
    return false;
  }

  public boolean equals(TDeleteEventRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_serviceId = true && this.isSetServiceId();
    boolean that_present_serviceId = true && that.isSetServiceId();
    if (this_present_serviceId || that_present_serviceId) {
      if (!(this_present_serviceId && that_present_serviceId))
        return false;
      if (!this.serviceId.equals(that.serviceId))
        return false;
    }

    boolean this_present_eventDate = true;
    boolean that_present_eventDate = true;
    if (this_present_eventDate || that_present_eventDate) {
      if (!(this_present_eventDate && that_present_eventDate))
        return false;
      if (this.eventDate != that.eventDate)
        return false;
    }

    boolean this_present_clientReferenceId = true && this.isSetClientReferenceId();
    boolean that_present_clientReferenceId = true && that.isSetClientReferenceId();
    if (this_present_clientReferenceId || that_present_clientReferenceId) {
      if (!(this_present_clientReferenceId && that_present_clientReferenceId))
        return false;
      if (!this.clientReferenceId.equals(that.clientReferenceId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetServiceId()) ? 131071 : 524287);
    if (isSetServiceId())
      hashCode = hashCode * 8191 + serviceId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(eventDate);

    hashCode = hashCode * 8191 + ((isSetClientReferenceId()) ? 131071 : 524287);
    if (isSetClientReferenceId())
      hashCode = hashCode * 8191 + clientReferenceId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDeleteEventRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEventDate()).compareTo(other.isSetEventDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventDate, other.eventDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientReferenceId()).compareTo(other.isSetClientReferenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientReferenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientReferenceId, other.clientReferenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDeleteEventRequest(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceId:");
    if (this.serviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventDate:");
    sb.append(this.eventDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientReferenceId:");
    if (this.clientReferenceId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientReferenceId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetUserId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' is unset! Struct:" + toString());
    }

    if (!isSetServiceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceId' is unset! Struct:" + toString());
    }

    if (!isSetEventDate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventDate' is unset! Struct:" + toString());
    }

    if (!isSetClientReferenceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientReferenceId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDeleteEventRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDeleteEventRequestStandardScheme getScheme() {
      return new TDeleteEventRequestStandardScheme();
    }
  }

  private static class TDeleteEventRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDeleteEventRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDeleteEventRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceId = iprot.readString();
              struct.setServiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eventDate = iprot.readI64();
              struct.setEventDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_REFERENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientReferenceId = iprot.readString();
              struct.setClientReferenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDeleteEventRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.serviceId != null) {
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeString(struct.serviceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EVENT_DATE_FIELD_DESC);
      oprot.writeI64(struct.eventDate);
      oprot.writeFieldEnd();
      if (struct.clientReferenceId != null) {
        oprot.writeFieldBegin(CLIENT_REFERENCE_ID_FIELD_DESC);
        oprot.writeString(struct.clientReferenceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDeleteEventRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDeleteEventRequestTupleScheme getScheme() {
      return new TDeleteEventRequestTupleScheme();
    }
  }

  private static class TDeleteEventRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDeleteEventRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDeleteEventRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.userId);
      oprot.writeString(struct.serviceId);
      oprot.writeI64(struct.eventDate);
      oprot.writeString(struct.clientReferenceId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDeleteEventRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.userId = iprot.readString();
      struct.setUserIdIsSet(true);
      struct.serviceId = iprot.readString();
      struct.setServiceIdIsSet(true);
      struct.eventDate = iprot.readI64();
      struct.setEventDateIsSet(true);
      struct.clientReferenceId = iprot.readString();
      struct.setClientReferenceIdIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

